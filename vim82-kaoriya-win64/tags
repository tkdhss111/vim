!_TAG_FILE_ENCODING	cp932	//
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_JP_AUTHOR	HIGASHI Hirohito	/Twitter: @h_east/
!_TAG_PROGRAM_JP_URL	http://hp.vector.co.jp/authors/VA025040/	//
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8J2	//
"	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap " _$/;"	m
#	vim82\indent\dictconf.vim	/^inoremap <buffer> # X#$/;"	m
#	vim82\indent\dictdconf.vim	/^inoremap <buffer> # X#$/;"	m
$	vim82\tutor\tutor.cs	/^		$ (do konce ¯·dku), atd.$/;"	m
$TUTOR	vim82\tutor\tutor.vim	/^  let $TUTOR = $VIMRUNTIME . s:tutorfile$/;"	v
$TUTOR	vim82\tutor\tutor.vim	/^  let $TUTOR = s:tutorxx . ".utf-8"$/;"	v
$TUTOR	vim82\tutor\tutor.vim	/^  let $TUTOR = s:tutorxx$/;"	v
%	vim82\macros\less.vim	/^noremap <script> % %<SID>L$/;"	m
%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nmap <silent> %  <Plug>(MatchitNormalForward)$/;"	m
%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^omap <silent> %  <Plug>(MatchitOperationForward)$/;"	m
&	vim82\macros\life\life.vim	/^map & :%s\/^\\(-[ A-Z]*-\\)\\(-[ A-Z]*-\\)\\(-[.]*-\\)$\/\\2\\3\\3\/$/;"	m
&Edit.&Find\.\.\.		y:promptfind	vim82\menu.vim	/^  vnoremenu <silent>	 &Edit.&Find\\.\\.\\.		y:promptfind <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.&Paste<Tab>"+gP		<C-R>+	vim82\menu.vim	/^cnoremenu	 &Edit.&Paste<Tab>"+gP		<C-R>+$/;"	m
&Edit.Find\	vim82\menu.vim	/^  vnoremenu	 &Edit.Find\\ and\\ Rep&lace<Tab>:s	:s\/$/;"	m
&Edit.Find\	vim82\menu.vim	/^  vnoremenu <silent>	 &Edit.Find\\ and\\ Rep&lace\\.\\.\\. y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
&Edit.Put\	vim82\menu.vim	/^inoremenu	 &Edit.Put\\ &After<Tab>]p	<C-O>]p$/;"	m
&Edit.Put\	vim82\menu.vim	/^inoremenu	 &Edit.Put\\ &Before<Tab>[p	<C-O>[p$/;"	m
&File.&Print			:hardcopy<CR>	vim82\menu.vim	/^  vnoremenu &File.&Print			:hardcopy<CR>$/;"	m
&File.&Print			:w	vim82\menu.vim	/^  vnoremenu &File.&Print			:w !lpr<CR>$/;"	m
&Tools.&Diff.&Get\	vim82\menu.vim	/^  vnoremenu &Tools.&Diff.&Get\\ Block		:diffget<CR>$/;"	m
&Tools.&Diff.&Put\	vim82\menu.vim	/^  vnoremenu &Tools.&Diff.&Put\\ Block		:diffput<CR>$/;"	m
&Tools.&Jump\	vim82\menu.vim	/^vnoremenu &Tools.&Jump\\ to\\ This\\ Tag<Tab>g^]	g<C-]>$/;"	m
'	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap ' -$/;"	m
(	vim82\macros\life\life.vim	/^map ( ,s,i,X0i?^#A $/;"	m
)0	vim82\macros\life\life.vim	/^map )0 o-                    --....................--....................-$/;"	m
)1	vim82\macros\life\life.vim	/^map )1 o-    JOHN CONWAY     --....................--....................-$/;"	m
)2	vim82\macros\life\life.vim	/^map )2 o-       LIVES        --....................--....................-$/;"	m
*	vim82\macros\urm\urm.vim	/^map * 1G\/INIT$/;"	m
+	vim82\macros\life\life.vim	/^map + <1C<2$/;"	m
+	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap + }$/;"	m
,	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap , w$/;"	m
,!	vim82\macros\life\life.vim	/^map ,! "byy$/;"	m
,#	vim82\macros\life\life.vim	/^map ,# "bP$/;"	m
,$	vim82\macros\life\life.vim	/^map ,$ dd$/;"	m
,%	vim82\macros\life\life.vim	/^map ,% "cp$/;"	m
,&	vim82\macros\life\life.vim	/^map ,& 0"gd\$$/;"	m
,*	vim82\macros\life\life.vim	/^map ,* @g$/;"	m
,-	vim82\macros\life\life.vim	/^map ,- :s\/.\/-\/g$/;"	m
,1	vim82\macros\life\life.vim	/^map ,1 y G$p$/;"	m
,2	vim82\macros\life\life.vim	/^map ,2 2y G$p$/;"	m
,3	vim82\macros\life\life.vim	/^map ,3 3y G$p$/;"	m
,@	vim82\macros\life\life.vim	/^map ,@ "cyy$/;"	m
,IIN	vim82\macros\life\life.vim	/^map ,IIN G?^top$/;"	m
,Iaa	vim82\macros\life\life.vim	/^map ,Iaa o=AB =BC =CD =DE =EF =FG =GH =HI =IJ =JK =KL =LM =MN =NO =OP =PQ =QR$/;"	m
,Iab	vim82\macros\life\life.vim	/^map ,Iab o=RS =ST =TU =UV =VW =WX =XY =YZ =Z $/;"	m
,Id0	vim82\macros\life\life.vim	/^map ,Id0 o#  .`a22lr $/;"	m
,Id1	vim82\macros\life\life.vim	/^map ,Id1 o# X .`a22lr $/;"	m
,Id2	vim82\macros\life\life.vim	/^map ,Id2 o# XX .`a22lr $/;"	m
,Id3	vim82\macros\life\life.vim	/^map ,Id3 o# XXX .`a22lrA$/;"	m
,Id4	vim82\macros\life\life.vim	/^map ,Id4 o# XXXX .`a22lr $/;"	m
,Id5	vim82\macros\life\life.vim	/^map ,Id5 o# XXXXX .`a22lr $/;"	m
,Id6	vim82\macros\life\life.vim	/^map ,Id6 o# XXXXXX .`a22lr $/;"	m
,Id7	vim82\macros\life\life.vim	/^map ,Id7 o# XXXXXXX .`a22lr $/;"	m
,Id8	vim82\macros\life\life.vim	/^map ,Id8 o# XXXXXXXX .`a22lr $/;"	m
,Il0	vim82\macros\life\life.vim	/^map ,Il0 o#XX .`a22lr $/;"	m
,Il1	vim82\macros\life\life.vim	/^map ,Il1 o#XXX .`a22lr $/;"	m
,Il2	vim82\macros\life\life.vim	/^map ,Il2 o#XXXX .,a$/;"	m
,Il3	vim82\macros\life\life.vim	/^map ,Il3 o#XXXXX .,a$/;"	m
,Il4	vim82\macros\life\life.vim	/^map ,Il4 o#XXXXXX .`a22lr $/;"	m
,Il5	vim82\macros\life\life.vim	/^map ,Il5 o#XXXXXXX .`a22lr $/;"	m
,Il6	vim82\macros\life\life.vim	/^map ,Il6 o#XXXXXXXX .`a22lr $/;"	m
,Il7	vim82\macros\life\life.vim	/^map ,Il7 o#XXXXXXXXX .`a22lr $/;"	m
,Il8	vim82\macros\life\life.vim	/^map ,Il8 O#XXXXXXXXXX .`a22lr $/;"	m
,R	vim82\macros\life\life.vim	/^map ,R 03stop$/;"	m
,X	vim82\macros\life\life.vim	/^map ,X :.g\/[A-Z]\/s\/\/X\/g$/;"	m
,Y	vim82\macros\life\life.vim	/^map ,Y "qy$@q$/;"	m
,^	vim82\macros\life\life.vim	/^map ,^ AiC$/;"	m
,a	vim82\macros\life\life.vim	/^map ,a `a,jGi?=,ma$/;"	m
,c	vim82\macros\life\life.vim	/^map ,c c$$/;"	m
,d	vim82\macros\life\life.vim	/^map ,d "qd$@q$/;"	m
,d	vim82\pack\dist\opt\dvorak\plugin\dvorak.vim	/^map ,d :runtime dvorak\/enable.vim<CR>$/;"	m
,gq	vim82\pack\dist\opt\justify\plugin\justify.vim	/^nmap ,gq :%s\/\\s\\+\/ \/g<CR>gq1G$/;"	m
,gq	vim82\pack\dist\opt\justify\plugin\justify.vim	/^vmap ,gq :s\/\\s\\+\/ \/g<CR>gvgq$/;"	m
,i	vim82\macros\life\life.vim	/^map ,i `ay GP$/;"	m
,j	vim82\macros\life\life.vim	/^map ,j y $/;"	m
,m	vim82\macros\life\life.vim	/^map ,m p$/;"	m
,n	vim82\macros\life\life.vim	/^map ,n x$/;"	m
,o	vim82\macros\life\life.vim	/^map ,o oPut 'X's in the left box, then hit 'C' or 'R'$/;"	m
,q	vim82\pack\dist\opt\dvorak\plugin\dvorak.vim	/^map ,q :runtime dvorak\/disable.vim<CR>$/;"	m
,r	vim82\macros\life\life.vim	/^map ,r makh,2`akF-l,1`ah,2`aF-l,1`ajh,2`ajF-l,1($/;"	m
,s	vim82\macros\life\life.vim	/^map ,s :.g\/ \/s\/\/\/g$/;"	m
-	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap - [$/;"	m
.	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap . v$/;"	m
/	vim82\macros\less.vim	/^noremap <script> \/ H$:call <SID>Forward()<CR>\/$/;"	m
/	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap \/ z$/;"	m
0	vim82\syntax\hitest.vim	/^normal 0$/;"	m
1.100	vim82\menu.vim	/^cnoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-U>call <SID>SelectAll()<CR>$/;"	m
1.100	vim82\menu.vim	/^inoremenu <script> <silent> 1.100 PopUp.Select\\ &All	<C-O>:call <SID>SelectAll()<CR>$/;"	m
1.100	vim82\menu.vim	/^noremenu  <script> <silent> 1.100 PopUp.Select\\ &All	:<C-U>call <SID>SelectAll()<CR>$/;"	m
1.120	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.120 PopUp.-SEP3-	<Nop>$/;"	m
1.130.100	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.130.100 PopUp.ëSäpÅ®îºäp(&H).ëSïî(&L) <C-\\><C-N>:call <SID>HzjaConvertVisual('han_all')<CR>$/;"	m
1.130.110	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.130.110 PopUp.ëSäpÅ®îºäp(&H).ASCII(&A) <C-\\><C-N>:call <SID>HzjaConvertVisual('han_ascii')<CR>$/;"	m
1.130.120	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.130.120 PopUp.ëSäpÅ®îºäp(&H).ãLçÜ(&M) <C-\\><C-N>:call <SID>HzjaConvertVisual('han_kigou')<CR>$/;"	m
1.130.130	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.130.130 PopUp.ëSäpÅ®îºäp(&H).âpêî(&W) <C-\\><C-N>:call <SID>HzjaConvertVisual('han_eisu')<CR>$/;"	m
1.130.140	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.130.140 PopUp.ëSäpÅ®îºäp(&H).ÉJÉ^ÉJÉi(&J) <C-\\><C-N>:call <SID>HzjaConvertVisual('han_kana')<CR>$/;"	m
1.140.100	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.140.100 PopUp.îºäpÅ®ëSäp(&Z).ëSïî(&L) <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_all')<CR>$/;"	m
1.140.110	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.140.110 PopUp.îºäpÅ®ëSäp(&Z).ASCII(&A) <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_ascii')<CR>$/;"	m
1.140.120	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.140.120 PopUp.îºäpÅ®ëSäp(&Z).ãLçÜ(&M) <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_kigou')<CR>$/;"	m
1.140.130	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.140.130 PopUp.îºäpÅ®ëSäp(&Z).âpêî(&W) <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_eisu')<CR>$/;"	m
1.140.140	plugins\kaoriya\plugin\hz_ja.vim	/^  vnoremenu 1.140.140 PopUp.îºäpÅ®ëSäp(&Z).ÉJÉ^ÉJÉi(&J) <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_kana')<CR>$/;"	m
1.20	vim82\menu.vim	/^vnoremenu 1.20 PopUp.Cu&t		"+x$/;"	m
1.30	vim82\menu.vim	/^cnoremenu 1.30 PopUp.&Copy		<C-Y>$/;"	m
1.30	vim82\menu.vim	/^vnoremenu 1.30 PopUp.&Copy		"+y$/;"	m
1.40	vim82\menu.vim	/^cnoremenu 1.40 PopUp.&Paste		<C-R>+$/;"	m
1.40	vim82\menu.vim	/^nnoremenu 1.40 PopUp.&Paste		"+gP$/;"	m
1.50	vim82\menu.vim	/^vnoremenu 1.50 PopUp.&Delete		x$/;"	m
1.60	vim82\menu.vim	/^vnoremenu 1.60 PopUp.Select\\ Blockwise	<C-V>$/;"	m
1.70	vim82\menu.vim	/^  vnoremenu 1.70 ToolBar.Cut		"+x$/;"	m
1.70	vim82\menu.vim	/^cnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.70	vim82\menu.vim	/^inoremenu 1.70 PopUp.Select\\ &Word	<C-O>vaw$/;"	m
1.70	vim82\menu.vim	/^nnoremenu 1.70 PopUp.Select\\ &Word	vaw$/;"	m
1.70	vim82\menu.vim	/^onoremenu 1.70 PopUp.Select\\ &Word	aw$/;"	m
1.70	vim82\menu.vim	/^vnoremenu 1.70 PopUp.Select\\ &Word	<C-C>vaw$/;"	m
1.73	vim82\menu.vim	/^cnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.73	vim82\menu.vim	/^inoremenu 1.73 PopUp.Select\\ &Sentence	<C-O>vas$/;"	m
1.73	vim82\menu.vim	/^nnoremenu 1.73 PopUp.Select\\ &Sentence	vas$/;"	m
1.73	vim82\menu.vim	/^onoremenu 1.73 PopUp.Select\\ &Sentence	as$/;"	m
1.73	vim82\menu.vim	/^vnoremenu 1.73 PopUp.Select\\ &Sentence	<C-C>vas$/;"	m
1.77	vim82\menu.vim	/^cnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.77	vim82\menu.vim	/^inoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-O>vap$/;"	m
1.77	vim82\menu.vim	/^nnoremenu 1.77 PopUp.Select\\ Pa&ragraph	vap$/;"	m
1.77	vim82\menu.vim	/^onoremenu 1.77 PopUp.Select\\ Pa&ragraph	ap$/;"	m
1.77	vim82\menu.vim	/^vnoremenu 1.77 PopUp.Select\\ Pa&ragraph	<C-C>vap$/;"	m
1.80	vim82\menu.vim	/^  cnoremenu 1.80 ToolBar.Copy		<C-Y>$/;"	m
1.80	vim82\menu.vim	/^  vnoremenu 1.80 ToolBar.Copy		"+y$/;"	m
1.80	vim82\menu.vim	/^cnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	vim82\menu.vim	/^inoremenu 1.80 PopUp.Select\\ &Line	<C-O>V$/;"	m
1.80	vim82\menu.vim	/^nnoremenu 1.80 PopUp.Select\\ &Line	V$/;"	m
1.80	vim82\menu.vim	/^onoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.80	vim82\menu.vim	/^vnoremenu 1.80 PopUp.Select\\ &Line	<C-C>V$/;"	m
1.90	vim82\menu.vim	/^  nnoremenu 1.90 ToolBar.Paste		"+gP$/;"	m
1.90	vim82\menu.vim	/^cnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	vim82\menu.vim	/^inoremenu 1.90 PopUp.Select\\ &Block	<C-O><C-V>$/;"	m
1.90	vim82\menu.vim	/^nnoremenu 1.90 PopUp.Select\\ &Block	<C-V>$/;"	m
1.90	vim82\menu.vim	/^onoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
1.90	vim82\menu.vim	/^vnoremenu 1.90 PopUp.Select\\ &Block	<C-C><C-V>$/;"	m
20.340	vim82\menu.vim	/^vnoremenu 20.340 &Edit.Cu&t<Tab>"+x		"+x$/;"	m
20.350	vim82\menu.vim	/^cnoremenu 20.350 &Edit.&Copy<Tab>"+y		<C-Y>$/;"	m
20.350	vim82\menu.vim	/^vnoremenu 20.350 &Edit.&Copy<Tab>"+y		"+y$/;"	m
20.360	vim82\menu.vim	/^nnoremenu 20.360 &Edit.&Paste<Tab>"+gP		"+gP$/;"	m
20.370	vim82\menu.vim	/^nnoremenu 20.370 &Edit.Put\\ &Before<Tab>[p	[p$/;"	m
20.380	vim82\menu.vim	/^nnoremenu 20.380 &Edit.Put\\ &After<Tab>]p	]p$/;"	m
20.390	vim82\menu.vim	/^  vnoremenu 20.390 &Edit.&Delete<Tab>x		x$/;"	m
20.400	vim82\menu.vim	/^cnoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-U>call <SID>SelectAll()<CR>$/;"	m
20.400	vim82\menu.vim	/^inoremenu <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	<C-O>:call <SID>SelectAll()<CR>$/;"	m
20.400	vim82\menu.vim	/^noremenu  <script> <silent> 20.400 &Edit.&Select\\ All<Tab>ggVG	:<C-U>call <SID>SelectAll()<CR>$/;"	m
40.340.120	vim82\menu.vim	/^  inoremenu 40.340.120 &Tools.&Folding.Vie&w\\ Cursor\\ Line\\ Only<Tab>zMzx  <C-O>zM<C-O>zx$/;"	m
40.340.220	vim82\menu.vim	/^  vnoremenu 40.340.220 &Tools.&Folding.Create\\ &Fold<Tab>zf	zf$/;"	m
:	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap : S$/;"	m
;	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap ; s$/;"	m
<	vim82\ftplugin\cobol.vim	/^        nnoremap <silent> <buffer> < :set opfunc=<SID>DecreaseFunc<CR>g@$/;"	m
<	vim82\ftplugin\cobol.vim	/^    vnoremap <silent> <buffer> < :call CobolIndentBlock(-v:count1)<CR>$/;"	m
<	vim82\macros\less.vim	/^map < g$/;"	m
<	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap < W$/;"	m
<1	vim82\macros\life\life.vim	/^map <1 G?^top$/;"	m
<2	vim82\macros\life\life.vim	/^map <2 G?^top$/;"	m
<2-LeftMouse>	<2-RightMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <2-LeftMouse>	<2-RightMouse>$/;"	m
<2-RightMouse>	<2-LeftMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <2-RightMouse>	<2-LeftMouse>$/;"	m
<3-LeftMouse>	<3-RightMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <3-LeftMouse>	<3-RightMouse>$/;"	m
<3-RightMouse>	<3-LeftMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <3-RightMouse>	<3-LeftMouse>$/;"	m
<4-LeftMouse>	<4-RightMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <4-LeftMouse>	<4-RightMouse>$/;"	m
<4-RightMouse>	<4-LeftMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <4-RightMouse>	<4-LeftMouse>$/;"	m
<<	vim82\ftplugin\cobol.vim	/^    nnoremap <silent> <buffer> << :call CobolIndentBlock(-1)<CR>$/;"	m
<<	vim82\macros\life\life.vim	/^map << :r!date$/;"	m
<BS>	vim82\mswin.vim	/^vnoremap <BS> d$/;"	m
<C-A>	vim82\ftplugin\gitrebase.vim	/^nnoremap <buffer> <silent> <C-A> :<C-U><C-R>=v:count1<CR>Cycle<CR>$/;"	m
<C-A>	vim82\mswin.vim	/^cnoremap <C-A> <C-C>gggH<C-O>G$/;"	m
<C-A>	vim82\mswin.vim	/^inoremap <C-A> <C-O>gg<C-O>gH<C-O>G$/;"	m
<C-A>	vim82\mswin.vim	/^noremap <C-A> gggH<C-O>G$/;"	m
<C-A>	vim82\mswin.vim	/^onoremap <C-A> <C-C>gggH<C-O>G$/;"	m
<C-B>	vim82\macros\less.vim	/^map <C-B> b$/;"	m
<C-C>	vim82\mswin.vim	/^    vnoremap <C-C> "+y$/;"	m
<C-D>	vim82\ftplugin\cobol.vim	/^    inoremap <silent> <buffer> <C-D> <C-R>=<SID>DecreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-D>	vim82\macros\less.vim	/^map <C-D> d$/;"	m
<C-E>	vim82\macros\less.vim	/^map <C-E> <CR>$/;"	m
<C-F4>	vim82\mswin.vim	/^cnoremap <C-F4> <C-C><C-W>c$/;"	m
<C-F4>	vim82\mswin.vim	/^inoremap <C-F4> <C-O><C-W>c$/;"	m
<C-F4>	vim82\mswin.vim	/^noremap <C-F4> <C-W>c$/;"	m
<C-F4>	vim82\mswin.vim	/^onoremap <C-F4> <C-C><C-W>c$/;"	m
<C-F>	vim82\evim.vim	/^cnoremap <silent> <C-F> <C-C>:promptfind<CR>$/;"	m
<C-F>	vim82\evim.vim	/^inoremap <silent> <C-F> <C-O>:promptfind<CR>$/;"	m
<C-F>	vim82\evim.vim	/^noremap <silent> <C-F> :promptfind<CR>$/;"	m
<C-F>	vim82\evim.vim	/^onoremap <silent> <C-F> <C-C>:promptfind<CR>$/;"	m
<C-F>	vim82\evim.vim	/^vnoremap <silent> <C-F> y:promptfind <C-R>"<CR>$/;"	m
<C-F>	vim82\macros\less.vim	/^map <C-F> <Space>$/;"	m
<C-F>	vim82\mswin.vim	/^  cnoremap <expr> <C-F> has("gui_running") ? "\\<C-\\>\\<C-C>:promptfind\\<CR>" : "\\<C-\\>\\<C-O>\/"$/;"	m
<C-F>	vim82\mswin.vim	/^  inoremap <expr> <C-F> has("gui_running") ? "\\<C-\\>\\<C-O>:promptfind\\<CR>" : "\\<C-\\>\\<C-O>\/"$/;"	m
<C-F>	vim82\mswin.vim	/^  noremap  <expr> <C-F> has("gui_running") ? ":promptfind\\<CR>" : "\/"$/;"	m
<C-H>	vim82\mswin.vim	/^  cnoremap <expr> <C-H> has("gui_running") ? "\\<C-\\>\\<C-C>:promptrepl\\<CR>" : "\\<C-H>"$/;"	m
<C-H>	vim82\mswin.vim	/^  inoremap <expr> <C-H> has("gui_running") ? "\\<C-\\>\\<C-O>:promptrepl\\<CR>" : "\\<C-H>"$/;"	m
<C-H>	vim82\mswin.vim	/^  nnoremap <expr> <C-H> has("gui_running") ? ":promptrepl\\<CR>" : "\\<C-H>"$/;"	m
<C-Insert>	vim82\mswin.vim	/^    vnoremap <C-Insert> "+y$/;"	m
<C-J>	vim82\macros\less.vim	/^map <C-J> <CR>$/;"	m
<C-K>	vim82\macros\less.vim	/^map <C-K> k$/;"	m
<C-N>	vim82\ftplugin\ada.vim	/^      inoremap <unique> <buffer> <C-N> <C-R>=ada#Completion("\\<lt>C-N>")<cr>$/;"	m
<C-N>	vim82\macros\less.vim	/^map <C-N> <CR>$/;"	m
<C-P>	vim82\ftplugin\ada.vim	/^      inoremap <unique> <buffer> <C-P> <C-R>=ada#Completion("\\<lt>C-P>")<cr>$/;"	m
<C-P>	vim82\macros\less.vim	/^map <C-P> k$/;"	m
<C-Q>		<C-V>	vim82\mswin.vim	/^noremap <C-Q>		<C-V>$/;"	m
<C-R>	vim82\macros\less.vim	/^noremap <script> <C-R> <C-L><SID>L$/;"	m
<C-S>		:update<CR>	vim82\mswin.vim	/^noremap <C-S>		:update<CR>$/;"	m
<C-S>		<C-C>:update<CR>	vim82\mswin.vim	/^vnoremap <C-S>		<C-C>:update<CR>$/;"	m
<C-S>		<Esc>:update<CR>gi	vim82\mswin.vim	/^inoremap <C-S>		<Esc>:update<CR>gi$/;"	m
<C-T>	vim82\ftplugin\cobol.vim	/^    inoremap <silent> <buffer> <C-T> <C-R>=<SID>IncreaseIndent()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<C-T>	vim82\ftplugin\pdf.vim	/^nnoremap <silent><buffer> <C-T> :if len(b:pdf_tagstack) > 0 <Bar> call setpos('.',remove(b:pdf_tagstack, -1)) <Bar> else <Bar> exe "norm! \\<Lt>C-T>" <Bar> endif<CR>$/;"	m
<C-Tab>	vim82\mswin.vim	/^cnoremap <C-Tab> <C-C><C-W>w$/;"	m
<C-Tab>	vim82\mswin.vim	/^inoremap <C-Tab> <C-O><C-W>w$/;"	m
<C-Tab>	vim82\mswin.vim	/^noremap <C-Tab> <C-W>w$/;"	m
<C-Tab>	vim82\mswin.vim	/^onoremap <C-Tab> <C-C><C-W>w$/;"	m
<C-U>	vim82\defaults.vim	/^inoremap <C-U> <C-G>u<C-U>$/;"	m
<C-U>	vim82\macros\less.vim	/^noremap <script> <C-U> <C-U><SID>L$/;"	m
<C-V>		"+gP	vim82\mswin.vim	/^    map <C-V>		"+gP$/;"	m
<C-V>		<C-R>+	vim82\mswin.vim	/^    cmap <C-V>		<C-R>+$/;"	m
<C-V>	vim82\macros\less.vim	/^map <C-V> <Space>$/;"	m
<C-W><C-D>	vim82\ftplugin\cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W><C-D>  :<C-U>exe <SID>jump('split',v:count)<SID>foldopen<CR>$/;"	m
<C-W>d	vim82\ftplugin\cucumber.vim	/^  nnoremap <silent> <script> <buffer> <C-W>d      :<C-U>exe <SID>jump('split',v:count)<SID>foldopen<CR>$/;"	m
<C-X>	plugins\kaoriya\plugin\cmdex.vim	/^cnoremap <C-X> <C-R>=<SID>GetBufferDirectory()<CR>$/;"	m
<C-X>	vim82\ftplugin\gitrebase.vim	/^nnoremap <buffer> <silent> <C-X> :<C-U><C-R>=v:count1<CR>Cycle!<CR>$/;"	m
<C-X>	vim82\mswin.vim	/^    vnoremap <C-X> "+x$/;"	m
<C-X><C-]>	vim82\ftplugin\ada.vim	/^      inoremap <unique> <buffer> <C-X><C-]> <C-R>=<SID>ada#Completion("\\<lt>C-X>\\<lt>C-]>")<cr>$/;"	m
<C-Y>	vim82\macros\less.vim	/^map <C-Y> k$/;"	m
<C-Y>	vim82\mswin.vim	/^inoremap <C-Y> <C-O><C-R>$/;"	m
<C-Y>	vim82\mswin.vim	/^noremap <C-Y> <C-R>$/;"	m
<C-Z>	vim82\mswin.vim	/^inoremap <C-Z> <C-O>u$/;"	m
<C-Z>	vim82\mswin.vim	/^noremap <C-Z> u$/;"	m
<C-]>	vim82\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#Jump_Tag ('', 'tjump')<cr>$/;"	m
<C-]>	vim82\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> <C-]>    :call ada#List_Tag ()<cr>$/;"	m
<C-]>	vim82\ftplugin\gprof.vim	/^map <buffer> <silent> <C-]> :call <SID>GprofJumpToFunctionIndex()<CR>$/;"	m
<C-]>	vim82\ftplugin\pdf.vim	/^nnoremap <silent><buffer> <C-]> :call <SID>Tag()<CR>$/;"	m
<CR>	vim82\macros\less.vim	/^noremap <script> <CR> <C-E><SID>L$/;"	m
<CR>	vim82\optwin.vim	/^inoremap <silent> <buffer> <CR> <Esc>:call <SID>CR()<CR>$/;"	m
<CR>	vim82\optwin.vim	/^noremap <silent> <buffer> <CR> <C-\\><C-N>:call <SID>CR()<CR>$/;"	m
<D-R>	vim82\ftplugin\rust.vim	/^nnoremap <buffer> <D-R> :RustRun! <C-r>=join(b:rust_last_rustc_args)<CR><C-\\>erust#AppendCmdLine(' -- ' . join(b:rust_last_args))<CR>$/;"	m
<D-S-s>	vim82\macmap.vim	/^cmap <special> <D-S-s> <C-C><D-s>$/;"	m
<D-S-s>	vim82\macmap.vim	/^imap <special> <D-S-s> <C-O><D-s>$/;"	m
<D-S-s>	vim82\macmap.vim	/^nnoremap <special> <D-S-s> :browse confirm saveas<CR>$/;"	m
<D-S-s>	vim82\macmap.vim	/^omap <special> <D-S-s> <Esc><D-s>$/;"	m
<D-S-s>	vim82\macmap.vim	/^vmap <special> <D-S-s> <Esc><D-s>gv$/;"	m
<D-a>	vim82\macmap.vim	/^cmap <special> <D-a> <C-C><D-a>$/;"	m
<D-a>	vim82\macmap.vim	/^imap <special> <D-a> <Esc><D-a>$/;"	m
<D-a>	vim82\macmap.vim	/^nnoremap <silent> <special> <D-a> :if &slm != ""<Bar>exe ":norm gggH<C-O>G"<Bar> else<Bar>exe ":norm ggVG"<Bar>endif<CR>$/;"	m
<D-a>	vim82\macmap.vim	/^omap <special> <D-a> <Esc><D-a>$/;"	m
<D-a>	vim82\macmap.vim	/^vmap <special> <D-a> <Esc><D-a>$/;"	m
<D-c>	vim82\macmap.vim	/^cnoremap <special> <D-c> <C-Y>$/;"	m
<D-c>	vim82\macmap.vim	/^vnoremap <special> <D-c> "+y$/;"	m
<D-f>	vim82\macmap.vim	/^cmap <special> <D-f> <C-C><D-f>$/;"	m
<D-f>	vim82\macmap.vim	/^imap <special> <D-f> <Esc><D-f>$/;"	m
<D-f>	vim82\macmap.vim	/^nnoremap <special> <D-f> \/$/;"	m
<D-f>	vim82\macmap.vim	/^omap <special> <D-f> <Esc><D-f>$/;"	m
<D-f>	vim82\macmap.vim	/^vmap <special> <D-f> <Esc><D-f>$/;"	m
<D-g>	vim82\macmap.vim	/^cmap <special> <D-g> <C-C><D-g>$/;"	m
<D-g>	vim82\macmap.vim	/^imap <special> <D-g> <C-O><D-g>$/;"	m
<D-g>	vim82\macmap.vim	/^nnoremap <special> <D-g> n$/;"	m
<D-g>	vim82\macmap.vim	/^omap <special> <D-g> <Esc><D-g>$/;"	m
<D-g>	vim82\macmap.vim	/^vmap <special> <D-g> <Esc><D-g>$/;"	m
<D-n>	vim82\macmap.vim	/^cmap <special> <D-n> <C-C><D-n>$/;"	m
<D-n>	vim82\macmap.vim	/^imap <special> <D-n> <C-O><D-n>$/;"	m
<D-n>	vim82\macmap.vim	/^nnoremap <special> <D-n> :confirm enew<CR>$/;"	m
<D-n>	vim82\macmap.vim	/^omap <special> <D-n> <Esc><D-n>$/;"	m
<D-n>	vim82\macmap.vim	/^vmap <special> <D-n> <Esc><D-n>gv$/;"	m
<D-o>	vim82\macmap.vim	/^cmap <special> <D-o> <C-C><D-o>$/;"	m
<D-o>	vim82\macmap.vim	/^imap <special> <D-o> <C-O><D-o>$/;"	m
<D-o>	vim82\macmap.vim	/^nnoremap <special> <D-o> :browse confirm e<CR>$/;"	m
<D-o>	vim82\macmap.vim	/^omap <special> <D-o> <Esc><D-o>$/;"	m
<D-o>	vim82\macmap.vim	/^vmap <special> <D-o> <Esc><D-o>gv$/;"	m
<D-r>	vim82\ftplugin\rust.vim	/^nnoremap <silent> <buffer> <D-r> :RustRun<CR>$/;"	m
<D-s>	vim82\macmap.vim	/^cmap <special> <D-s> <C-C><D-s>$/;"	m
<D-s>	vim82\macmap.vim	/^imap <special> <D-s> <C-O><D-s>$/;"	m
<D-s>	vim82\macmap.vim	/^nnoremap <silent> <special> <D-s> :if expand("%") == ""<Bar>browse confirm w<Bar> else<Bar>confirm w<Bar>endif<CR>$/;"	m
<D-s>	vim82\macmap.vim	/^omap <special> <D-s> <Esc><D-s>$/;"	m
<D-s>	vim82\macmap.vim	/^vmap <special> <D-s> <Esc><D-s>gv$/;"	m
<D-v>	vim82\macmap.vim	/^cnoremap <special> <D-v> <C-R>+$/;"	m
<D-v>	vim82\macmap.vim	/^nnoremap <special> <D-v> "+gP$/;"	m
<D-w>	vim82\macmap.vim	/^cmap <special> <D-w> <C-C><D-w>$/;"	m
<D-w>	vim82\macmap.vim	/^imap <special> <D-w> <C-O><D-w>$/;"	m
<D-w>	vim82\macmap.vim	/^nnoremap <silent> <special> <D-w> :if winheight(2) < 0 <Bar> confirm enew <Bar> else <Bar> confirm close <Bar> endif<CR>$/;"	m
<D-w>	vim82\macmap.vim	/^omap <special> <D-w> <Esc><D-w>$/;"	m
<D-w>	vim82\macmap.vim	/^vmap <special> <D-w> <Esc><D-w>gv$/;"	m
<D-x>	vim82\macmap.vim	/^vnoremap <special> <D-x> "+x$/;"	m
<D-z>	vim82\macmap.vim	/^cmap <special> <D-z> <C-C><D-z>$/;"	m
<D-z>	vim82\macmap.vim	/^imap <special> <D-z> <C-O><D-z>$/;"	m
<D-z>	vim82\macmap.vim	/^nnoremap <special> <D-z> u$/;"	m
<D-z>	vim82\macmap.vim	/^omap <special> <D-z> <Esc><D-z>$/;"	m
<D-z>	vim82\macmap.vim	/^vmap <special> <D-z> <Esc><D-z>gv$/;"	m
<Down>	vim82\evim.vim	/^inoremap <silent> <Down> <C-R>=pumvisible() ? "\\<lt>Down>" : "\\<lt>C-O>gj"<CR>$/;"	m
<Down>	vim82\ftplugin\flexwiki.vim	/^      imap <buffer> <Down>   <C-o>gj$/;"	m
<Down>	vim82\ftplugin\flexwiki.vim	/^  nmap <buffer> <Down> gj$/;"	m
<Down>	vim82\ftplugin\flexwiki.vim	/^  vmap <buffer> <Down> gj$/;"	m
<Down>	vim82\macros\less.vim	/^map <Down> <CR>$/;"	m
<End>	vim82\macros\less.vim	/^map <End> G$/;"	m
<Esc><	vim82\macros\less.vim	/^map <Esc>< g$/;"	m
<Esc><Space>	vim82\macros\less.vim	/^map <Esc><Space> <Space>$/;"	m
<Esc>>	vim82\macros\less.vim	/^map <Esc>> G$/;"	m
<Esc>v	vim82\macros\less.vim	/^map <Esc>v b$/;"	m
<F8>	vim82\keymap\oldturkic-orkhon_utf-8.vim	/^lnoremap <F8> <C-^>$/;"	m
<F8>	vim82\keymap\oldturkic-orkhon_utf-8.vim	/^noremap  <F8> :let &iminsert = ! &iminsert<CR>$/;"	m
<F8>	vim82\keymap\oldturkic-orkhon_utf-8.vim	/^noremap! <F8> <C-^>$/;"	m
<F8>	vim82\keymap\oldturkic-yenisei_utf-8.vim	/^lnoremap <F8> <C-^>$/;"	m
<F8>	vim82\keymap\oldturkic-yenisei_utf-8.vim	/^noremap  <F8> :let &iminsert = ! &iminsert<CR>$/;"	m
<F8>	vim82\keymap\oldturkic-yenisei_utf-8.vim	/^noremap! <F8> <C-^>$/;"	m
<Home>	vim82\macros\less.vim	/^map <Home> g$/;"	m
<Leader>K	vim82\ftplugin\man.vim	/^  nmap <Leader>K :call <SID>PreGetPage(0)<CR>$/;"	m
<Leader>o	vim82\ftplugin\changelog.vim	/^    nnoremap <buffer> <silent> <Leader>o :<C-u>call <SID>new_changelog_entry('')<CR>$/;"	m
<Leader>o	vim82\ftplugin\changelog.vim	/^  nnoremap <silent> <Leader>o :call <SID>open_changelog()<CR>$/;"	m
<LeftDrag>	<RightDrag>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <LeftDrag>	<RightDrag>$/;"	m
<LeftDrag>	<RightDrag>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap! <LeftDrag>	<RightDrag>$/;"	m
<LeftMouse>	<RightMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <LeftMouse>	<RightMouse>$/;"	m
<LeftMouse>	<RightMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap! <LeftMouse>	<RightMouse>$/;"	m
<LeftRelease>	<RightRelease>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <LeftRelease>	<RightRelease>$/;"	m
<LeftRelease>	<RightRelease>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap! <LeftRelease>	<RightRelease>$/;"	m
<LocalLeader><LocalLeader>	vim82\ftplugin\abaqus.vim	/^noremap <silent><buffer> <LocalLeader><LocalLeader> $/;"	m
<LocalLeader>C	vim82\ftplugin\lprolog.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>C	vim82\ftplugin\lprolog.vim	/^    vmap <buffer> <LocalLeader>C <Plug>BUncomOff$/;"	m
<LocalLeader>C	vim82\ftplugin\ocaml.vim	/^    nmap <buffer> <LocalLeader>C <Plug>LUncomOff$/;"	m
<LocalLeader>S	vim82\ftplugin\ocaml.vim	/^  nmap <buffer> <LocalLeader>S <Plug>OCamlSwitchNewWin$/;"	m
<LocalLeader>c	vim82\ftplugin\lprolog.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	vim82\ftplugin\lprolog.vim	/^    vmap <buffer> <LocalLeader>c <Plug>BUncomOn$/;"	m
<LocalLeader>c	vim82\ftplugin\ocaml.vim	/^    nmap <buffer> <LocalLeader>c <Plug>LUncomOn$/;"	m
<LocalLeader>c	vim82\ftplugin\spec.vim	/^		map <buffer> <LocalLeader>c <Plug>SpecChangelog$/;"	m
<LocalLeader>h	vim82\ftplugin\man.vim	/^      nmap <buffer> <LocalLeader>h <Plug>ManBS$/;"	m
<LocalLeader>q	vim82\ftplugin\mail.vim	/^    nmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>q	vim82\ftplugin\mail.vim	/^    vmap <buffer> <LocalLeader>q <Plug>MailQuote$/;"	m
<LocalLeader>s	vim82\ftplugin\ocaml.vim	/^  nmap <buffer> <LocalLeader>s <Plug>OCamlSwitchEdit$/;"	m
<LocalLeader>t	vim82\ftplugin\ocaml.vim	/^  nmap <buffer> <LocalLeader>t <Plug>OCamlPrintType$/;"	m
<M-Space>	vim82\mswin.vim	/^  cnoremap <M-Space> <C-C>:simalt ~<CR>$/;"	m
<M-Space>	vim82\mswin.vim	/^  inoremap <M-Space> <C-O>:simalt ~<CR>$/;"	m
<M-Space>	vim82\mswin.vim	/^  noremap <M-Space> :simalt ~<CR>$/;"	m
<PageDown>	vim82\macros\less.vim	/^map <PageDown> <Space>$/;"	m
<PageUp>	vim82\macros\less.vim	/^map <PageUp> b$/;"	m
<Plug>(MatchitNormalBackward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>$/;"	m
<Plug>(MatchitNormalForward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>$/;"	m
<Plug>(MatchitNormalMultiBackward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>$/;"	m
<Plug>(MatchitNormalMultiForward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>$/;"	m
<Plug>(MatchitOperationBackward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>$/;"	m
<Plug>(MatchitOperationForward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>$/;"	m
<Plug>(MatchitOperationMultiBackward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>$/;"	m
<Plug>(MatchitOperationMultiForward)	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>$/;"	m
<Plug>(godoc-keyword)	plugins\golang\plugin\go\godoc.vim	/^nnoremap <silent> <Plug>(godoc-keyword) :<C-u>call <SID>Godoc('')<CR>$/;"	m
<Plug><cfile>	vim82\ftplugin\ruby.vim	/^cmap <buffer><script><expr> <Plug><cfile> substitute(RubyCursorFile(),'^$',"\\022\\006",'')$/;"	m
<Plug><ctag>	vim82\ftplugin\ruby.vim	/^cmap <buffer><script><expr> <Plug><ctag> substitute(RubyCursorTag(),'^$',"\\022\\027",'')$/;"	m
<Plug>BUncomOff	vim82\ftplugin\lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOff <ESC>:'<,'><CR>`<dd`>dd`<$/;"	m
<Plug>BUncomOn	vim82\ftplugin\lprolog.vim	/^  vnoremap <buffer> <Plug>BUncomOn <ESC>:'<,'><CR>`<O<ESC>0i\/*<ESC>`>o<ESC>0i*\/<ESC>`<$/;"	m
<Plug>Comment	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>Comment          :call <SID>Comment('c')<CR>$/;"	m
<Plug>DeComment	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>DeComment        :call <SID>Comment('u')<CR>$/;"	m
<Plug>LUncomOff	vim82\ftplugin\lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOff <ESC>:s\/^\\\/\\* \\(.*\\) \\*\\\/\/\\1\/<CR>$/;"	m
<Plug>LUncomOff	vim82\ftplugin\ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOff :s\/^(\\* \\(.*\\) \\*)\/\\1\/<CR>:noh<CR>$/;"	m
<Plug>LUncomOn	vim82\ftplugin\lprolog.vim	/^  nnoremap <buffer> <Plug>LUncomOn mz0i\/* <ESC>$A *\/<ESC>`z$/;"	m
<Plug>LUncomOn	vim82\ftplugin\ocaml.vim	/^  nnoremap <buffer> <Plug>LUncomOn gI(* <End> *)<ESC>$/;"	m
<Plug>MailQuote	vim82\ftplugin\mail.vim	/^  nnoremap <buffer> <Plug>MailQuote :.,$s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>MailQuote	vim82\ftplugin\mail.vim	/^  vnoremap <buffer> <Plug>MailQuote :s\/^\/> \/<CR>:noh<CR>``$/;"	m
<Plug>ManBS	vim82\ftplugin\man.vim	/^    nnoremap <buffer> <Plug>ManBS :%s\/.\\b\/\/g<CR>:setl nomod<CR>''$/;"	m
<Plug>ManPreGetPage	vim82\ftplugin\man.vim	/^  nmap <Plug>ManPreGetPage :call <SID>PreGetPage(0)<CR>$/;"	m
<Plug>NetrwBrowseX	vim82\plugin\netrwPlugin.vim	/^  nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<cr>$/;"	m
<Plug>NetrwBrowseXVis	vim82\plugin\netrwPlugin.vim	/^  vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>$/;"	m
<Plug>NetrwShrink	vim82\plugin\netrwPlugin.vim	/^ nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>$/;"	m
<Plug>OCamlPrintType	vim82\ftplugin\ocaml.vim	/^  nnoremap <silent> <Plug>OCamlPrintType :<C-U>call Ocaml_print_type("normal")<CR>$/;"	m
<Plug>OCamlSwitchEdit	vim82\ftplugin\ocaml.vim	/^  nnoremap <Plug>OCamlSwitchEdit :<C-u>call OCaml_switch(0)<CR>$/;"	m
<Plug>OCamlSwitchNewWin	vim82\ftplugin\ocaml.vim	/^  nnoremap <Plug>OCamlSwitchNewWin :<C-u>call OCaml_switch(1)<CR>$/;"	m
<Plug>SpecChangelog	vim82\ftplugin\spec.vim	/^       noremap <buffer> <unique> <script> <Plug>SpecChangelog :call <SID>SpecChangelog("")<CR>$/;"	m
<Plug>Traditional	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>Traditional      :call <SID>Comment('t')<CR>$/;"	m
<Plug>VisualComment	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualComment     :'<,'>call <SID>Comment('c')<CR>$/;"	m
<Plug>VisualDeComment	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualDeComment   :'<,'>call <SID>Comment('u')<CR>$/;"	m
<Plug>VisualTraditional	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> <Plug>VisualTraditional :'<,'>call <SID>Comment('t')<CR>$/;"	m
<RightDrag>	<LeftDrag>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <RightDrag>	<LeftDrag>$/;"	m
<RightDrag>	<LeftDrag>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap! <RightDrag>	<LeftDrag>$/;"	m
<RightMouse>	<LeftMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <RightMouse>	<LeftMouse>$/;"	m
<RightMouse>	<LeftMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap! <RightMouse>	<LeftMouse>$/;"	m
<RightRelease>	<LeftRelease>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 <RightRelease>	<LeftRelease>$/;"	m
<RightRelease>	<LeftRelease>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap! <RightRelease>	<LeftRelease>$/;"	m
<S-Del>	vim82\mswin.vim	/^    vnoremap <S-Del> "+x$/;"	m
<S-Down>	vim82\ftplugin\flexwiki.vim	/^  imap <buffer> <S-Down>   <C-o>gj$/;"	m
<S-Down>	vim82\macros\less.vim	/^map <S-Down> <Space>$/;"	m
<S-Insert>		"+gP	vim82\mswin.vim	/^    map <S-Insert>		"+gP$/;"	m
<S-Insert>		<C-R>+	vim82\mswin.vim	/^    cmap <S-Insert>		<C-R>+$/;"	m
<S-Insert>		<C-V>	vim82\mswin.vim	/^imap <S-Insert>		<C-V>$/;"	m
<S-Insert>		<C-V>	vim82\mswin.vim	/^vmap <S-Insert>		<C-V>$/;"	m
<S-Insert>	vim82\gvimrc_example.vim	/^map <S-Insert> <MiddleMouse>$/;"	m
<S-Insert>	vim82\gvimrc_example.vim	/^map! <S-Insert> <MiddleMouse>$/;"	m
<S-Up>	vim82\ftplugin\flexwiki.vim	/^  imap <buffer> <S-Up>     <C-o>gk$/;"	m
<S-Up>	vim82\macros\less.vim	/^map <S-Up> b$/;"	m
<SID>:	vim82\ftplugin\ruby.vim	/^  nmap <buffer><script> <SID>:  :<C-U>$/;"	m
<SID>L	vim82\macros\less.vim	/^  noremap <SID>L L0:redraw<CR>:file<CR>$/;"	m
<SID>L	vim82\macros\less.vim	/^  noremap <SID>L Lg0:redraw<CR>:file<CR>$/;"	m
<SID>c:	vim82\ftplugin\ruby.vim	/^  nmap <buffer><script> <SID>c: :<C-U><C-R>=v:count ? v:count : ''<CR>$/;"	m
<SID>foldopen	vim82\ftplugin\cucumber.vim	/^  cnoremap <SID>foldopen <Bar>if &foldopen =~# 'tag'<Bar>exe 'norm! zv'<Bar>endif$/;"	m
<SID>tagzv	vim82\ftplugin\ruby.vim	/^  cmap <buffer><script><expr> <SID>tagzv &foldopen =~# 'tag' ? '<Bar>norm! zv' : ''$/;"	m
<Space>	vim82\macros\less.vim	/^noremap <script> <Space> :call <SID>NextPage()<CR><SID>L$/;"	m
<Space>	vim82\optwin.vim	/^noremap <silent> <buffer> <Space> :call <SID>Space()<CR>$/;"	m
<Tab>	vim82\ftplugin\cobol.vim	/^        inoremap <silent> <buffer> <Tab> <C-R>=<SID>Tab()<CR><C-R>=<SID>RestoreShiftwidth()<CR>$/;"	m
<Up>	vim82\evim.vim	/^inoremap <silent> <Up> <C-R>=pumvisible() ? "\\<lt>Up>" : "\\<lt>C-O>gk"<CR>$/;"	m
<Up>	vim82\ftplugin\flexwiki.vim	/^      imap <buffer> <Up>     <C-o>gk$/;"	m
<Up>	vim82\ftplugin\flexwiki.vim	/^  nmap <buffer> <Up>   gk$/;"	m
<Up>	vim82\ftplugin\flexwiki.vim	/^  vmap <buffer> <Up>   gk$/;"	m
<Up>	vim82\macros\less.vim	/^map <Up> k$/;"	m
<bs>	vim82\ftplugin\ada.vim	/^      inoremap <silent> <unique> <buffer> <bs> <C-R>=ada#Insert_Backspace ()<cr>$/;"	m
<c-]>	vim82\ftplugin\man.vim	/^    nnoremap <buffer> <silent> <c-]> :call <SID>PreGetPage(v:count)<CR>$/;"	m
<c-t>	vim82\ftplugin\man.vim	/^    nnoremap <buffer> <silent> <c-t> :call <SID>PopPage()<CR>$/;"	m
<c-tab>	vim82\plugin\netrwPlugin.vim	/^  nmap <unique> <c-tab> <Plug>NetrwShrink$/;"	m
<char-166><char-201><char-161>	vim82\keymap\tamil_tscii.vim	/^no     <char-166><char-201><char-161>$/;"	m
<char-167><char-201><char-161>	vim82\keymap\tamil_tscii.vim	/^noo    <char-167><char-201><char-161>$/;"	m
<kEnd>	vim82\macros\less.vim	/^map <kEnd> G$/;"	m
<kHome>	vim82\macros\less.vim	/^map <kHome> g$/;"	m
<kPageDown>	vim82\macros\less.vim	/^map <kPageDown> <Space>$/;"	m
<kPageUp>	vim82\macros\less.vim	/^map <kPageUp> b$/;"	m
=	vim82\macros\urm\urm.vim	/^map = 'kf,$/;"	m
=	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap = ]$/;"	m
==	vim82\indent\testdir\runtest.vim	/^	  normal ==$/;"	m
>	vim82\ftplugin\cobol.vim	/^        nnoremap <silent> <buffer> > :set opfunc=<SID>IncreaseFunc<CR>g@$/;"	m
>	vim82\ftplugin\cobol.vim	/^    vnoremap <silent> <buffer> > :call CobolIndentBlock(v:count1)<CR>$/;"	m
>	vim82\macros\less.vim	/^map > G$/;"	m
>	vim82\macros\life\life.vim	/^map > 0 LWWWWWWWWWWWWWWWWWW,rj$/;"	m
>	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap > V$/;"	m
>>	vim82\ftplugin\cobol.vim	/^    nnoremap <silent> <buffer> >> :call CobolIndentBlock(1)<CR>$/;"	m
?	vim82\macros\less.vim	/^  noremap <script> ? H0:call <SID>Backward()<CR>?$/;"	m
?	vim82\macros\less.vim	/^  noremap <script> ? Hg0:call <SID>Backward()<CR>?$/;"	m
?	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap ? Z$/;"	m
A	vim82\macros\hanoi\hanoi.vim	/^map A "fyl$/;"	m
A	vim82\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
A	vim82\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
A	vim82\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
A	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap A A$/;"	m
Abaqus_ToggleComment	vim82\ftplugin\abaqus.vim	/^function! <SID>Abaqus_ToggleComment() range$/;"	f
Accents	vim82\syntax\tex.vim	/^   fun! s:Accents(chr,...)$/;"	f
AccessModifier	vim82\indent\ruby.vim	/^function! s:AccessModifier(cline_info) abort$/;"	f
Add	vim82\syntax\cucumber.vim	/^function! s:Add(name)$/;"	f
AddBlockTag	vim82\indent\html.vim	/^func! s:AddBlockTag(tag, id, ...)$/;"	f
AddEntry	vim82\ftplugin\debchangelog.vim	/^function AddEntry()$/;"	f
AddITags	vim82\indent\html.vim	/^func! s:AddITags(tags, taglist)$/;"	f
AfterAccessModifier	vim82\indent\ruby.vim	/^function! s:AfterAccessModifier(pline_info) abort$/;"	f
AfterBlockOpening	vim82\indent\ruby.vim	/^function! s:AfterBlockOpening(pline_info) abort$/;"	f
AfterEndKeyword	vim82\indent\ruby.vim	/^function! s:AfterEndKeyword(pline_info) abort$/;"	f
AfterHangingSplat	vim82\indent\ruby.vim	/^function! s:AfterHangingSplat(pline_info) abort$/;"	f
AfterIndentKeyword	vim82\indent\ruby.vim	/^function! s:AfterIndentKeyword(pline_info) abort$/;"	f
AfterLeadingOperator	vim82\indent\ruby.vim	/^function! s:AfterLeadingOperator(pline_info) abort$/;"	f
AfterUnbalancedBracket	vim82\indent\ruby.vim	/^function! s:AfterUnbalancedBracket(pline_info) abort$/;"	f
Alien2	vim82\indent\html.vim	/^func! s:Alien2()$/;"	f
Alien3	vim82\indent\html.vim	/^func! s:Alien3()$/;"	f
Alien4	vim82\indent\html.vim	/^func! s:Alien4()$/;"	f
Alien5	vim82\indent\html.vim	/^func! s:Alien5()$/;"	f
Alien6	vim82\indent\html.vim	/^func! s:Alien6()$/;"	f
AlternatePair	vim82\indent\javascript.vim	/^function s:AlternatePair()$/;"	f
AntSyntaxScript	vim82\syntax\ant.vim	/^    fun AntSyntaxScript(tagname, synfilename)$/;"	f
AppendPropCarefully	vim82\tools\xcmdsrv_client.c	/^AppendPropCarefully($/;"	f	file:
Autodate	plugins\kaoriya\plugin\autodate.vim	/^  augroup Autodate$/;"	a
Autodate	plugins\kaoriya\plugin\autodate.vim	/^command! -range Autodate call <SID>Autodate(<line1>, <line2>)$/;"	c
Autodate	plugins\kaoriya\plugin\autodate.vim	/^function! s:Autodate(...)$/;"	f
AutodateOFF	plugins\kaoriya\plugin\autodate.vim	/^command! AutodateOFF let b:autodate_disable = 1$/;"	c
AutodateON	plugins\kaoriya\plugin\autodate.vim	/^command! AutodateON let b:autodate_disable = 0$/;"	c
AutodateStub	plugins\kaoriya\plugin\autodate.vim	/^function! s:AutodateStub(first, last)$/;"	f
B	vim82\macros\hanoi\hanoi.vim	/^map B "hyl$/;"	m
B	vim82\macros\life\life.vim	/^map B ,%k>,\$$/;"	m
B	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap B X$/;"	m
BMAdd	vim82\menu.vim	/^func s:BMAdd()$/;"	f
BMCanAdd	vim82\menu.vim	/^func s:BMCanAdd(name, num)$/;"	f
BMFilename	vim82\menu.vim	/^func s:BMFilename(name, num)$/;"	f
BMHash	vim82\menu.vim	/^func s:BMHash(name)$/;"	f
BMHash2	vim82\menu.vim	/^func s:BMHash2(name)$/;"	f
BMMunge	vim82\menu.vim	/^func s:BMMunge(fname, bnum)$/;"	f
BMRemove	vim82\menu.vim	/^func s:BMRemove()$/;"	f
BMShow	vim82\menu.vim	/^func s:BMShow(...)$/;"	f
BMTruncName	vim82\menu.vim	/^func s:BMTruncName(fname)$/;"	f
Backward	vim82\macros\less.vim	/^fun! s:Backward()$/;"	f
BalanceDirection	vim82\indent\php.vim	/^function! BalanceDirection (str)$/;"	f
Balanced	vim82\indent\javascript.vim	/^function s:Balanced(lnum,line)$/;"	f
BasePath	vim82\tools\ccfilter.c	/^char	       BasePath[1024];$/;"	v
BeginElementFound	vim82\indent\erlang.vim	/^function! s:BeginElementFound(stack, token, curr_vcol, stored_vcol, end_token, sw)$/;"	f
BeginElementFoundIfEmpty	vim82\indent\erlang.vim	/^function! s:BeginElementFoundIfEmpty(stack, token, curr_vcol, stored_vcol, sw)$/;"	f
BeginningOfClauseFound	vim82\indent\erlang.vim	/^function! s:BeginningOfClauseFound(stack, token, stored_vcol)$/;"	f
BinOptionG	vim82\optwin.vim	/^fun! <SID>BinOptionG(name, val)$/;"	f
BinOptionL	vim82\optwin.vim	/^fun! <SID>BinOptionL(name)$/;"	f
BlockComment	vim82\indent\ruby.vim	/^function! s:BlockComment(cline_info) abort$/;"	f
Block_pattern	vim82\ftplugin\ocaml.vim	/^    function! s:Block_pattern(lin1,lin2,col1,col2)$/;"	f
Breakpoint2SignNumber	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:Breakpoint2SignNumber(id, subid)$/;"	f
BufRead	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:BufRead()$/;"	f
BufUnloaded	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:BufUnloaded()$/;"	f
BuildCaseTable	vim82\tools\unicode.vim	/^func! BuildCaseTable(name, index)$/;"	f
BuildCombiningTable	vim82\tools\unicode.vim	/^func! BuildCombiningTable()$/;"	f
BuildEmojiTable	vim82\tools\unicode.vim	/^func! BuildEmojiTable(pattern, tableName)$/;"	f
BuildFoldTable	vim82\tools\unicode.vim	/^func! BuildFoldTable()$/;"	f
BuildWidthTable	vim82\tools\unicode.vim	/^func! BuildWidthTable(pattern, tableName)$/;"	f
Builtin	vim82\syntax\8th.vim	/^com! -nargs=+ Builtin syn keyword eighthBuiltin <args>$/;"	c
Builtin	vim82\syntax\reva.vim	/^com! -nargs=+ Builtin syn keyword revaBuiltin <args>$/;"	c
Builtins.cd	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.cd cd$/;"	m
Builtins.echo	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.echo echo$/;"	m
Builtins.eval	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.eval eval$/;"	m
Builtins.exec	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.exec exec$/;"	m
Builtins.export	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.export export$/;"	m
Builtins.getopts	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.getopts getopts$/;"	m
Builtins.hash	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.hash hash$/;"	m
Builtins.newgrp	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.newgrp newgrp$/;"	m
Builtins.pwd	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.pwd pwd$/;"	m
Builtins.read	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.read read$/;"	m
Builtins.readonly	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.readonly readonly$/;"	m
Builtins.return	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.return return$/;"	m
Builtins.times	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.times times$/;"	m
Builtins.type	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.type type$/;"	m
Builtins.umask	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.umask umask$/;"	m
Builtins.wait	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Builtins.wait wait$/;"	m
Bundle	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=+                                                Bundle        call vundle#config#bundle(<args>)$/;"	c
BundleClean	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang                                          BundleClean   PluginClean<bang>$/;"	c
BundleDocs	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=0                                                BundleDocs    PluginDocs$/;"	c
BundleInstall	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleInstall PluginInstall<bang> <args>$/;"	c
BundleList	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=0 -bang                                          BundleList    PluginList<bang>$/;"	c
BundleSearch	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete BundleSearch  PluginSearch<bang> <args>$/;"	c
BundleUpdate	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com!                                                         BundleUpdate  PluginInstall!$/;"	c
BzlFoldText	vim82\ftplugin\bzl.vim	/^function BzlFoldText() abort$/;"	f
C	vim82\macros\hanoi\hanoi.vim	/^map C "fp$/;"	m
C	vim82\macros\life\life.vim	/^map C T>>>>>>>>B&$/;"	m
C	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap C J$/;"	m
CMakeGetIndent	vim82\indent\cmake.vim	/^fun! CMakeGetIndent(lnum)$/;"	f
COMPILER_AIX	vim82\tools\ccfilter.c	37;"	d	file:
COMPILER_ATT	vim82\tools\ccfilter.c	38;"	d	file:
COMPILER_DEFAULT	vim82\tools\ccfilter.c	57;"	d	file:
COMPILER_DEFAULT	vim82\tools\ccfilter.c	59;"	d	file:
COMPILER_DEFAULT	vim82\tools\ccfilter.c	61;"	d	file:
COMPILER_DEFAULT	vim82\tools\ccfilter.c	63;"	d	file:
COMPILER_DEFAULT	vim82\tools\ccfilter.c	65;"	d	file:
COMPILER_DEFAULT	vim82\tools\ccfilter.c	67;"	d	file:
COMPILER_DEFAULT	vim82\tools\ccfilter.c	69;"	d	file:
COMPILER_GCC	vim82\tools\ccfilter.c	36;"	d	file:
COMPILER_HPUX	vim82\tools\ccfilter.c	41;"	d	file:
COMPILER_IRIX	vim82\tools\ccfilter.c	39;"	d	file:
COMPILER_Names	vim82\tools\ccfilter.c	/^char	*COMPILER_Names[][2] =$/;"	v
COMPILER_QTY	vim82\tools\ccfilter.c	54;"	d	file:
COMPILER_SOLARIS	vim82\tools\ccfilter.c	40;"	d	file:
COMPILER_UNKNOWN	vim82\tools\ccfilter.c	35;"	d	file:
CR	vim82\optwin.vim	/^fun! <SID>CR()$/;"	f
CSS1	vim82\syntax\2html.vim	/^function! s:CSS1(id)$/;"	f
CSSIndent	vim82\indent\html.vim	/^func! s:CSSIndent()$/;"	f
CWD	vim82\tools\ccfilter.c	/^char	       CWD[1024];$/;"	v
CacheRstFold	vim82\autoload\RstFold.vim	/^function s:CacheRstFold()$/;"	f
CalcVCol	vim82\indent\erlang.vim	/^function! s:CalcVCol(line, first_index, last_index, vcol, tabstop)$/;"	f
CdCurrent	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 CdCurrent cd %:p:h$/;"	c
CdlAsignment	vim82\indent\cdl.vim	/^fun! CdlAsignment(lnum, line)$/;"	f
CdlGetIndent	vim82\indent\cdl.vim	/^fun! CdlGetIndent(lnum)$/;"	f
Cfilter	vim82\pack\dist\opt\cfilter\plugin\cfilter.vim	/^com! -nargs=+ -bang Cfilter call s:Qf_filter(1, <q-args>, <q-bang>)$/;"	c
ChangeMenu	plugins\kaoriya\plugin\cmdex.vim	/^function! s:ChangeMenu(name)$/;"	f
CheckBlockTag	vim82\indent\html.vim	/^func! s:CheckBlockTag(blocktag, ind)$/;"	f
CheckCustomTag	vim82\indent\html.vim	/^func! s:CheckCustomTag(ctag)$/;"	f
CheckEucEUC	plugins\kaoriya\plugin\verifyenc.vim	/^  function! CheckEucEUC()$/;"	f
CheckIconvCapability	plugins\kaoriya\encode_japan.vim	/^function! s:CheckIconvCapability()$/;"	f
CheckIfKde	vim82\autoload\netrw.vim	/^fun! s:CheckIfKde()$/;"	f
CheckPairedIsLastCharacter	vim82\indent\tex.vim	/^function! s:CheckPairedIsLastCharacter(lnum, col) "{{{$/;"	f
CheckScratchWritten	plugins\kaoriya\plugin\cmdex.vim	/^function! s:CheckScratchWritten()$/;"	f
CheckTag	vim82\indent\html.vim	/^func! s:CheckTag(itag)$/;"	f
CheckToIgnoreRightParen	vim82\indent\sqlanywhere.vim	/^function! s:CheckToIgnoreRightParen( prev_lnum, num_levels )$/;"	f
ChgDir	vim82\autoload\vimball.vim	/^fun! s:ChgDir(newdir)$/;"	f
ChgDir	vim82\autoload\zip.vim	/^fun! s:ChgDir(newdir,errlvl,errmsg)$/;"	f
Choose	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
CleanUp	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:CleanUp(options, mode, startpos, ...)$/;"	f
ClearBreakpoint	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:ClearBreakpoint()$/;"	f
ClearTokenCacheIfNeeded	vim82\indent\erlang.vim	/^function! s:ClearTokenCacheIfNeeded()$/;"	f
Clearstack	vim82\autoload\xmlcomplete.vim	/^function! s:Clearstack(sname)$/;"	f
Close	plugins\kaoriya\plugin\dicwin.vim	/^function! s:Close()$/;"	f
CloseBuffers	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:CloseBuffers()$/;"	f
CloseBug	vim82\ftplugin\debchangelog.vim	/^function CloseBug()$/;"	f
ClosingBracketOnEmptyLine	vim82\indent\ruby.vim	/^function! s:ClosingBracketOnEmptyLine(cline_info) abort$/;"	f
ClosingHeredocDelimiter	vim82\indent\ruby.vim	/^function! s:ClosingHeredocDelimiter(cline_info) abort$/;"	f
CmdexScratch	plugins\kaoriya\plugin\cmdex.vim	/^augroup CmdexScratch$/;"	a
CobolIndentBlock	vim82\ftplugin\cobol.vim	/^function! CobolIndentBlock(shift)$/;"	f
Col	vim82\tools\ccfilter.c	/^unsigned long  Col;$/;"	v
CommOutput	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:CommOutput(chan, msg)$/;"	f
Comment	vim82\ftplugin\cobol.vim	/^function! s:Comment(arg)$/;"	f
CommentOrString	vim82\indent\mp.vim	/^function! s:CommentOrString(line, pos)$/;"	f
CompilerSet	vim82\compiler\ant.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\bcc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\cargo.vim	/^	command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\checkstyle.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\context.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\cs.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\csslint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\cucumber.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\decada.vim	/^   command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\dot.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\eruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\eslint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\fortran_F.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\fortran_cv.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\fortran_elf90.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\fortran_g77.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\fortran_lf95.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\fpc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\g95.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\gfortran.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\gnat.vim	/^   command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\go.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\haml.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\hp_acc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\icc.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\ifort.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\intel.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\irix5_c.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\irix5_cpp.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\javac.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\jikes.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\mips_c.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\mipspro_c89.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\mipspro_cpp.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\modelsim_vcom.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\msbuild.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\neato.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\onsgmls.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\pbx.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\perl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\php.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\pylint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\pyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\rake.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\rspec.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\rst.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\ruby.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\rubyunit.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\rustc.vim	/^	command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\sass.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\se.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\splint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\standard.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\tcl.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\tex.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\tidy.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\xbuild.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\xmllint.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
CompilerSet	vim82\compiler\xmlwf.vim	/^  command -nargs=* CompilerSet setlocal <args>$/;"	c
Component	vim82\tools\shtags.pl	/^Component:	$id[1]$/;"	l
ComposePath	vim82\autoload\netrw.vim	/^fun! s:ComposePath(base,subdir)$/;"	f
ConTeXt	vim82\ftplugin\context.vim	/^command! -buffer -nargs=? -complete=file ConTeXt          call context#typeset(<q-args>)$/;"	c
ConTeXtJobStatus	vim82\ftplugin\context.vim	/^command!         -nargs=0                ConTeXtJobStatus call context#job_status()$/;"	c
ConTeXtStopJobs	vim82\ftplugin\context.vim	/^command!         -nargs=0                ConTeXtStopJobs  call context#stop_jobs()$/;"	c
ContainedGroup	vim82\syntax\scala.vim	/^function! s:ContainedGroup()$/;"	f
ContainedGroup	vim82\syntax\zsh.vim	/^function! s:ContainedGroup()$/;"	f
ContinuedHangingOperator	vim82\indent\ruby.vim	/^function! s:ContinuedHangingOperator(msl_info) abort$/;"	f
ContinuedLine	vim82\indent\ruby.vim	/^function! s:ContinuedLine(pline_info) abort$/;"	f
Continues	vim82\indent\javascript.vim	/^function s:Continues()$/;"	f
Count	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CountITags	vim82\indent\html.vim	/^func! s:CountITags(text)$/;"	f
CountTagsAndState	vim82\indent\html.vim	/^func! s:CountTagsAndState(text)$/;"	f
CountUnbalancedParen	vim82\indent\sqlanywhere.vim	/^function! s:CountUnbalancedParen( line, paren_to_check )$/;"	f
CountWrapper	vim82\ftplugin\vhdl.vim	/^function! <SID>CountWrapper(cmd)$/;"	f
CreateBreakpoint	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:CreateBreakpoint(id, subid)$/;"	f
CssFirstUnfinished	vim82\indent\html.vim	/^func! s:CssFirstUnfinished(lnum, min_lnum)$/;"	f
CssPrevNonComment	vim82\indent\html.vim	/^func! s:CssPrevNonComment(lnum, stopline)$/;"	f
CssUnfinished	vim82\indent\html.vim	/^func! s:CssUnfinished(text)$/;"	f
CucumberComplete	vim82\ftplugin\cucumber.vim	/^function! CucumberComplete(findstart,base) abort$/;"	f
Cycle	vim82\ftplugin\gitrebase.vim	/^command! -buffer -count=1 -bar -bang Cycle call s:cycle(<bang>0 ? -<count> : <count>)$/;"	c
D	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap D E$/;"	m
Date	vim82\ftplugin\debchangelog.vim	/^function <SID>Date()$/;"	f
DaynameString	plugins\kaoriya\plugin\autodate.vim	/^function! DaynameString(...)$/;"	f
DebChangelogFoldText	vim82\ftplugin\debchangelog.vim	/^function! DebChangelogFoldText()$/;"	f
DebCompleteBugs	vim82\ftplugin\debchangelog.vim	/^fun! DebCompleteBugs(findstart, base)$/;"	f
DebControlFold	vim82\ftplugin\debcontrol.vim	/^function! DebControlFold(l)$/;"	f
DebControlFoldText	vim82\ftplugin\debcontrol.vim	/^function! DebControlFoldText()$/;"	f
DebGetChangelogFold	vim82\ftplugin\debchangelog.vim	/^function! DebGetChangelogFold(lnum)$/;"	f
DebGetPkgSrcName	vim82\ftplugin\debchangelog.vim	/^function! DebGetPkgSrcName(lineno)$/;"	f
DebugPrintReturn	vim82\indent\php.vim	/^function! DebugPrintReturn(scriptLine)$/;"	f
DecodeMessage	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:DecodeMessage(quotedText)$/;"	f
DecreaseFunc	vim82\ftplugin\cobol.vim	/^function! s:DecreaseFunc(type)$/;"	f
DecreaseIndent	vim82\autoload\xmlformat.vim	/^func! s:DecreaseIndent() abort$/;"	f
DecreaseIndent	vim82\ftplugin\cobol.vim	/^function! s:DecreaseIndent()$/;"	f
DecreaseIndentOnClosingTag	vim82\indent\mp.vim	/^function! s:DecreaseIndentOnClosingTag(curr_indent)$/;"	f
Dedented	vim82\indent\python.vim	/^function s:Dedented(lnum, expected)$/;"	f
DefPython	vim82\autoload\python3complete.vim	/^function! s:DefPython()$/;"	f
DefPython	vim82\autoload\pythoncomplete.vim	/^function! s:DefPython()$/;"	f
DefRuby	vim82\autoload\rubycomplete.vim	/^function! s:DefRuby()$/;"	f
DefineInlineMarkup	vim82\syntax\rst.vim	/^function! s:DefineInlineMarkup(name, start, middle, end)$/;"	f
DefineOneInlineMarkup	vim82\syntax\rst.vim	/^function! s:DefineOneInlineMarkup(name, start, middle, end, char_left, char_right)$/;"	f
DeindentingKeyword	vim82\indent\ruby.vim	/^function! s:DeindentingKeyword(cline_info) abort$/;"	f
DeleteBookmark	vim82\autoload\netrw.vim	/^fun! s:DeleteBookmark(fname)$/;"	f
DeleteCommands	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:DeleteCommands()$/;"	f
DetermineDictpath	plugins\kaoriya\plugin\dicwin.vim	/^function! s:DetermineDictpath()$/;"	f
DetermineFileencodings	plugins\kaoriya\encode_japan.vim	/^function! s:DetermineFileencodings()$/;"	f
DicWinEnter	plugins\kaoriya\plugin\dicwin.vim	/^function! s:DicWinEnter()$/;"	f
DicWinLeave	plugins\kaoriya\plugin\dicwin.vim	/^function! s:DicWinLeave()$/;"	f
DicWinUnload	plugins\kaoriya\plugin\dicwin.vim	/^function! s:DicWinUnload()$/;"	f
Dict2info	vim82\autoload\ccomplete.vim	/^function! s:Dict2info(dict)$/;"	f
DicwinOnload	plugins\kaoriya\plugin\dicwin.vim	/^function! s:DicwinOnload()$/;"	f
DiffGitCached	vim82\ftplugin\gitcommit.vim	/^command! -bang -bar -buffer -complete=custom,s:diffcomplete -nargs=* DiffGitCached :call s:gitdiffcached(<bang>0,b:git_dir,<f-args>)$/;"	c
DiffOrig	vim82\defaults.vim	/^  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis$/;"	c
Distribution	vim82\ftplugin\debchangelog.vim	/^function Distribution(dist)$/;"	f
DoFeatureMotion	vim82\ftplugin\eiffel.vim	/^  function! s:DoFeatureMotion(count, flags)$/;"	f
DoMatchParen	vim82\plugin\matchparen.vim	/^command DoMatchParen call s:DoMatchParen()$/;"	c
DoMatchParen	vim82\plugin\matchparen.vim	/^func s:DoMatchParen()$/;"	f
DoMotion	vim82\ftplugin\eiffel.vim	/^  function! s:DoMotion(pattern, count, flags) abort$/;"	f
DoRemoteReply	vim82\plugin\rrhelper.vim	/^function DoRemoteReply(id, cnt, group, file)$/;"	f
DoWhile	vim82\indent\javascript.vim	/^function s:DoWhile()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_af_af.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_ca_es.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_chinese_gb.936.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_chinese_taiwan.950.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^   fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_cs_cz.utf-8.vim	/^   fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_czech_czech_republic.1250.vim	/^   fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_czech_czech_republic.ascii.vim	/^   fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_da.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_de_de.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_eo.utf-8.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_es_es.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_fi_fi.latin1.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_fr_fr.latin1.vim	/^fun! Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_hu_hu.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_is_is.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_ja_jp.euc-jp.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_ja_jp.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_japanese_japan.932.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_ko_kr.euckr.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_ko_kr.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_nl_nl.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_no_no.latin1.vim	/^	function Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_pl_pl.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_polish_poland.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_pt_br.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_pt_pt.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_ru_ru.koi8-r.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_ru_ru.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sk_sk.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sl_si.cp1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sl_si.latin2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sl_si.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_slovak_slovak_republic.1250.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sr_rs.ascii.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sr_rs.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_sv_se.latin1.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_tr_tr.cp1254.vim	/^	fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^	fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_tr_tr.utf-8.vim	/^	fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_uk_ua.cp1251.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_uk_ua.koi8-u.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_vi_vn.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_zh_cn.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Do_toolbar_tmenu	vim82\lang\menu_zh_tw.utf-8.vim	/^  fun Do_toolbar_tmenu()$/;"	f
Double	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=0 Double	call <SID>ScreenMode(2)$/;"	c
Doxygen_Hilights	vim82\syntax\doxygen.vim	/^    fun! s:Doxygen_Hilights()$/;"	f
Doxygen_Hilights_Base	vim82\syntax\doxygen.vim	/^    fun! s:Doxygen_Hilights_Base()$/;"	f
Drop	plugins\golang\ftplugin\go\import.vim	/^    command! -buffer -nargs=? -complete=customlist,go#complete#Package Drop call s:SwitchImport(0, '', <f-args>)$/;"	c
Drop	vim82\ftplugin\gitrebase.vim	/^command! -buffer -bar -range Drop   :<line1>,<line2>call s:choose('drop')$/;"	c
DxyCreateSmallSpecial	vim82\syntax\doxygen.vim	/^  fun! s:DxyCreateSmallSpecial( kword, name )$/;"	f
DylanGetIndent	vim82\indent\dylan.vim	/^function DylanGetIndent()$/;"	f
E	vim82\macros\hanoi\hanoi.vim	/^map E "hp$/;"	m
E	vim82\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
E	vim82\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
E	vim82\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
E	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap E >$/;"	m
Edit	vim82\ftplugin\gitrebase.vim	/^command! -buffer -bar -range Edit   :<line1>,<line2>call s:choose('edit')$/;"	c
EditByGlobalFenc	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:EditByGlobalFenc()$/;"	f
EditElsewhere	vim82\pack\dist\opt\editexisting\plugin\editexisting.vim	/^func s:EditElsewhere(filename)$/;"	f
EditExisting	vim82\pack\dist\opt\editexisting\plugin\editexisting.vim	/^func! EditExisting(fname, command)$/;"	f
EditVimrc	vim82\menu.vim	/^fun! s:EditVimrc()$/;"	f
Email	vim82\ftplugin\debchangelog.vim	/^function <SID>Email()$/;"	f
Emit	vim82\autoload\rust.vim	/^function! s:Emit(dict, type, args)$/;"	f
EmptyInsideString	vim82\indent\ruby.vim	/^function! s:EmptyInsideString(pline_info) abort$/;"	f
EmptyTag	vim82\autoload\xmlformat.vim	/^func! s:EmptyTag(tag) abort$/;"	f
EmptystackP	vim82\autoload\xmlcomplete.vim	/^function! s:EmptystackP(sname)$/;"	f
EncodeJapan	plugins\kaoriya\encode_japan.vim	/^augroup EncodeJapan$/;"	a
End	vim82\macros\less.vim	/^fun! s:End()$/;"	f
EndBlockIndent	vim82\indent\ada.vim	/^function s:EndBlockIndent( prev_indent, prev_lnum, blockstart, blockend )$/;"	f
EndDebugCommon	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:EndDebugCommon()$/;"	f
EndPromptDebug	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:EndPromptDebug(job, status)$/;"	f
EndTag	vim82\autoload\xmlformat.vim	/^func! s:EndTag(tag) abort$/;"	f
EndTermDebug	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:EndTermDebug(job, status)$/;"	f
Enter_annotation_buffer	vim82\ftplugin\ocaml.vim	/^    function! s:Enter_annotation_buffer(annot_file_path)$/;"	f
Environ.CDPATH	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.CDPATH ${CDPATH}$/;"	m
Environ.HOME	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.HOME ${HOME}$/;"	m
Environ.IFS	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.IFS ${IFS}$/;"	m
Environ.LC_CTYPE	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.LC_CTYPE ${LC_CTYPE}$/;"	m
Environ.LC_MESSAGES	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.LC_MESSAGES ${LC_MESSAGES}$/;"	m
Environ.MAIL	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.MAIL ${MAIL}$/;"	m
Environ.MAILCHECK	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.MAILCHECK ${MAILCHECK}$/;"	m
Environ.PATH	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.PATH ${PATH}$/;"	m
Environ.PS1	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.PS1 ${PS1}$/;"	m
Environ.PS2	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.PS2 ${PS2}$/;"	m
Environ.SHACCT	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.SHACCT ${SHACCT}$/;"	m
Environ.SHELL	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Environ.SHELL ${SHELL}$/;"	m
ErlangCalcIndent	vim82\indent\erlang.vim	/^function! s:ErlangCalcIndent(lnum, stack)$/;"	f
ErlangCalcIndent2	vim82\indent\erlang.vim	/^function! s:ErlangCalcIndent2(lnum, stack)$/;"	f
ErlangFoldText	vim82\ftplugin\erlang.vim	/^function ErlangFoldText()$/;"	f
ErlangIndent	vim82\indent\erlang.vim	/^function! ErlangIndent()$/;"	f
ErrMsg	vim82\autoload\rubycomplete.vim	/^function! s:ErrMsg(msg)$/;"	f
Error	plugins\golang\ftplugin\go\import.vim	/^function! s:Error(s)$/;"	f
ErubyAtCursor	vim82\ftplugin\eruby.vim	/^function! ErubyAtCursor() abort$/;"	f
Escape	vim82\autoload\zip.vim	/^fun! s:Escape(fname,isfilt)$/;"	f
Evaluate	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:Evaluate(range, arg)$/;"	f
Examples	vim82\tools\efm_perl.pl	/^Examples:$/;"	l
Exit_annotation_buffer	vim82\ftplugin\ocaml.vim	/^    function! s:Exit_annotation_buffer()$/;"	f
ExitingOneLineScope	vim82\indent\typescript.vim	/^function s:ExitingOneLineScope(lnum)$/;"	f
Expand	vim82\autoload\rust.vim	/^function! s:Expand(dict, pretty, args)$/;"	f
Explore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Explore		call netrw#Explore(<count>,0,0+<bang>0,<q-args>)$/;"	c
ExplorePatHls	vim82\autoload\netrw.vim	/^fun! s:ExplorePatHls(pattern)$/;"	f
ExprCol	vim82\indent\javascript.vim	/^function s:ExprCol()$/;"	f
ExtraBrackets	vim82\indent\falcon.vim	/^function s:ExtraBrackets(lnum)$/;"	f
ExtraBrackets	vim82\indent\ruby.vim	/^function! s:ExtraBrackets(lnum) abort$/;"	f
Extract_type_data	vim82\ftplugin\ocaml.vim	/^    function! s:Extract_type_data(block_pattern, annot_file_name)$/;"	f
F	vim82\macros\hanoi\hanoi.vim	/^map F "hy2l$/;"	m
F	vim82\macros\less.vim	/^map F :e<CR>G<SID>L:sleep 1<CR>F$/;"	m
F	vim82\macros\urm\urm.vim	/^map F yl$/;"	m
F	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap F U$/;"	m
FalconGetIndent	vim82\indent\falcon.vim	/^function FalconGetIndent(...)$/;"	f
Fever	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=0 Fever		call <SID>ScreenMode(8)$/;"	c
FileExplorer	vim82\plugin\netrwPlugin.vim	/^augroup FileExplorer$/;"	a
FileFormat	vim82\menu.vim	/^fun! s:FileFormat()$/;"	f
FileName	vim82\tools\ccfilter.c	/^char	       FileName[1024];$/;"	v
FileReadable	vim82\autoload\netrw.vim	/^fun! s:FileReadable(fname)$/;"	f
Finalise	vim82\ftplugin\debchangelog.vim	/^function Finalise()$/;"	f
FinaliseMenu	vim82\ftplugin\debchangelog.vim	/^function <SID>FinaliseMenu()$/;"	f
Finalised	vim82\ftplugin\debchangelog.vim	/^function <SID>Finalised()$/;"	f
Find	vim82\optwin.vim	/^fun! <SID>Find(lnum)$/;"	f
FindArrowIndent	vim82\indent\php.vim	/^function! FindArrowIndent (lnum)  " {{{$/;"	f
FindContainingClass	vim82\indent\ruby.vim	/^function! s:FindContainingClass() abort$/;"	f
FindIndToken	vim82\indent\erlang.vim	/^function! s:FindIndToken(lnum, dir)$/;"	f
FindLet	vim82\indent\ocaml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
FindLet	vim82\indent\sml.vim	/^function! s:FindLet(pstart, pmid, pend)$/;"	f
FindOpenBracket	vim82\indent\php.vim	/^function! FindOpenBracket(lnum, blockStarter) " {{{$/;"	f
FindPage	vim82\ftplugin\man.vim	/^func <SID>FindPage(sect, page)$/;"	f
FindPair	vim82\indent\elm.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPair	vim82\indent\ocaml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPair	vim82\indent\sml.vim	/^function! s:FindPair(pstart, pmid, pend)$/;"	f
FindPrevLEIndentedLineMatchingRegex	vim82\indent\yaml.vim	/^function s:FindPrevLEIndentedLineMatchingRegex(lnum, regex)$/;"	f
FindPrevLessIndentedLine	vim82\indent\yaml.vim	/^function s:FindPrevLessIndentedLine(lnum, ...)$/;"	f
FindPreviousNonCompilerDirectiveLine	vim82\indent\cs.vim	/^function! s:FindPreviousNonCompilerDirectiveLine(start_lnum)$/;"	f
FindTheIfOfAnElse	vim82\indent\php.vim	/^function! FindTheIfOfAnElse (lnum, StopAfterFirstPrevElse) " {{{$/;"	f
FindTheSwitchIndent	vim82\indent\php.vim	/^function! FindTheSwitchIndent (lnum) " {{{$/;"	f
Find_common_path	vim82\ftplugin\ocaml.vim	/^  function! s:Find_common_path (p1,p2)$/;"	f
First_word_len	vim82\indent\awk.vim	/^function! s:First_word_len( line )$/;"	f
FixBeginfigs	vim82\ftplugin\mp.vim	/^  command -nargs=0 FixBeginfigs call s:fix_beginfigs()$/;"	c
FixFText	vim82\menu.vim	/^fun! s:FixFText()$/;"	f
Fixedgq	vim82\indent\typescript.vim	/^function! Fixedgq(lnum, count)$/;"	f
Fixup	vim82\ftplugin\gitrebase.vim	/^command! -buffer -bar -range Fixup  :<line1>,<line2>call s:choose('fixup')$/;"	c
Fmt	plugins\golang\ftplugin\go\fmt.vim	/^    command! -buffer Fmt call s:GoFormat()$/;"	c
FnameEscape	vim82\menu.vim	/^func s:FnameEscape(fname)$/;"	f
Fnameescape	vim82\ftplugin\ocaml.vim	/^  function! s:Fnameescape(s)$/;"	f
FoldColumn_build	vim82\syntax\2html.vim	/^    function! s:FoldColumn_build(char, len, numfill, char2, class, click)$/;"	f
FoldColumn_build	vim82\syntax\2html.vim	/^  function! s:FoldColumn_build(char, len, numfill, char2, class, click)$/;"	f
FoldColumn_fill	vim82\syntax\2html.vim	/^    function! s:FoldColumn_fill()$/;"	f
FoldColumn_fill	vim82\syntax\2html.vim	/^  function! s:FoldColumn_fill()$/;"	f
FoldCompare	vim82\syntax\2html.vim	/^  function! s:FoldCompare(f1, f2)$/;"	f
FormatContent	vim82\autoload\xmlformat.vim	/^func! s:FormatContent(list) abort$/;"	f
FormatRmd	vim82\ftplugin\rmd.vim	/^function! FormatRmd()$/;"	f
FormatRrst	vim82\ftplugin\rrst.vim	/^function! FormatRrst()$/;"	f
FortranGetFixedIndent	vim82\indent\fortran.vim	/^function FortranGetFixedIndent()$/;"	f
FortranGetFreeIndent	vim82\indent\fortran.vim	/^function FortranGetFreeIndent()$/;"	f
FortranGetIndent	vim82\indent\fortran.vim	/^function FortranGetIndent(lnum)$/;"	f
Forward	vim82\macros\less.vim	/^fun! s:Forward()$/;"	f
FreshState	vim82\indent\html.vim	/^func! s:FreshState(lnum)$/;"	f
FullName	vim82\ftplugin\debchangelog.vim	/^function <SID>FullName()$/;"	f
FullScreen	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=0 FullScreen	call <SID>FullScreen()$/;"	c
FullScreen	plugins\kaoriya\plugin\scrnmode.vim	/^function! s:FullScreen()$/;"	f
G	vim82\macros\less.vim	/^noremap <script> G G<SID>L$/;"	m
G	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap G I$/;"	m
G	vim82\syntax\2html.vim	/^  norm! G$/;"	m
GCUpper	vim82\ftplugin\zimbu.vim	/^func! GCUpper(what)$/;"	f
GCUpperCommon	vim82\ftplugin\zimbu.vim	/^func! GCUpperCommon(what)$/;"	f
GCUpperDot	vim82\ftplugin\zimbu.vim	/^func! GCUpperDot(what)$/;"	f
GCUpperSpace	vim82\ftplugin\zimbu.vim	/^func! GCUpperSpace(what)$/;"	f
GdbOutCallback	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:GdbOutCallback(channel, text)$/;"	f
GenerateSearchPatternEnglish	plugins\kaoriya\plugin\dicwin.vim	/^function! s:GenerateSearchPatternEnglish(word)$/;"	f
GetAdaIndent	vim82\indent\ada.vim	/^function GetAdaIndent()$/;"	f
GetAddition	vim82\autoload\ccomplete.vim	/^function! s:GetAddition(line, match, memarg, bracket)$/;"	f
GetAutodateLines	plugins\kaoriya\plugin\autodate.vim	/^function! s:GetAutodateLines()$/;"	f
GetAutodateStartLine	plugins\kaoriya\plugin\autodate.vim	/^function! s:GetAutodateStartLine()$/;"	f
GetAwkIndent	vim82\indent\awk.vim	/^function! GetAwkIndent()$/;"	f
GetBstIndent	vim82\indent\bst.vim	/^function! GetBstIndent(lnum) abort$/;"	f
GetBufferDirectory	plugins\kaoriya\plugin\cmdex.vim	/^function! s:GetBufferDirectory()$/;"	f
GetBufferRubyClass	vim82\autoload\rubycomplete.vim	/^function! s:GetBufferRubyClass(name, ...)$/;"	f
GetBufferRubyEntity	vim82\autoload\rubycomplete.vim	/^function! s:GetBufferRubyEntity( name, type, ... )$/;"	f
GetBufferRubyModule	vim82\autoload\rubycomplete.vim	/^function! s:GetBufferRubyModule(name, ...)$/;"	f
GetBufferRubySingletonMethods	vim82\autoload\rubycomplete.vim	/^function! s:GetBufferRubySingletonMethods(name)$/;"	f
GetBzlIndent	vim82\indent\bzl.vim	/^function GetBzlIndent(lnum) abort$/;"	f
GetCSIndent	vim82\indent\cs.vim	/^function! GetCSIndent(lnum) abort$/;"	f
GetCSSIndent	vim82\indent\css.vim	/^function GetCSSIndent()$/;"	f
GetChaiScriptIndent	vim82\indent\chaiscript.vim	/^function! GetChaiScriptIndent()$/;"	f
GetClojureIndent	vim82\indent\clojure.vim	/^	function! GetClojureIndent()$/;"	f
GetCmdArg	vim82\ftplugin\man.vim	/^func <SID>GetCmdArg(sect, page)$/;"	f
GetCobolIndent	vim82\indent\cobol.vim	/^function! GetCobolIndent(lnum) abort$/;"	f
GetConTeXtIndent	vim82\indent\context.vim	/^function! GetConTeXtIndent()$/;"	f
GetConfigIndent	vim82\indent\config.vim	/^function GetConfigIndent()$/;"	f
GetCorrectRHelpIndent	vim82\indent\rhelp.vim	/^function GetCorrectRHelpIndent()$/;"	f
GetCucumberIndent	vim82\indent\cucumber.vim	/^function! GetCucumberIndent()$/;"	f
GetDTDIndent	vim82\indent\dtd.vim	/^function GetDTDIndent()$/;"	f
GetDosBatchIndent	vim82\indent\dosbatch.vim	/^function! GetDosBatchIndent(lnum)$/;"	f
GetEiffelIndent	vim82\indent\eiffel.vim	/^function GetEiffelIndent()$/;"	f
GetElmIndent	vim82\indent\elm.vim	/^function! GetElmIndent()$/;"	f
GetEndIndentation	vim82\indent\tex.vim	/^function! s:GetEndIndentation(lnum) " {{{$/;"	f
GetErlangFold	vim82\ftplugin\erlang.vim	/^function GetErlangFold(lnum)$/;"	f
GetErubyIndent	vim82\indent\eruby.vim	/^function! GetErubyIndent(...)$/;"	f
GetEtermIndent	vim82\indent\eterm.vim	/^function GetEtermIndent()$/;"	f
GetFrameScriptIndent	vim82\indent\framescript.vim	/^function GetFrameScriptIndent()$/;"	f
GetFullname	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:GetFullname(msg)$/;"	f
GetGitconfigIndent	vim82\indent\gitconfig.vim	/^function! GetGitconfigIndent()$/;"	f
GetGitoliteIndent	vim82\indent\gitolite.vim	/^function! GetGitoliteIndent()$/;"	f
GetHamlIndent	vim82\indent\haml.vim	/^function! GetHamlIndent()$/;"	f
GetHogIndent	vim82\indent\hog.vim	/^function GetHogIndent()$/;"	f
GetIdlangIndent	vim82\indent\idlang.vim	/^function GetIdlangIndent(lnum)$/;"	f
GetInd	vim82\indent\ocaml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
GetInd	vim82\indent\sml.vim	/^function! s:GetInd(lnum, pat, lim)$/;"	f
GetIndtokenAtCol	vim82\indent\erlang.vim	/^function! s:GetIndtokenAtCol(indtokens, col)$/;"	f
GetIshdIndent	vim82\indent\ishd.vim	/^fun! GetIshdIndent(lnum)$/;"	f
GetJIndent	vim82\indent\j.vim	/^function GetJIndent() abort$/;"	f
GetJSONIndent	vim82\indent\json.vim	/^function GetJSONIndent()$/;"	f
GetJavaIndent	vim82\indent\java.vim	/^function GetJavaIndent()$/;"	f
GetJavascriptIndent	vim82\indent\javascript.vim	/^function GetJavascriptIndent()$/;"	f
GetLDIndent	vim82\indent\ld.vim	/^function GetLDIndent()$/;"	f
GetLastBeginIndentation	vim82\indent\tex.vim	/^function! s:GetLastBeginIndentation(lnum) " {{{$/;"	f
GetLastRealCodeLNum	vim82\indent\php.vim	/^function! GetLastRealCodeLNum(startline) " {{{$/;"	f
GetLatestVimScripts	vim82\autoload\getscript.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLatestVimScripts	vim82\plugin\getscriptPlugin.vim	/^com!        -nargs=0 GetLatestVimScripts call getscript#GetLatestVimScripts()$/;"	c
GetLineWithoutFullComment	vim82\indent\ocaml.vim	/^function! s:GetLineWithoutFullComment(lnum)$/;"	f
GetLiquidIndent	vim82\indent\liquid.vim	/^function! GetLiquidIndent(...)$/;"	f
GetLogtalkIndent	vim82\indent\logtalk.vim	/^function! GetLogtalkIndent()$/;"	f
GetLuaIndent	vim82\indent\lua.vim	/^function! GetLuaIndent()$/;"	f
GetMSL	vim82\indent\falcon.vim	/^function s:GetMSL(lnum)$/;"	f
GetMSL	vim82\indent\ruby.vim	/^function! s:GetMSL(lnum) abort$/;"	f
GetMSL	vim82\indent\typescript.vim	/^function s:GetMSL(lnum, in_one_line_scope)$/;"	f
GetMakeIndent	vim82\indent\make.vim	/^function GetMakeIndent()$/;"	f
GetMarkedWindow	plugins\kaoriya\plugin\dicwin.vim	/^function! s:GetMarkedWindow(name)$/;"	f
GetMatlabIndent	vim82\indent\matlab.vim	/^function! GetMatlabIndent()$/;"	f
GetMaxlines	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:GetMaxlines()$/;"	f
GetMdIndent	vim82\indent\rmd.vim	/^function s:GetMdIndent()$/;"	f
GetMesonIndent	vim82\indent\meson.vim	/^function GetMesonIndent(lnum)$/;"	f
GetMetaPostIndent	vim82\indent\mp.vim	/^function GetMetaPostIndent()$/;"	f
GetMetaPostIndentIntern	vim82\indent\mp.vim	/^function! GetMetaPostIndentIntern()$/;"	f
GetMmaIndent	vim82\indent\mma.vim	/^function GetMmaIndent()$/;"	f
GetNsisIndent	vim82\indent\nsis.vim	/^function! GetNsisIndent(lnum)$/;"	f
GetOCamlIndent	vim82\indent\ocaml.vim	/^function! GetOCamlIndent()$/;"	f
GetObjCIndent	vim82\indent\objc.vim	/^function GetObjCIndent()$/;"	f
GetOccamIndent	vim82\indent\occam.vim	/^function GetOccamIndent()$/;"	f
GetOffsetOf	vim82\indent\config.vim	/^function s:GetOffsetOf(line, regexp)$/;"	f
GetOneScript	vim82\autoload\getscript.vim	/^fun! s:GetOneScript(...)$/;"	f
GetOpenCloseCount	vim82\indent\matlab.vim	/^function! s:GetOpenCloseCount(lnum, pattern, ...)$/;"	f
GetPage	vim82\ftplugin\man.vim	/^func <SID>GetPage(cmdmods, ...)$/;"	f
GetPair	vim82\indent\javascript.vim	/^  function s:GetPair(start,end,flags,skip)$/;"	f
GetPascalIndent	vim82\indent\pascal.vim	/^function! GetPascalIndent( line_num )$/;"	f
GetPerl6Indent	vim82\indent\perl6.vim	/^function! GetPerl6Indent()$/;"	f
GetPerlIndent	vim82\indent\perl.vim	/^function! GetPerlIndent()$/;"	f
GetPhpIndent	vim82\indent\php.vim	/^function! GetPhpIndent()$/;"	f
GetPhpIndentVersion	vim82\indent\php.vim	/^function! GetPhpIndentVersion()$/;"	f
GetPoVRayIndent	vim82\indent\pov.vim	/^function GetPoVRayIndent()$/;"	f
GetPrevNonCommentLineNum	vim82\indent\pascal.vim	/^function! s:GetPrevNonCommentLineNum( line_num )$/;"	f
GetPrologIndent	vim82\indent\prolog.vim	/^function! GetPrologIndent()$/;"	f
GetPythonIndent	vim82\indent\python.vim	/^function GetPythonIndent(lnum)$/;"	f
GetRHelpIndent	vim82\indent\rhelp.vim	/^function GetRHelpIndent()$/;"	f
GetRIndent	vim82\indent\r.vim	/^function GetRIndent()$/;"	f
GetRSTIndent	vim82\indent\rst.vim	/^function GetRSTIndent()$/;"	f
GetReadlineIndent	vim82\indent\readline.vim	/^function GetReadlineIndent()$/;"	f
GetRelVer	vim82\ftplugin\spec.vim	/^	function! s:GetRelVer()$/;"	f
GetRmdIndent	vim82\indent\rmd.vim	/^function GetRmdIndent()$/;"	f
GetRnowebIndent	vim82\indent\rnoweb.vim	/^function GetRnowebIndent()$/;"	f
GetRrstIndent	vim82\indent\rrst.vim	/^function GetRrstIndent()$/;"	f
GetRstIndent	vim82\indent\rrst.vim	/^function GetRstIndent()$/;"	f
GetRubyIndent	vim82\indent\ruby.vim	/^function! GetRubyIndent(...) abort$/;"	f
GetRubyVarType	vim82\autoload\rubycomplete.vim	/^function! s:GetRubyVarType(v)$/;"	f
GetRustIndent	vim82\indent\rust.vim	/^function GetRustIndent(lnum)$/;"	f
GetSASIndent	vim82\indent\sas.vim	/^function! GetSASIndent()$/;"	f
GetSDLIndent	vim82\indent\sdl.vim	/^function! GetSDLIndent()$/;"	f
GetSMLIndent	vim82\indent\sml.vim	/^function! GetSMLIndent()$/;"	f
GetSQLIndent	vim82\indent\sqlanywhere.vim	/^function! GetSQLIndent()$/;"	f
GetSassIndent	vim82\indent\sass.vim	/^function! GetSassIndent()$/;"	f
GetScalaIndent	vim82\indent\scala.vim	/^function! GetScalaIndent()$/;"	f
GetScript	vim82\autoload\getscript.vim	/^com!        -nargs=0 GetScript           call getscript#GetLatestVimScripts()$/;"	c
GetScriptType	vim82\indent\html.vim	/^func! s:GetScriptType(str)$/;"	f
GetScripts	vim82\plugin\getscriptPlugin.vim	/^com!        -nargs=0 GetScripts          call getscript#GetLatestVimScripts()$/;"	c
GetShIndent	vim82\indent\sh.vim	/^function! GetShIndent()$/;"	f
GetSshconfigIndent	vim82\indent\sshconfig.vim	/^function GetSshconfigIndent(lnum)$/;"	f
GetStmtStarterIndent	vim82\indent\sqlanywhere.vim	/^function! s:GetStmtStarterIndent( keyword, curr_lnum )$/;"	f
GetTFIndent	vim82\indent\tf.vim	/^function GetTFIndent()$/;"	f
GetTclIndent	vim82\indent\tcl.vim	/^function GetTclIndent()$/;"	f
GetTeXIndent	vim82\indent\tex.vim	/^function! GetTeXIndent() " {{{$/;"	f
GetTempfile	vim82\autoload\netrw.vim	/^fun! s:GetTempfile(fname)$/;"	f
GetTeraTermIndent	vim82\indent\teraterm.vim	/^function! GetTeraTermIndent(lnum)$/;"	f
GetTildeIndent	vim82\indent\tilde.vim	/^function GetTildeIndent(lnum)$/;"	f
GetTokensFromLine	vim82\indent\erlang.vim	/^function! s:GetTokensFromLine(line, string_continuation, atom_continuation,$/;"	f
GetTreetopIndent	vim82\indent\treetop.vim	/^function GetTreetopIndent()$/;"	f
GetTypescriptIndent	vim82\indent\typescript.vim	/^function GetTypescriptIndent()$/;"	f
GetVHDLindent	vim82\indent\vhdl.vim	/^function GetVHDLindent()$/;"	f
GetVarIndent	vim82\indent\typescript.vim	/^function s:GetVarIndent(lnum)$/;"	f
GetVars	vim82\indent\javascript.vim	/^function s:GetVars()$/;"	f
GetVerilogIndent	vim82\indent\verilog.vim	/^function GetVerilogIndent()$/;"	f
GetVimIndent	vim82\indent\vim.vim	/^function GetVimIndent()$/;"	f
GetVimIndentIntern	vim82\indent\vim.vim	/^function GetVimIndentIntern()$/;"	f
GetWidth	vim82\indent\objc.vim	/^function s:GetWidth(line, regexp)$/;"	f
GetXF86ConfIndent	vim82\indent\xf86conf.vim	/^function GetXF86ConfIndent()$/;"	f
GetXinetdIndent	vim82\indent\xinetd.vim	/^function GetXinetdIndent()$/;"	f
GetYAMLIndent	vim82\indent\yaml.vim	/^function GetYAMLIndent(lnum)$/;"	f
GetYaccIndent	vim82\indent\yacc.vim	/^function GetYaccIndent()$/;"	f
GetYamlIndent	vim82\indent\rmd.vim	/^function s:GetYamlIndent()$/;"	f
GetZimbuIndent	vim82\indent\zimbu.vim	/^func GetZimbuIndent(lnum)$/;"	f
Get_brace_balance	vim82\indent\awk.vim	/^function! s:Get_brace_balance( line, b_open, b_close )$/;"	f
Get_last_paren_idx	vim82\indent\r.vim	/^function! s:Get_last_paren_idx(line, o, c, pb)$/;"	f
Get_matching_brace	vim82\indent\r.vim	/^function! s:Get_matching_brace(linenr, o, c, delbrace)$/;"	f
Get_matching_if	vim82\indent\r.vim	/^function! s:Get_matching_if(linenr, delif)$/;"	f
Get_paren_balance	vim82\indent\r.vim	/^function! s:Get_paren_balance(line, o, c)$/;"	f
Get_prev_line	vim82\indent\awk.vim	/^function! s:Get_prev_line( lineno )$/;"	f
Get_prev_line	vim82\indent\r.vim	/^function s:Get_prev_line(lineno)$/;"	f
Get_type	vim82\ftplugin\ocaml.vim	/^    function! s:Get_type(mode, annot_file_name)$/;"	f
GlobPath	plugins\kaoriya\plugin\dicwin.vim	/^function! s:GlobPath(paths, target)$/;"	f
GoDictWindow	plugins\kaoriya\plugin\dicwin.vim	/^function! s:GoDictWindow()$/;"	f
GoFormat	plugins\golang\ftplugin\go\fmt.vim	/^function! s:GoFormat()$/;"	f
GoIndent	vim82\indent\go.vim	/^function! GoIndent(lnum)$/;"	f
GoMarkedWindow	plugins\kaoriya\plugin\dicwin.vim	/^function! s:GoMarkedWindow(name)$/;"	f
Godoc	plugins\golang\plugin\go\godoc.vim	/^  command! -nargs=* -range -complete=customlist,go#complete#Package Godoc :call s:Godoc(<f-args>)$/;"	c
Godoc	plugins\golang\plugin\go\godoc.vim	/^function! s:Godoc(...)$/;"	f
GodocNotFound	plugins\golang\plugin\go\godoc.vim	/^function! s:GodocNotFound(content)$/;"	f
GodocView	plugins\golang\plugin\go\godoc.vim	/^function! s:GodocView()$/;"	f
GodocWord	plugins\golang\plugin\go\godoc.vim	/^function! s:GodocWord(word)$/;"	f
GotoProgram	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:GotoProgram()$/;"	f
GotoSourcewinOrCreateIt	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:GotoSourcewinOrCreateIt()$/;"	f
GprofJumpToFunctionIndex	vim82\ftplugin\gprof.vim	/^fun! <SID>GprofJumpToFunctionIndex()$/;"	f
Greek	vim82\syntax\tex.vim	/^  fun! s:Greek(group,pat,cchar)$/;"	f
H	vim82\macros\less.vim	/^map H h$/;"	m
H	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap H D$/;"	m
HDensity	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=0 HDensity	call <SID>ScreenMode(7)$/;"	c
HTMLConvert	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 HTMLConvert call <SID>HTMLConvert()$/;"	c
HTMLConvert	plugins\kaoriya\plugin\cmdex.vim	/^function! s:HTMLConvert()$/;"	f
HamGetFreeIndent	vim82\indent\hamster.vim	/^function HamGetFreeIndent()$/;"	f
HamGetIndent	vim82\indent\hamster.vim	/^function HamGetIndent(lnum)$/;"	f
HandleBreakpointDelete	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:HandleBreakpointDelete(msg)$/;"	f
HandleCursor	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:HandleCursor(msg)$/;"	f
HandleError	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:HandleError(msg)$/;"	f
HandleEvaluate	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:HandleEvaluate(msg)$/;"	f
HandleNewBreakpoint	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:HandleNewBreakpoint(msg)$/;"	f
HandleProgramRun	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:HandleProgramRun(msg)$/;"	f
HandleSwapExists	vim82\indent\testdir\runtest.vim	/^func HandleSwapExists()$/;"	f
Hankaku	plugins\kaoriya\plugin\hz_ja.vim	/^command! -nargs=0 -range Hankaku <line1>,<line2>call <SID>ToggleLineWise('Hankaku')$/;"	c
HankakuChar	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:HankakuChar(char)$/;"	f
HasMultibyteChar	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:HasMultibyteChar()$/;"	f
HasNoTagEnd	vim82\indent\xml.vim	/^func! <SID>HasNoTagEnd(line)$/;"	f
HashIndent	vim82\ftplugin\markdown.vim	/^function! s:HashIndent(lnum) abort$/;"	f
Header	vim82\optwin.vim	/^fun! <SID>Header(text)$/;"	f
Help	vim82\macros\less.vim	/^fun! s:Help()$/;"	f
Helpfind	vim82\menu.vim	/^fun! s:Helpfind()$/;"	f
Hexplore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Hexplore	call netrw#Explore(<count>,1,2+<bang>0,<q-args>)$/;"	c
Hi	vim82\syntax\sdl.vim	/^command -nargs=+ Hi     hi def <args>$/;"	c
Hi	vim82\syntax\xpm2.vim	/^command -nargs=+ Hi hi def <args>$/;"	c
HiLink	vim82\syntax\meson.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	vim82\syntax\meson.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HideSymbol	vim82\syntax\rhelp.vim	/^function s:HideSymbol(pat, cchar, hide)$/;"	f
Highlight	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:Highlight(init, old, new)$/;"	f
Highlight_Matching_Pair	vim82\plugin\matchparen.vim	/^func s:Highlight_Matching_Pair()$/;"	f
HtmlClosing	vim82\syntax\2html.vim	/^  function! s:HtmlClosing(id, has_extra_attrs)$/;"	f
HtmlColor	vim82\syntax\2html.vim	/^  function! s:HtmlColor(color)$/;"	f
HtmlFormat	vim82\syntax\2html.vim	/^function! s:HtmlFormat(text, style_id, diff_style_id, extra_attrs, make_unselectable)$/;"	f
HtmlFormat_d	vim82\syntax\2html.vim	/^  function! s:HtmlFormat_d(text, style_id, diff_style_id)$/;"	f
HtmlFormat_n	vim82\syntax\2html.vim	/^      function! s:HtmlFormat_n(text, style_id, diff_style_id, lnr)$/;"	f
HtmlFormat_n	vim82\syntax\2html.vim	/^    function! s:HtmlFormat_n(text, style_id, diff_style_id, lnr)$/;"	f
HtmlFormat_t	vim82\syntax\2html.vim	/^    function! s:HtmlFormat_t(text, style_id, diff_style_id)$/;"	f
HtmlFormat_t	vim82\syntax\2html.vim	/^  function! s:HtmlFormat_t(text, style_id, diff_style_id)$/;"	f
HtmlIndent	vim82\indent\html.vim	/^func! HtmlIndent()$/;"	f
HtmlIndent_CheckUserSettings	vim82\indent\html.vim	/^func! HtmlIndent_CheckUserSettings()$/;"	f
HtmlIndent_CountBraces	vim82\indent\html.vim	/^func! HtmlIndent_CountBraces(lnum)$/;"	f
HtmlIndent_FindStartTag	vim82\indent\html.vim	/^func! HtmlIndent_FindStartTag()$/;"	f
HtmlIndent_FindTagEnd	vim82\indent\html.vim	/^func! HtmlIndent_FindTagEnd()$/;"	f
HtmlIndent_FindTagStart	vim82\indent\html.vim	/^func! HtmlIndent_FindTagStart(lnum)$/;"	f
HtmlIndent_IsOpenTag	vim82\indent\html.vim	/^func! HtmlIndent_IsOpenTag(tagname)$/;"	f
HtmlOpening	vim82\syntax\2html.vim	/^  function! s:HtmlOpening(id, extra_attrs)$/;"	f
HzjaConvert	plugins\kaoriya\plugin\hz_ja.vim	/^command! -nargs=1 -range -complete=custom,HzjaConvertComplete HzjaConvert <line1>,<line2>call <SID>HzjaConvert(<q-args>)$/;"	c
HzjaConvert	plugins\kaoriya\plugin\hz_ja.vim	/^function! HzjaConvert(line, target)$/;"	f
HzjaConvert	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:HzjaConvert(target) range$/;"	f
HzjaConvertComplete	plugins\kaoriya\plugin\hz_ja.vim	/^function! HzjaConvertComplete(argleand, cmdline, curpos)$/;"	f
HzjaConvertVisual	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:HzjaConvertVisual(target)$/;"	f
I	vim82\macros\hanoi\hanoi.vim	/^map I KMYNOQNOSkRTV$/;"	m
I	vim82\macros\life\life.vim	/^map I G)0)0)0)0)1)0)0)2)0)0)0)0,ok,-11k,-,R,IIN$/;"	m
I	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap I C$/;"	m
ISBN	vim82\tutor\tutor.pl	/^	ISBN: 83-7197-472-8$/;"	l
ISBN	vim82\tutor\tutor.pl	/^	ISBN: 83-7197-539-2$/;"	l
IminsertOff	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 IminsertOff inoremap <buffer> <silent> <ESC> <ESC>:set iminsert=0<CR>$/;"	c
IminsertOn	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 IminsertOn iunmap <buffer> <ESC>$/;"	c
Import	plugins\golang\ftplugin\go\import.vim	/^    command! -buffer -nargs=1 -complete=customlist,go#complete#Package Import call s:SwitchImport(1, '', <f-args>)$/;"	c
ImportAs	plugins\golang\ftplugin\go\import.vim	/^    command! -buffer -nargs=* -complete=customlist,go#complete#Package ImportAs call s:SwitchImport(1, <f-args>)$/;"	c
InComment	vim82\autoload\xmlcomplete.vim	/^function! s:InComment()$/;"	f
InCommentAt	vim82\autoload\xmlcomplete.vim	/^function! s:InCommentAt(line, col)$/;"	f
InMultiVarStatement	vim82\indent\typescript.vim	/^function s:InMultiVarStatement(lnum)$/;"	f
InOneLineScope	vim82\indent\typescript.vim	/^function s:InOneLineScope(lnum)$/;"	f
IncreaseFunc	vim82\ftplugin\cobol.vim	/^function! s:IncreaseFunc(type)$/;"	f
IncreaseIndent	vim82\ftplugin\cobol.vim	/^function! s:IncreaseIndent()$/;"	f
Indent	vim82\autoload\xmlformat.vim	/^func! s:Indent(item) abort$/;"	f
IndentError	vim82\indent\erlang.vim	/^function! s:IndentError(msg, token, stack)$/;"	f
IndentWithContinuation	vim82\indent\typescript.vim	/^function s:IndentWithContinuation(lnum, ind, width)$/;"	f
IndentingKeywordInMSL	vim82\indent\ruby.vim	/^function! s:IndentingKeywordInMSL(msl_info) abort$/;"	f
Initialize	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:Initialize()$/;"	f
InsertRefs	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
InsideTag	vim82\indent\html.vim	/^func! s:InsideTag(foundHtmlString)$/;"	f
Instack	vim82\autoload\xmlcomplete.vim	/^function! s:Instack(el, sname)$/;"	f
InstallCommands	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:InstallCommands()$/;"	f
InstallWinbar	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:InstallWinbar()$/;"	f
IsAssignment	vim82\indent\ruby.vim	/^function! s:IsAssignment(str, pos) abort$/;"	f
IsAttributeLine	vim82\indent\cs.vim	/^function! s:IsAttributeLine(line)$/;"	f
IsBlock	vim82\indent\javascript.vim	/^function s:IsBlock()$/;"	f
IsCatchStandalone	vim82\indent\erlang.vim	/^function! s:IsCatchStandalone(lnum, i)$/;"	f
IsColComment	vim82\indent\sqlanywhere.vim	/^function! s:IsColComment(lnum, cnum)$/;"	f
IsComment	vim82\autoload\xmlformat.vim	/^func! s:IsComment(tag) abort$/;"	f
IsCommentOrString	vim82\indent\matlab.vim	/^function! s:IsCommentOrString(lnum, col)$/;"	f
IsCompilerDirective	vim82\indent\cs.vim	/^function! s:IsCompilerDirective(line)$/;"	f
IsContOne	vim82\indent\javascript.vim	/^function s:IsContOne(cont)$/;"	f
IsDisabled	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:IsDisabled()$/;"	f
IsHankaku	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:IsHankaku(char)$/;"	f
IsInBlock	vim82\indent\hog.vim	/^function s:IsInBlock(lnum)$/;"	f
IsInClassDef	vim82\autoload\rubycomplete.vim	/^function! s:IsInClassDef()$/;"	f
IsInComment	vim82\autoload\rubycomplete.vim	/^function! s:IsInComment(pos)$/;"	f
IsInMultilineComment	vim82\indent\typescript.vim	/^function s:IsInMultilineComment(lnum, col)$/;"	f
IsInRubyGroup	vim82\indent\ruby.vim	/^function! s:IsInRubyGroup(groups, lnum, col) abort$/;"	f
IsInString	vim82\indent\falcon.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInString	vim82\indent\json.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInString	vim82\indent\ruby.vim	/^function! s:IsInString(lnum, col) abort$/;"	f
IsInString	vim82\indent\typescript.vim	/^function s:IsInString(lnum, col)$/;"	f
IsInStringDelimiter	vim82\indent\falcon.vim	/^function s:IsInStringDelimiter(lnum, col)$/;"	f
IsInStringDelimiter	vim82\indent\ruby.vim	/^function! s:IsInStringDelimiter(lnum, col) abort$/;"	f
IsInStringOrComment	vim82\indent\falcon.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrComment	vim82\indent\ruby.vim	/^function! s:IsInStringOrComment(lnum, col) abort$/;"	f
IsInStringOrComment	vim82\indent\typescript.vim	/^function s:IsInStringOrComment(lnum, col)$/;"	f
IsInStringOrDocumentation	vim82\indent\ruby.vim	/^function! s:IsInStringOrDocumentation(lnum, col) abort$/;"	f
IsLineAtomContinuation	vim82\indent\erlang.vim	/^function! s:IsLineAtomContinuation(lnum)$/;"	f
IsLineComment	vim82\indent\sqlanywhere.vim	/^function! s:IsLineComment(lnum)$/;"	f
IsLineComment	vim82\indent\typescript.vim	/^function s:IsLineComment(lnum, col)$/;"	f
IsLineContinuation	vim82\indent\matlab.vim	/^function! s:IsLineContinuation(lnum)$/;"	f
IsLineStringContinuation	vim82\indent\erlang.vim	/^function! s:IsLineStringContinuation(lnum)$/;"	f
IsPosInClassDef	vim82\autoload\rubycomplete.vim	/^function! s:IsPosInClassDef(pos)$/;"	f
IsSerialName	vim82\tools\xcmdsrv_client.c	/^IsSerialName(char *str)$/;"	f	file:
IsSwitch	vim82\indent\javascript.vim	/^function s:IsSwitch()$/;"	f
IsTag	vim82\autoload\xmlformat.vim	/^func! s:IsTag(tag) abort$/;"	f
IsXMLContinuation	vim82\indent\xml.vim	/^func! <SID>IsXMLContinuation(line)$/;"	f
IsXMLDecl	vim82\autoload\xmlformat.vim	/^func! s:IsXMLDecl(tag) abort$/;"	f
IslinePHP	vim82\indent\php.vim	/^function! IslinePHP (lnum, tofind) " {{{$/;"	f
J	vim82\macros\hanoi\hanoi.vim	/^map J \/^0[^t]*\$$/;"	m
J	vim82\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
J	vim82\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
J	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap J H$/;"	m
Jump_Back	vim82\autoload\rust.vim	/^function! s:Jump_Back()$/;"	f
Jump_Forward	vim82\autoload\rust.vim	/^function! s:Jump_Forward()$/;"	f
Justify	vim82\pack\dist\opt\justify\plugin\justify.vim	/^com! -range -nargs=* Justify <line1>,<line2>call Justify(<f-args>)$/;"	c
Justify	vim82\pack\dist\opt\justify\plugin\justify.vim	/^function! Justify(...) range$/;"	f
Justify_error	vim82\pack\dist\opt\justify\plugin\justify.vim	/^function! Justify_error(message)$/;"	f
K	vim82\ftplugin\gitrebase.vim	/^nnoremap <buffer> <expr> K col('.') < 7 && expand('<Lt>cword>') =~ '\\X' && getline('.') =~ '^\\w\\+\\s\\+\\x\\+\\>' ? 'wK' : 'K'$/;"	m
K	vim82\macros\hanoi\hanoi.vim	/^map K 1Go$/;"	m
K	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap K T$/;"	m
KeywordLookup_systemd	vim82\ftplugin\systemd.vim	/^  function KeywordLookup_systemd(keyword) abort$/;"	f
L	vim82\macros\hanoi\hanoi.vim	/^map L 1G\/t$/;"	m
L	vim82\macros\life\life.vim	/^map L makf-h,1`ak,2`af-h,1`a,2`ajf-h,1`aj,2($/;"	m
L	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap L N$/;"	m
LINELEN	vim82\doc\doctags.c	15;"	d	file:
LINELENGTH	vim82\tools\ccfilter.c	21;"	d	file:
LOOP	vim82\doc\vim2html.pl	/^		LOOP:$/;"	l
LPE	vim82\plugin\logiPat.vim	/^com!     -nargs=+ LPE			echomsg LogiPat(<q-args>)$/;"	c
LP_And	vim82\plugin\logiPat.vim	/^fun! s:LP_And(pat1,pat2)$/;"	f
LP_Execute	vim82\plugin\logiPat.vim	/^fun! s:LP_Execute(preclvl)$/;"	f
LP_Not	vim82\plugin\logiPat.vim	/^fun! s:LP_Not(pat)$/;"	f
LP_OpPush	vim82\plugin\logiPat.vim	/^fun! s:LP_OpPush(op)$/;"	f
LP_Or	vim82\plugin\logiPat.vim	/^fun! s:LP_Or(pat1,pat2)$/;"	f
LP_PatPop	vim82\plugin\logiPat.vim	/^fun! s:LP_PatPop(lookup)$/;"	f
LP_PatPush	vim82\plugin\logiPat.vim	/^fun! s:LP_PatPush(pat)$/;"	f
LUB	vim82\tutor\tutor.pl	/^	     LUB:	    <ESC> :wq<ENTER>  by zmiany zachowaÊ.$/;"	l
LastTagIsOpen	vim82\indent\mp.vim	/^function! s:LastTagIsOpen(line)$/;"	f
LastValidMatchEnd	vim82\indent\mp.vim	/^function! s:LastValidMatchEnd(line, pat, start)$/;"	f
LeadingOperator	vim82\indent\ruby.vim	/^function! s:LeadingOperator(cline_info) abort$/;"	f
LeadingWhiteSpace	vim82\indent\objc.vim	/^function s:LeadingWhiteSpace(line)$/;"	f
Lexplore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore	call netrw#Lexplore(<count>,<bang>0,<q-args>)$/;"	c
Lfilter	vim82\pack\dist\opt\cfilter\plugin\cfilter.vim	/^com! -nargs=+ -bang Lfilter call s:Qf_filter(0, <q-args>, <q-bang>)$/;"	c
Line	vim82\tools\ccfilter.c	/^char	       Line[LINELENGTH];$/;"	v
Line2	vim82\tools\ccfilter.c	/^char	       Line2[LINELENGTH];$/;"	v
LineHasOpeningBrackets	vim82\indent\json.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LineHasOpeningBrackets	vim82\indent\typescript.vim	/^function s:LineHasOpeningBrackets(lnum)$/;"	f
LoadBufferMenu	vim82\menu.vim	/^  augroup LoadBufferMenu$/;"	a
LoadFTPlugin	vim82\ftplugin.vim	/^  func! s:LoadFTPlugin()$/;"	f
LoadIndent	vim82\indent.vim	/^  func! s:LoadIndent()$/;"	f
LoadOptions	plugins\kaoriya\plugin\scrnmode.vim	/^function! s:LoadOptions()$/;"	f
LoadVimSesn	vim82\menu.vim	/^fun! s:LoadVimSesn()$/;"	f
Load_annotation	vim82\ftplugin\ocaml.vim	/^    function! s:Load_annotation(annot_file_name)$/;"	f
LocalBrowse	vim82\plugin\netrwPlugin.vim	/^fun! s:LocalBrowse(dirname)$/;"	f
LocalBrowseRefresh	vim82\autoload\netrw.vim	/^fun! s:LocalBrowseRefresh()$/;"	f
LocalFastBrowser	vim82\autoload\netrw.vim	/^fun! s:LocalFastBrowser()$/;"	f
LocalListing	vim82\autoload\netrw.vim	/^fun! s:LocalListing()$/;"	f
Locate_annotation	vim82\ftplugin\ocaml.vim	/^  function! s:Locate_annotation()$/;"	f
Log	vim82\indent\erlang.vim	/^function! s:Log(s)$/;"	f
LogiPat	vim82\plugin\logiPat.vim	/^com!     -nargs=* LogiPat		call   LogiPat(<q-args>,1)$/;"	c
LogiPat	vim82\plugin\logiPat.vim	/^fun! LogiPat(pat,...)$/;"	f
LogiPatFlags	vim82\plugin\logiPat.vim	/^com!     -nargs=+ LogiPatFlags	let  s:LogiPatFlags="<args>"$/;"	c
LookingAt	vim82\indent\javascript.vim	/^function s:LookingAt()$/;"	f
LookupName	vim82\tools\xcmdsrv_client.c	/^LookupName($/;"	f	file:
M	vim82\macros\hanoi\hanoi.vim	/^map M dG$/;"	m
M	vim82\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
M	vim82\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
M	vim82\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
M	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap M M$/;"	m
MANPAGER	vim82\plugin\manpager.vim	/^command! -nargs=0 MANPAGER call s:ManPager() | delcommand MANPAGER$/;"	c
MAX_PROP_WORDS	vim82\tools\xcmdsrv_client.c	65;"	d	file:
MainBlockIndent	vim82\indent\ada.vim	/^function s:MainBlockIndent (prev_indent, prev_lnum, blockstart, stop_at)$/;"	f
MakeBookmark	vim82\autoload\netrw.vim	/^fun! s:MakeBookmark(fname)$/;"	f
MakeMenu	vim82\ftplugin\debchangelog.vim	/^function <SID>MakeMenu()$/;"	f
MakeSshCmd	vim82\autoload\netrw.vim	/^fun! s:MakeSshCmd(sshcmd)$/;"	f
MakeTag	vim82\tools\pltags.pl	/^sub MakeTag($$$$$)$/;"	s
Man	vim82\ftplugin\man.vim	/^  com -nargs=+ -complete=shellcmd Man call s:GetPage(<q-mods>, <f-args>)$/;"	c
ManPager	vim82\plugin\manpager.vim	/^function! s:ManPager()$/;"	f
MarkdownFold	vim82\ftplugin\markdown.vim	/^function! MarkdownFold() abort$/;"	f
MarkdownFoldText	vim82\ftplugin\markdown.vim	/^function! MarkdownFoldText() abort$/;"	f
Match	vim82\indent\falcon.vim	/^function s:Match(lnum, regex)$/;"	f
Match	vim82\indent\json.vim	/^function s:Match(lnum, regex)$/;"	f
Match	vim82\indent\ruby.vim	/^function! s:Match(lnum, regex) abort$/;"	f
Match	vim82\indent\typescript.vim	/^function s:Match(lnum, regex)$/;"	f
MatchCount	vim82\indent\pov.vim	/^function! s:MatchCount(line, rexp)$/;"	f
MatchDebug	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^  command! -nargs=0 MatchDebug call matchit#Match_debug()$/;"	c
MatchLast	vim82\indent\falcon.vim	/^function s:MatchLast(lnum, regex)$/;"	f
Match_borders	vim82\ftplugin\ocaml.vim	/^    function! s:Match_borders(mode)$/;"	f
Match_data	vim82\ftplugin\ocaml.vim	/^    function! s:Match_data()$/;"	f
MenuExplOpen	vim82\menu.vim	/^  fun MenuExplOpen()$/;"	f
MenuLang	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=1 MenuLang call <SID>ChangeMenu("<args>")$/;"	c
MergeBookmarks	vim82\autoload\netrw.vim	/^fun! s:MergeBookmarks()$/;"	f
MkVimball	vim82\plugin\vimballPlugin.vim	/^com! -range   -complete=file -nargs=+ -bang MkVimball		call vimball#MkVimball(<line1>,<line2>,<bang>0,<f-args>)$/;"	c
ModuloIndent	vim82\indent\sqlanywhere.vim	/^function! s:ModuloIndent(ind)$/;"	f
MonthnameString	plugins\kaoriya\plugin\autodate.vim	/^function! MonthnameString(...)$/;"	f
MultilineStringOrLineComment	vim82\indent\ruby.vim	/^function! s:MultilineStringOrLineComment(cline_info) abort$/;"	f
N	vim82\macros\hanoi\hanoi.vim	/^map N yy$/;"	m
N	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap N B$/;"	m
NDensity	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=0 NDensity	call <SID>ScreenMode(0)$/;"	c
NFH_bmp	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_bmp(bmpfile)$/;"	f
NFH_doc	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_doc(doc)$/;"	f
NFH_eps	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_eps(eps)$/;"	f
NFH_fig	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_fig(fig)$/;"	f
NFH_gif	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_gif(giffile)$/;"	f
NFH_htm	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_htm(pagefile)$/;"	f
NFH_html	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_html(pagefile)$/;"	f
NFH_jpg	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_jpg(jpgfile)$/;"	f
NFH_obj	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_obj(obj)$/;"	f
NFH_pdf	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_pdf(pdf)$/;"	f
NFH_png	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_png(pngfile)$/;"	f
NFH_pnm	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_pnm(pnmfile)$/;"	f
NFH_ps	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_ps(ps)$/;"	f
NFH_sxw	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_sxw(sxw)$/;"	f
NFH_xls	vim82\autoload\netrwFileHandlers.vim	/^fun! s:NFH_xls(xls)$/;"	f
Nat	vim82\indent\javascript.vim	/^function s:Nat(int)$/;"	f
NetReadFixup	vim82\autoload\netrw.vim	/^ fun! NetReadFixup(method, line1, line2)$/;"	f
NetSortSequence	vim82\autoload\netrw.vim	/^fun! s:NetSortSequence(islocal)$/;"	f
NetUserPass	vim82\autoload\netrw.vim	/^fun! NetUserPass(...)$/;"	f
NetUserPass	vim82\plugin\netrwPlugin.vim	/^com! -nargs=*		NetUserPass	call NetUserPass(<f-args>)$/;"	c
NetUserPass	vim82\plugin\netrwPlugin.vim	/^fun! NetUserPass(...)$/;"	f
NetrwBMShow	vim82\autoload\netrw.vim	/^fun! s:NetrwBMShow()$/;"	f
NetrwBadd	vim82\autoload\netrw.vim	/^fun! s:NetrwBadd(islocal,bl2mf)$/;"	f
NetrwBannerCtrl	vim82\autoload\netrw.vim	/^fun! s:NetrwBannerCtrl(islocal)$/;"	f
NetrwBookHistHandler	vim82\autoload\netrw.vim	/^fun! s:NetrwBookHistHandler(chg,curdir)$/;"	f
NetrwBookHistRead	vim82\autoload\netrw.vim	/^fun! s:NetrwBookHistRead()$/;"	f
NetrwBookHistSave	vim82\autoload\netrw.vim	/^fun! s:NetrwBookHistSave()$/;"	f
NetrwBookmark	vim82\autoload\netrw.vim	/^fun! s:NetrwBookmark(del,...)$/;"	f
NetrwBookmarkMenu	vim82\autoload\netrw.vim	/^fun! s:NetrwBookmarkMenu()$/;"	f
NetrwBrowse	vim82\autoload\netrw.vim	/^fun! s:NetrwBrowse(islocal,dirname)$/;"	f
NetrwBrowseChgDir	vim82\autoload\netrw.vim	/^fun! s:NetrwBrowseChgDir(islocal,newdir,...)$/;"	f
NetrwBrowseUpDir	vim82\autoload\netrw.vim	/^fun! s:NetrwBrowseUpDir(islocal)$/;"	f
NetrwBufRename	vim82\autoload\netrw.vim	/^fun! s:NetrwBufRename(newname)$/;"	f
NetrwCLeftmouse	vim82\autoload\netrw.vim	/^fun! s:NetrwCLeftmouse(islocal)$/;"	f
NetrwChgPerm	vim82\autoload\netrw.vim	/^fun! s:NetrwChgPerm(islocal,curdir)$/;"	f
NetrwClean	vim82\plugin\netrwPlugin.vim	/^com! -bang	NetrwClean	call netrw#Clean(<bang>0)$/;"	c
NetrwClearExplore	vim82\autoload\netrw.vim	/^fun! s:NetrwClearExplore()$/;"	f
NetrwCommands	vim82\autoload\netrw.vim	/^fun! s:NetrwCommands(islocal)$/;"	f
NetrwCursor	vim82\autoload\netrw.vim	/^fun! s:NetrwCursor()$/;"	f
NetrwDelete	vim82\autoload\netrw.vim	/^fun! s:NetrwDelete(path)$/;"	f
NetrwEnew	vim82\autoload\netrw.vim	/^fun! s:NetrwEnew(...)$/;"	f
NetrwExe	vim82\autoload\netrw.vim	/^fun! s:NetrwExe(cmd)$/;"	f
NetrwExploreListUniq	vim82\autoload\netrw.vim	/^fun! s:NetrwExploreListUniq(explist)$/;"	f
NetrwFile	vim82\autoload\netrw.vim	/^fun! s:NetrwFile(fname)$/;"	f
NetrwFileInfo	vim82\autoload\netrw.vim	/^fun! s:NetrwFileInfo(islocal,fname)$/;"	f
NetrwForceChgDir	vim82\autoload\netrw.vim	/^fun! s:NetrwForceChgDir(islocal,newdir)$/;"	f
NetrwForceFile	vim82\autoload\netrw.vim	/^fun! s:NetrwForceFile(islocal,newfile)$/;"	f
NetrwFullPath	vim82\autoload\netrw.vim	/^fun! s:NetrwFullPath(filename)$/;"	f
NetrwGetBuffer	vim82\autoload\netrw.vim	/^fun! s:NetrwGetBuffer(islocal,dirname)$/;"	f
NetrwGetCurdir	vim82\autoload\netrw.vim	/^fun! s:NetrwGetCurdir(islocal)$/;"	f
NetrwGetFile	vim82\autoload\netrw.vim	/^fun! s:NetrwGetFile(readcmd, tfile, method)$/;"	f
NetrwGetWord	vim82\autoload\netrw.vim	/^fun! s:NetrwGetWord()$/;"	f
NetrwGetcwd	vim82\autoload\netrw.vim	/^fun! s:NetrwGetcwd(doesc)$/;"	f
NetrwGlob	vim82\autoload\netrw.vim	/^fun! s:NetrwGlob(direntry,expr,pare)$/;"	f
NetrwHidden	vim82\autoload\netrw.vim	/^fun! s:NetrwHidden(islocal)$/;"	f
NetrwHide	vim82\autoload\netrw.vim	/^fun! s:NetrwHide(islocal)$/;"	f
NetrwHideEdit	vim82\autoload\netrw.vim	/^fun! s:NetrwHideEdit(islocal)$/;"	f
NetrwHome	vim82\autoload\netrw.vim	/^fun! s:NetrwHome()$/;"	f
NetrwHumanReadable	vim82\autoload\netrw.vim	/^fun! s:NetrwHumanReadable(sz)$/;"	f
NetrwInit	vim82\autoload\netrw.vim	/^fun s:NetrwInit(varname,value)$/;"	f
NetrwInsureWinVars	vim82\autoload\netrw.vim	/^fun! s:NetrwInsureWinVars()$/;"	f
NetrwKeepj	vim82\autoload\netrw.vim	/^ com! -nargs=*	NetrwKeepj	<args>$/;"	c
NetrwKeepj	vim82\autoload\netrw.vim	/^ com! -nargs=*	NetrwKeepj	keepj <args>$/;"	c
NetrwLcd	vim82\autoload\netrw.vim	/^fun! s:NetrwLcd(newdir)$/;"	f
NetrwLeftmouse	vim82\autoload\netrw.vim	/^fun! s:NetrwLeftmouse(islocal)$/;"	f
NetrwListHide	vim82\autoload\netrw.vim	/^fun! s:NetrwListHide()$/;"	f
NetrwListSettings	vim82\autoload\netrw.vim	/^fun! s:NetrwListSettings(islocal)$/;"	f
NetrwListStyle	vim82\autoload\netrw.vim	/^fun! s:NetrwListStyle(islocal)$/;"	f
NetrwLocalExecute	vim82\autoload\netrw.vim	/^fun! s:NetrwLocalExecute(cmd)$/;"	f
NetrwLocalRename	vim82\autoload\netrw.vim	/^fun! s:NetrwLocalRename(path) range$/;"	f
NetrwLocalRm	vim82\autoload\netrw.vim	/^fun! s:NetrwLocalRm(path) range$/;"	f
NetrwLocalRmFile	vim82\autoload\netrw.vim	/^fun! s:NetrwLocalRmFile(path,fname,all)$/;"	f
NetrwMakeDir	vim82\autoload\netrw.vim	/^fun! s:NetrwMakeDir(usrhost)$/;"	f
NetrwMaps	vim82\autoload\netrw.vim	/^fun! s:NetrwMaps(islocal)$/;"	f
NetrwMarkFile	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFile(islocal,fname)$/;"	f
NetrwMarkFileArgList	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileArgList(islocal,tomflist)$/;"	f
NetrwMarkFileCompress	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileCompress(islocal)$/;"	f
NetrwMarkFileCopy	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileCopy(islocal,...)$/;"	f
NetrwMarkFileDiff	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileDiff(islocal)$/;"	f
NetrwMarkFileEdit	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileEdit(islocal)$/;"	f
NetrwMarkFileExe	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileExe(islocal,enbloc)$/;"	f
NetrwMarkFileGrep	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileGrep(islocal)$/;"	f
NetrwMarkFileMove	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileMove(islocal)$/;"	f
NetrwMarkFilePrint	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFilePrint(islocal)$/;"	f
NetrwMarkFileQFEL	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileQFEL(islocal,qfel)$/;"	f
NetrwMarkFileRegexp	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileRegexp(islocal)$/;"	f
NetrwMarkFileSource	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileSource(islocal)$/;"	f
NetrwMarkFileTag	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileTag(islocal)$/;"	f
NetrwMarkFileTgt	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileTgt(islocal)$/;"	f
NetrwMarkFileVimCmd	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFileVimCmd(islocal)$/;"	f
NetrwMarkFiles	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkFiles(islocal,...)$/;"	f
NetrwMarkHideSfx	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkHideSfx(islocal)$/;"	f
NetrwMarkTarget	vim82\autoload\netrw.vim	/^fun! s:NetrwMarkTarget(...)$/;"	f
NetrwMenu	vim82\autoload\netrw.vim	/^fun! s:NetrwMenu(domenu)$/;"	f
NetrwMethod	vim82\autoload\netrw.vim	/^fun! s:NetrwMethod(choice)$/;"	f
NetrwObtain	vim82\autoload\netrw.vim	/^fun! s:NetrwObtain(islocal)$/;"	f
NetrwOpenFile	vim82\autoload\netrw.vim	/^fun! s:NetrwOpenFile(islocal)$/;"	f
NetrwOptionsRestore	vim82\autoload\netrw.vim	/^fun! s:NetrwOptionsRestore(vt)$/;"	f
NetrwOptionsSafe	vim82\autoload\netrw.vim	/^fun! s:NetrwOptionsSafe(islocal)$/;"	f
NetrwOptionsSave	vim82\autoload\netrw.vim	/^fun! s:NetrwOptionsSave(vt)$/;"	f
NetrwPrevWinOpen	vim82\autoload\netrw.vim	/^fun! s:NetrwPrevWinOpen(islocal)$/;"	f
NetrwPreview	vim82\autoload\netrw.vim	/^fun! s:NetrwPreview(path) range$/;"	f
NetrwRefresh	vim82\autoload\netrw.vim	/^fun! s:NetrwRefresh(islocal,dirname)$/;"	f
NetrwRefreshDir	vim82\autoload\netrw.vim	/^fun! s:NetrwRefreshDir(islocal,dirname)$/;"	f
NetrwRefreshTreeDict	vim82\autoload\netrw.vim	/^fun! s:NetrwRefreshTreeDict(dir)$/;"	f
NetrwRemoteFtpCmd	vim82\autoload\netrw.vim	/^fun! s:NetrwRemoteFtpCmd(path,listcmd)$/;"	f
NetrwRemoteListing	vim82\autoload\netrw.vim	/^fun! s:NetrwRemoteListing()$/;"	f
NetrwRemoteRename	vim82\autoload\netrw.vim	/^fun! s:NetrwRemoteRename(usrhost,path) range$/;"	f
NetrwRemoteRm	vim82\autoload\netrw.vim	/^fun! s:NetrwRemoteRm(usrhost,path) range$/;"	f
NetrwRemoteRmFile	vim82\autoload\netrw.vim	/^fun! s:NetrwRemoteRmFile(path,rmfile,all)$/;"	f
NetrwRestoreSetting	vim82\autoload\netrw.vim	/^fun! s:NetrwRestoreSetting(keepvar,setting)$/;"	f
NetrwRestoreWordPosn	vim82\autoload\netrw.vim	/^fun! s:NetrwRestoreWordPosn()$/;"	f
NetrwRexplore	vim82\autoload\netrw.vim	/^fun! s:NetrwRexplore(islocal,dirname)$/;"	f
NetrwSLeftdrag	vim82\autoload\netrw.vim	/^fun! s:NetrwSLeftdrag(islocal)$/;"	f
NetrwSLeftmouse	vim82\autoload\netrw.vim	/^fun! s:NetrwSLeftmouse(islocal)$/;"	f
NetrwSLeftrelease	vim82\autoload\netrw.vim	/^fun! s:NetrwSLeftrelease(islocal)$/;"	f
NetrwSaveWordPosn	vim82\autoload\netrw.vim	/^fun! s:NetrwSaveWordPosn()$/;"	f
NetrwServerEdit	vim82\autoload\netrw.vim	/^fun! s:NetrwServerEdit(islocal,fname)$/;"	f
NetrwSetChgwin	vim82\autoload\netrw.vim	/^fun! s:NetrwSetChgwin(...)$/;"	f
NetrwSetSafeSetting	vim82\autoload\netrw.vim	/^fun! s:NetrwSetSafeSetting(setting,safesetting)$/;"	f
NetrwSetSort	vim82\autoload\netrw.vim	/^fun! s:NetrwSetSort()$/;"	f
NetrwSetTgt	vim82\autoload\netrw.vim	/^fun! s:NetrwSetTgt(islocal,bookhist,choice)$/;"	f
NetrwSettingHelp	vim82\autoload\netrwSettings.vim	/^fun! NetrwSettingHelp()$/;"	f
NetrwSettings	vim82\plugin\netrwPlugin.vim	/^com! -nargs=0	NetrwSettings	call netrwSettings#NetrwSettings()$/;"	c
NetrwSortStyle	vim82\autoload\netrw.vim	/^fun! s:NetrwSortStyle(islocal)$/;"	f
NetrwSplit	vim82\autoload\netrw.vim	/^fun! s:NetrwSplit(mode)$/;"	f
NetrwStatusLine	vim82\autoload\netrw.vim	/^fun! NetrwStatusLine()$/;"	f
NetrwStatusLine	vim82\plugin\netrwPlugin.vim	/^fun! NetrwStatusLine()$/;"	f
NetrwTgtMenu	vim82\autoload\netrw.vim	/^fun! s:NetrwTgtMenu()$/;"	f
NetrwTreeDir	vim82\autoload\netrw.vim	/^fun! s:NetrwTreeDir(islocal)$/;"	f
NetrwTreeDisplay	vim82\autoload\netrw.vim	/^fun! s:NetrwTreeDisplay(dir,depth)$/;"	f
NetrwTreeListing	vim82\autoload\netrw.vim	/^fun! s:NetrwTreeListing(dirname)$/;"	f
NetrwTreePath	vim82\autoload\netrw.vim	/^fun! s:NetrwTreePath(treetop)$/;"	f
NetrwUnMarkFile	vim82\autoload\netrw.vim	/^fun! s:NetrwUnMarkFile(islocal)$/;"	f
NetrwUnmarkAll	vim82\autoload\netrw.vim	/^fun! s:NetrwUnmarkAll()$/;"	f
NetrwUnmarkAll2	vim82\autoload\netrw.vim	/^fun! s:NetrwUnmarkAll2()$/;"	f
NetrwUnmarkList	vim82\autoload\netrw.vim	/^fun! s:NetrwUnmarkList(curbufnr,curdir)$/;"	f
NetrwUpload	vim82\autoload\netrw.vim	/^fun! s:NetrwUpload(fname,tgt,...)$/;"	f
NetrwWideListing	vim82\autoload\netrw.vim	/^fun! s:NetrwWideListing()$/;"	f
Network	vim82\plugin\netrwPlugin.vim	/^augroup Network$/;"	a
NewChangelogEntry	vim82\ftplugin\changelog.vim	/^    command! -nargs=0 NewChangelogEntry call s:new_changelog_entry('')$/;"	c
NewVersion	vim82\ftplugin\debchangelog.vim	/^function NewVersion()$/;"	f
Nexplore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang			Nexplore	call netrw#Explore(-1,0,0,<q-args>)$/;"	c
NextIndToken	vim82\indent\erlang.vim	/^function! s:NextIndToken(lnum, i)$/;"	f
NextPage	vim82\macros\less.vim	/^fun! s:NextPage()$/;"	f
Nextitem	vim82\autoload\ccomplete.vim	/^function! s:Nextitem(lead, items, depth, all)$/;"	f
NoMatchParen	vim82\plugin\matchparen.vim	/^command NoMatchParen call s:NoMatchParen()$/;"	c
NoMatchParen	vim82\plugin\matchparen.vim	/^func s:NoMatchParen()$/;"	f
NoTeXIndent	vim82\indent\rnoweb.vim	/^function! s:NoTeXIndent()$/;"	f
Nohlsearch	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 Nohlsearch let @\/ = ''$/;"	c
Nosynonly	vim82\synmenu.vim	/^fun! s:Nosynonly()$/;"	f
NotCodeBlock	vim82\ftplugin\markdown.vim	/^function! s:NotCodeBlock(lnum) abort$/;"	f
Nread	vim82\plugin\netrwPlugin.vim	/^com! -count=1 -nargs=*	Nread		let s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)$/;"	c
Nsource	vim82\plugin\netrwPlugin.vim	/^com! -nargs=*	        Nsource		let s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)$/;"	c
Ntree	vim82\plugin\netrwPlugin.vim	/^com! -nargs=?		Ntree		call netrw#SetTreetop(1,<q-args>)$/;"	c
Nwrite	vim82\plugin\netrwPlugin.vim	/^com! -range=% -nargs=*	Nwrite		let s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)$/;"	c
O	vim82\macros\hanoi\hanoi.vim	/^map O p$/;"	m
O	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap O R$/;"	m
OCaml_switch	vim82\ftplugin\ocaml.vim	/^  fun OCaml_switch(newwin)$/;"	f
OMLetFoldLevel	vim82\ftplugin\ocaml.vim	/^function OMLetFoldLevel(l)$/;"	f
Ocaml_get_type	vim82\ftplugin\ocaml.vim	/^      function Ocaml_get_type(mode)$/;"	f
Ocaml_get_type_or_not	vim82\ftplugin\ocaml.vim	/^      function Ocaml_get_type_or_not(mode)$/;"	f
Ocaml_print_type	vim82\ftplugin\ocaml.vim	/^      function Ocaml_print_type(mode)$/;"	f
OcpGrep	vim82\ftplugin\ocaml.vim	/^function! s:OcpGrep(bang,args) abort$/;"	f
Ocpgrep	vim82\ftplugin\ocaml.vim	/^command! -bar -bang -complete=file -nargs=+ Ocpgrep exe s:OcpGrep(<q-bang>, <q-args>)$/;"	c
OmniSyntaxList	vim82\autoload\syntaxcomplete.vim	/^function! OmniSyntaxList(...)$/;"	f
OmniSyntaxShowChars	vim82\autoload\syntaxcomplete.vim	/^function! OmniSyntaxShowChars(spec)$/;"	f
OnEncodingChanged	plugins\kaoriya\encode_japan.vim	/^function! s:OnEncodingChanged()$/;"	f
OneScope	vim82\indent\javascript.vim	/^function s:OneScope()$/;"	f
OpenDictionary	plugins\kaoriya\plugin\dicwin.vim	/^function! s:OpenDictionary(dic, word)$/;"	f
OpenDictionaryWindow	plugins\kaoriya\plugin\dicwin.vim	/^function! s:OpenDictionaryWindow(name)$/;"	f
OptionG	vim82\optwin.vim	/^fun! <SID>OptionG(name, val)$/;"	f
OptionL	vim82\optwin.vim	/^fun! <SID>OptionL(name)$/;"	f
P	vim82\macros\hanoi\hanoi.vim	/^map P p$/;"	m
P	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap P L$/;"	m
PTvalue	vim82\optwin.vim	/^fun! <SID>PTvalue()$/;"	f
PackageName	vim82\tools\pltags.pl	/^sub PackageName($)$/;"	s
ParmSub.If	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu ParmSub.If parm not set print word and exit ${:?}hhi$/;"	m
ParmSub.Set	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu ParmSub.Set parm to word if not set ${:=}hhi$/;"	m
ParmSub.Substitute	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu ParmSub.Substitute word if parm not set ${:-}hhi$/;"	m
ParmSub.Substitute	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu ParmSub.Substitute word if parm set else nothing ${:+}hhi$/;"	m
ParseCino	vim82\indent\javascript.vim	/^function s:ParseCino(f)$/;"	f
ParseDataToProps	vim82\tools\unicode.vim	/^func! ParseDataToProps()$/;"	f
ParseFoldProps	vim82\tools\unicode.vim	/^func! ParseFoldProps()$/;"	f
ParseRpmVars	vim82\ftplugin\spec.vim	/^    function s:ParseRpmVars(str, strline)$/;"	f
ParseSkip	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseTagline	vim82\autoload\ccomplete.vim	/^function! s:ParseTagline(line)$/;"	f
ParseWidthProps	vim82\tools\unicode.vim	/^func! ParseWidthProps()$/;"	f
ParseWords	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
Peekstack	vim82\autoload\xmlcomplete.vim	/^function! s:Peekstack(sname)$/;"	f
PerformListing	vim82\autoload\netrw.vim	/^fun! s:PerformListing(islocal)$/;"	f
Pexplore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang			Pexplore	call netrw#Explore(-2,0,0,<q-args>)$/;"	c
Pick	vim82\ftplugin\gitrebase.vim	/^command! -buffer -bar -range Pick   :<line1>,<line2>call s:choose('pick')$/;"	c
PlaceSign	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:PlaceSign(id, subid, entry)$/;"	f
Plugin	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=+  -bar   Plugin$/;"	c
PluginClean	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang   PluginClean$/;"	c
PluginDocs	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=0         PluginDocs$/;"	c
PluginInstall	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=* -bang -complete=custom,vundle#scripts#complete PluginInstall$/;"	c
PluginList	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=0 -bang PluginList$/;"	c
PluginSearch	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete PluginSearch$/;"	c
PluginUpdate	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=* -complete=custom,vundle#scripts#complete PluginUpdate PluginInstall! <args>$/;"	c
Pop	vim82\autoload\xmlcomplete.vim	/^function! s:Pop(sname)$/;"	f
Pop	vim82\indent\erlang.vim	/^function! s:Pop(stack)$/;"	f
PopPage	vim82\ftplugin\man.vim	/^func <SID>PopPage()$/;"	f
PostscrIndentGet	vim82\indent\postscr.vim	/^function! PostscrIndentGet(lnum)$/;"	f
PreGetPage	vim82\ftplugin\man.vim	/^func <SID>PreGetPage(cnt)$/;"	f
PrevIndToken	vim82\indent\erlang.vim	/^function! s:PrevIndToken(lnum, i)$/;"	f
PrevMatch	vim82\indent\sas.vim	/^function! s:PrevMatch(lnum, regex)$/;"	f
PrevNonBlankNonComment	vim82\indent\mp.vim	/^function! s:PrevNonBlankNonComment(lnum)$/;"	f
PrevNonBlankNonString	vim82\indent\falcon.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevNonBlankNonString	vim82\indent\json.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevNonBlankNonString	vim82\indent\ruby.vim	/^function! s:PrevNonBlankNonString(lnum) abort$/;"	f
PrevNonBlankNonString	vim82\indent\typescript.vim	/^function s:PrevNonBlankNonString(lnum)$/;"	f
PrevWindowMark	plugins\kaoriya\plugin\dicwin.vim	/^function! s:PrevWindowMark()$/;"	f
PrevWindowRevert	plugins\kaoriya\plugin\dicwin.vim	/^function! s:PrevWindowRevert()$/;"	f
PreviousNotMSL	vim82\indent\ruby.vim	/^function! s:PreviousNotMSL(msl_info) abort$/;"	f
PreviousToken	vim82\indent\javascript.vim	/^function s:PreviousToken(...)$/;"	f
ProgressBar	vim82\syntax\2html.vim	/^  func! s:ProgressBar(title, max_value, winnr)$/;"	f
PromptCallback	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:PromptCallback(text)$/;"	f
PromptInterrupt	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:PromptInterrupt()$/;"	f
Pure	vim82\indent\javascript.vim	/^function s:Pure(f,...)$/;"	f
PurifyCode	vim82\indent\pascal.vim	/^function! s:PurifyCode( line_num )$/;"	f
Push	vim82\autoload\xmlcomplete.vim	/^function! s:Push(el, sname)$/;"	f
Push	vim82\indent\erlang.vim	/^function! s:Push(stack, token)$/;"	f
Python_jump	vim82\ftplugin\python.vim	/^  fun! <SID>Python_jump(mode, motion, flags, count, ...) range$/;"	f
Q	vim82\defaults.vim	/^map Q gq$/;"	m
Q	vim82\evim.vim	/^map Q gq$/;"	m
Q	vim82\macros\hanoi\hanoi.vim	/^map Q 0iT$/;"	m
Q	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap Q "$/;"	m
Qf_filter	vim82\pack\dist\opt\cfilter\plugin\cfilter.vim	/^func s:Qf_filter(qf, searchpat, bang)$/;"	f
Query	plugins\kaoriya\plugin\dicwin.vim	/^function! s:Query()$/;"	f
R	vim82\macros\hanoi\hanoi.vim	/^map R $rn$/;"	m
R	vim82\macros\less.vim	/^noremap <script> R <C-L><SID>L$/;"	m
R	vim82\macros\life\life.vim	/^map R CV$/;"	m
R	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap R P$/;"	m
RDelete_parens	vim82\indent\r.vim	/^function s:RDelete_parens(line)$/;"	f
RDelete_quotes	vim82\indent\r.vim	/^function s:RDelete_quotes(line)$/;"	f
Range	vim82\tools\unicode.vim	/^func! Range(ranges, start, end, step, add)$/;"	f
Reason	vim82\tools\ccfilter.c	/^char	       Reason[LINELENGTH];$/;"	v
RecordInFile	vim82\autoload\vimball.vim	/^fun! s:RecordInFile(home)$/;"	f
RecordInVar	vim82\autoload\vimball.vim	/^fun! s:RecordInVar(home,cmd)$/;"	f
Ref	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Release	vim82\tools\shtags.pl	/^Release:	$id[2]$/;"	l
RemotePathAnalysis	vim82\autoload\netrw.vim	/^fun! s:RemotePathAnalysis(dirname)$/;"	f
RemoteSystem	vim82\autoload\netrw.vim	/^fun! s:RemoteSystem(cmd)$/;"	f
RemoveITags	vim82\indent\html.vim	/^func! s:RemoveITags(tags, taglist)$/;"	f
RemoveTrailingComments	vim82\indent\typescript.vim	/^function s:RemoveTrailingComments(content)$/;"	f
Remove_Matches	vim82\plugin\matchparen.vim	/^func s:Remove_Matches()$/;"	f
ResetPhpOptions	vim82\indent\php.vim	/^function! ResetPhpOptions()$/;"	f
Resolve	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestoreBufVars	vim82\autoload\netrw.vim	/^fun! s:RestoreBufVars()$/;"	f
RestoreCursorline	vim82\autoload\netrw.vim	/^fun! s:RestoreCursorline()$/;"	f
RestoreKeywords	vim82\autoload\xmlcomplete.vim	/^function! s:RestoreKeywords()$/;"	f
RestoreOptions	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^function s:RestoreOptions()$/;"	f
RestorePosn	vim82\autoload\netrw.vim	/^fun! s:RestorePosn(posndict)$/;"	f
RestoreShiftwidth	vim82\ftplugin\cobol.vim	/^function! s:RestoreShiftwidth()$/;"	f
RestoreWinVars	vim82\autoload\netrw.vim	/^fun! s:RestoreWinVars()$/;"	f
Result	vim82\colors\tools\check_colors.vim	/^fu! Result(err)$/;"	f
Revert	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=0 Revert	call <SID>ScreenMode(0)$/;"	c
Reword	vim82\ftplugin\gitrebase.vim	/^command! -buffer -bar -range Reword :<line1>,<line2>call s:choose('reword')$/;"	c
RmDir	vim82\autoload\rust.vim	/^function! s:RmDir(path)$/;"	f
RmVimball	vim82\plugin\vimballPlugin.vim	/^com! -nargs=* -complete=dir  RmVimball						call vimball#SaveSettings()|call vimball#RmVimball(<f-args>)|call vimball#RestoreSettings()$/;"	c
Rmdir	vim82\autoload\tar.vim	/^fun! s:Rmdir(fname)$/;"	f
Rmdir	vim82\autoload\zip.vim	/^fun! s:Rmdir(fname)$/;"	f
Row	vim82\tools\ccfilter.c	/^unsigned long  Row;$/;"	v
RplGetFreeIndent	vim82\indent\rpl.vim	/^function RplGetFreeIndent()$/;"	f
RplGetIndent	vim82\indent\rpl.vim	/^function RplGetIndent(lnum)$/;"	f
RstFold	vim82\ftplugin\rst.vim	/^  augroup RstFold$/;"	a
RstFold#GetRstFold	vim82\autoload\RstFold.vim	/^function RstFold#GetRstFold()$/;"	f
RstFold#GetRstFoldText	vim82\autoload\RstFold.vim	/^function RstFold#GetRstFoldText()$/;"	f
RubyBalloonexpr	vim82\ftplugin\ruby.vim	/^function! RubyBalloonexpr() abort$/;"	f
RubyCursorFile	vim82\ftplugin\ruby.vim	/^function! RubyCursorFile() abort$/;"	f
RubyCursorIdentifier	vim82\ftplugin\ruby.vim	/^function! RubyCursorIdentifier() abort$/;"	f
RubyCursorTag	vim82\ftplugin\ruby.vim	/^function! RubyCursorTag() abort$/;"	f
Run	vim82\autoload\rust.vim	/^function! s:Run(dict, rustc_args, args)$/;"	f
Run	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:Run(args)$/;"	f
RunHelp	vim82\ftplugin\zsh.vim	/^   command! -buffer -nargs=1 RunHelp echo system('zsh -ic "autoload -Uz run-help; run-help <args> 2>\/dev\/null"')$/;"	c
RunHelp	vim82\ftplugin\zsh.vim	/^   command! -buffer -nargs=1 RunHelp silent exe '!zsh -ic "autoload -Uz run-help; run-help <args> 2>\/dev\/null | LESS= less"' | redraw!$/;"	c
RunHelp	vim82\ftplugin\zsh.vim	/^   command! -buffer -nargs=1 RunHelp silent exe ':term zsh -ic "autoload -Uz run-help; run-help <args>"'$/;"	c
RunRustfmt	vim82\autoload\rustfmt.vim	/^function! s:RunRustfmt(command, curw, tmpname)$/;"	f
RustEmitAsm	vim82\ftplugin\rust.vim	/^command! -nargs=* -buffer RustEmitAsm call rust#Emit("asm", <q-args>)$/;"	c
RustEmitIr	vim82\ftplugin\rust.vim	/^command! -nargs=* -buffer RustEmitIr call rust#Emit("llvm-ir", <q-args>)$/;"	c
RustExpand	vim82\ftplugin\rust.vim	/^command! -nargs=* -complete=customlist,rust#CompleteExpand -bang -buffer RustExpand call rust#Expand(<bang>0, <q-args>)$/;"	c
RustFmt	vim82\ftplugin\rust.vim	/^command! -buffer RustFmt call rustfmt#Format()$/;"	c
RustFmtRange	vim82\ftplugin\rust.vim	/^command! -range -buffer RustFmtRange call rustfmt#FormatRange(<line1>, <line2>)$/;"	c
RustPlay	vim82\ftplugin\rust.vim	/^command! -range=% RustPlay :call rust#Play(<count>, <line1>, <line2>, <f-args>)$/;"	c
RustRun	vim82\ftplugin\rust.vim	/^command! -nargs=* -complete=file -bang -buffer RustRun call rust#Run(<bang>0, <q-args>)$/;"	c
RustfmtCommand	vim82\autoload\rustfmt.vim	/^function! s:RustfmtCommand(filename)$/;"	f
RustfmtCommandRange	vim82\autoload\rustfmt.vim	/^function! s:RustfmtCommandRange(filename, line1, line2)$/;"	f
S	vim82\macros\hanoi\hanoi.vim	/^map S $r\$$/;"	m
S	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap S O$/;"	m
SEND_MSEC_POLL	vim82\tools\xcmdsrv_client.c	204;"	d	file:
SID_PREFIX	plugins\vimproc\autoload\vimproc.vim	/^function! s:SID_PREFIX() abort$/;"	f
SM	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=1 SM		call <SID>ScreenMode(<args>)$/;"	c
SQLCAddAlias	vim82\autoload\sqlcomplete.vim	/^function! s:SQLCAddAlias(table_name, table_alias, cols)$/;"	f
SQLCCheck4dbext	vim82\autoload\sqlcomplete.vim	/^function! s:SQLCCheck4dbext()$/;"	f
SQLCErrorMsg	vim82\autoload\sqlcomplete.vim	/^function! s:SQLCErrorMsg(msg)$/;"	f
SQLCGetColumns	vim82\autoload\sqlcomplete.vim	/^function! s:SQLCGetColumns(table_name, list_type)$/;"	f
SQLCGetObjectOwner	vim82\autoload\sqlcomplete.vim	/^function! s:SQLCGetObjectOwner(object)$/;"	f
SQLCGetSyntaxList	vim82\autoload\sqlcomplete.vim	/^function! s:SQLCGetSyntaxList(syn_group)$/;"	f
SQLCWarningMsg	vim82\autoload\sqlcomplete.vim	/^function! s:SQLCWarningMsg(msg)$/;"	f
SQLGetType	vim82\ftplugin\sql.vim	/^    command! -nargs=0 SQLGetType :call SQL_GetType()$/;"	c
SQLSetType	vim82\ftplugin\sql.vim	/^    command! -nargs=* -complete=custom,SQL_GetList SQLSetType :call SQL_SetType(<q-args>)$/;"	c
SQL_GetList	vim82\ftplugin\sql.vim	/^    function SQL_GetList(ArgLead, CmdLine, CursorPos)$/;"	f
SQL_GetType	vim82\ftplugin\sql.vim	/^    function SQL_GetType()$/;"	f
SQL_SetType	vim82\ftplugin\sql.vim	/^    function SQL_SetType(name)$/;"	f
STATIC_SPACE	vim82\tools\xcmdsrv_client.c	107;"	d	file:
Safe_indent	vim82\indent\awk.vim	/^function! s:Safe_indent( base, wordlen, this_line )$/;"	f
SanitizeRHelpLine	vim82\indent\rhelp.vim	/^function s:SanitizeRHelpLine(line)$/;"	f
SanitizeRLine	vim82\indent\r.vim	/^function SanitizeRLine(line)$/;"	f
SassIncludeExpr	vim82\ftplugin\sass.vim	/^function! SassIncludeExpr(file) abort$/;"	f
SaveBufVars	vim82\autoload\netrw.vim	/^fun! s:SaveBufVars()$/;"	f
SaveOptions	plugins\kaoriya\plugin\scrnmode.vim	/^function! s:SaveOptions()$/;"	f
SavePosn	vim82\autoload\netrw.vim	/^fun! s:SavePosn(posndict)$/;"	f
SaveVimSesn	vim82\menu.vim	/^fun! s:SaveVimSesn()$/;"	f
SaveWinVars	vim82\autoload\netrw.vim	/^fun! s:SaveWinVars()$/;"	f
Scratch	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 Scratch new | setlocal bt=nofile noswf | let b:cmdex_scratch = 1$/;"	c
ScreenMode	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=1 ScreenMode	call <SID>ScreenMode(<args>)$/;"	c
ScreenMode	plugins\kaoriya\plugin\scrnmode.vim	/^function! s:ScreenMode(modenum)$/;"	f
Search	plugins\kaoriya\plugin\dicwin.vim	/^function! s:Search(dic, dir)$/;"	f
SearchEndPair	vim82\indent\erlang.vim	/^function! s:SearchEndPair(lnum, curr_col)$/;"	f
SearchFromTop	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:SearchFromTop(pattern)$/;"	f
SearchLoop	vim82\indent\javascript.vim	/^function s:SearchLoop(pat,flags,expr)$/;"	f
SearchMembers	vim82\autoload\ccomplete.vim	/^function! s:SearchMembers(matches, items, all)$/;"	f
SearchP	vim82\menu.vim	/^fun! s:SearchP()$/;"	f
SearchPair	vim82\indent\erlang.vim	/^function! s:SearchPair(lnum, curr_col, start, middle, end)$/;"	f
SearchSection	vim82\ftplugin\j.vim	/^function! s:SearchSection(end, backwards, visualmode) abort$/;"	f
Seems_continuing	vim82\indent\awk.vim	/^function! s:Seems_continuing( line )$/;"	f
SelectAll	vim82\menu.vim	/^func s:SelectAll()$/;"	f
SendCommand	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:SendCommand(cmd)$/;"	f
SendEval	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:SendEval(expr)$/;"	f
SendEventProc	vim82\tools\xcmdsrv_client.c	/^SendEventProc($/;"	f	file:
SendInit	vim82\tools\xcmdsrv_client.c	/^SendInit(Display *dpy)$/;"	f	file:
Set.All	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.All keyword arguments are placed in the environment set -k$/;"	m
Set.Disable	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.Disable file name generation set -f$/;"	m
Set.Exit	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.Exit after reading and executing one command set -t$/;"	m
Set.Print	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.Print commands and their arguments as they are executed set -x$/;"	m
Set.Print	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.Print shell input lines as they are read set -v$/;"	m
Set.Read	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.Read commands but do not execute them set -n$/;"	m
Set.Treat	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.Treat unset variables as an error when substituting set -u$/;"	m
Set.exit	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.exit when command returns non-zero exit code set -e$/;"	m
Set.mark	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.mark modified or modified variables set -a$/;"	m
Set.remember	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.remember function commands set -h$/;"	m
Set.set	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.set set$/;"	m
Set.unset	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Set.unset unset$/;"	m
SetBreakpoint	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:SetBreakpoint(at)$/;"	f
SetBufWinVars	vim82\autoload\netrw.vim	/^fun! s:SetBufWinVars()$/;"	f
SetErlangOptions	vim82\ftplugin\erlang.vim	/^function s:SetErlangOptions()$/;"	f
SetKeywords	vim82\autoload\xmlcomplete.vim	/^function! s:SetKeywords()$/;"	f
SetProgbarColor	vim82\syntax\2html.vim	/^  func! s:SetProgbarColor()$/;"	f
SetRexDir	vim82\autoload\netrw.vim	/^fun! s:SetRexDir(islocal,dirname)$/;"	f
SetSyn	vim82\synmenu.vim	/^fun! SetSyn(name)$/;"	f
Setsynonly	vim82\synmenu.vim	/^fun! s:Setsynonly()$/;"	f
SetupColorSchemes	vim82\menu.vim	/^func s:SetupColorSchemes() abort$/;"	f
SetupCompilers	vim82\menu.vim	/^func s:SetupCompilers() abort$/;"	f
SetupKeymap	plugins\kaoriya\plugin\dicwin.vim	/^function! s:SetupKeymap()$/;"	f
SetupKeymaps	vim82\menu.vim	/^  func s:SetupKeymaps() abort$/;"	f
SetupLazyloadMenus	vim82\menu.vim	/^  augroup SetupLazyloadMenus$/;"	a
SetupLazyloadMenus	vim82\menu.vim	/^  func s:SetupLazyloadMenus()$/;"	f
SetupNetrwStatusLine	vim82\autoload\netrw.vim	/^fun! s:SetupNetrwStatusLine(statline)$/;"	f
SetupRemoteReplies	vim82\plugin\rrhelper.vim	/^function SetupRemoteReplies()$/;"	f
Severity	vim82\tools\ccfilter.c	/^char	       Severity;$/;"	v
Sexplore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Sexplore	call netrw#Explore(<count>,1,0+<bang>0,<q-args>)$/;"	c
ShFoldFunctions	vim82\syntax\sh.vim	/^ com! -nargs=* ShFoldFunctions <args> fold$/;"	c
ShFoldFunctions	vim82\syntax\sh.vim	/^ com! -nargs=* ShFoldFunctions <args>$/;"	c
ShFoldHereDoc	vim82\syntax\sh.vim	/^ com! -nargs=* ShFoldHereDoc <args> fold$/;"	c
ShFoldHereDoc	vim82\syntax\sh.vim	/^ com! -nargs=* ShFoldHereDoc <args>$/;"	c
ShFoldIfDoFor	vim82\syntax\sh.vim	/^ com! -nargs=* ShFoldIfDoFor <args> fold$/;"	c
ShFoldIfDoFor	vim82\syntax\sh.vim	/^ com! -nargs=* ShFoldIfDoFor <args>$/;"	c
ShellEscape	vim82\autoload\netrw.vim	/^fun! s:ShellEscape(s, ...)$/;"	f
ShellTokenize	vim82\autoload\rust.vim	/^function! s:ShellTokenize(text)$/;"	f
ShowLink	vim82\autoload\netrw.vim	/^fun! s:ShowLink()$/;"	f
ShowStyle	vim82\autoload\netrw.vim	/^fun! s:ShowStyle()$/;"	f
ShowUsage	vim82\tools\ccfilter.c	/^int ShowUsage( char *szError )$/;"	f
SimplifyAdjacentCollections	vim82\syntax\yaml.vim	/^function s:SimplifyAdjacentCollections(p)$/;"	f
SimplifyToAssumeAllPrintable	vim82\syntax\yaml.vim	/^function s:SimplifyToAssumeAllPrintable(p)$/;"	f
SkipFunc	vim82\indent\javascript.vim	/^function s:SkipFunc()$/;"	f
SkipJavaBlanksAndComments	vim82\indent\java.vim	/^function! SkipJavaBlanksAndComments(startline)$/;"	f
SkipPattern	vim82\indent\sml.vim	/^function! s:SkipPattern(lnum, pat)$/;"	f
Skippmatch	vim82\indent\php.vim	/^function! Skippmatch()	" {{{$/;"	f
Skippmatch2	vim82\indent\php.vim	/^function! Skippmatch2()$/;"	f
Sman	vim82\ftplugin\systemd.vim	/^  command! -buffer -nargs=1 Sman silent exe '!' . KeywordLookup_systemd(<q-args>) | redraw!$/;"	c
Sman	vim82\ftplugin\systemd.vim	/^  command! -buffer -nargs=1 Sman silent exe 'term ' . KeywordLookup_systemd(<q-args>)$/;"	c
SpShVars.All	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu SpShVars.All positional parameters (quoted spaces) ${*}$/;"	m
SpShVars.All	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu SpShVars.All positional parameters (unquoted spaces) ${@}$/;"	m
SpShVars.Flags	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu SpShVars.Flags set ${-}$/;"	m
SpShVars.Number	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu SpShVars.Number of positional parameters ${#}$/;"	m
SpShVars.Process	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu SpShVars.Process number of last background command ${!}$/;"	m
SpShVars.Process	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu SpShVars.Process number of this shell ${$}$/;"	m
SpShVars.Return	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu SpShVars.Return code of last command ${?}$/;"	m
Space	vim82\optwin.vim	/^fun! <SID>Space()$/;"	f
SpecChangelog	vim82\ftplugin\spec.vim	/^	function s:SpecChangelog(format)$/;"	f
SpellDel	vim82\menu.vim	/^  func s:SpellDel()$/;"	f
SpellLang	vim82\menu.vim	/^  func s:SpellLang()$/;"	f
SpellPopup	vim82\menu.vim	/^  func s:SpellPopup()$/;"	f
SpellPopupMenu	vim82\menu.vim	/^  augroup SpellPopupMenu$/;"	a
SpellReplace	vim82\menu.vim	/^  func s:SpellReplace(n)$/;"	f
SplitMsg	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func! s:SplitMsg(s)$/;"	f
Squash	vim82\ftplugin\gitrebase.vim	/^command! -buffer -bar -range Squash :<line1>,<line2>call s:choose('squash')$/;"	c
StackLook	vim82\plugin\logiPat.vim	/^fun! s:StackLook(description)$/;"	f
StarSetf	vim82\filetype.vim	/^func! s:StarSetf(ft)$/;"	f
StartDebug	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:StartDebug(bang, ...)$/;"	f
StartDebugCommand	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:StartDebugCommand(bang, ...)$/;"	f
StartDebugCommon	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:StartDebugCommon(dict)$/;"	f
StartDebug_internal	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:StartDebug_internal(dict)$/;"	f
StartDebug_prompt	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:StartDebug_prompt(dict)$/;"	f
StartDebug_term	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func s:StartDebug_term(dict)$/;"	f
StartOfFile	vim82\indent\ruby.vim	/^function! s:StartOfFile(pline_info) abort$/;"	f
StartTag	vim82\autoload\xmlformat.vim	/^func! s:StartTag(tag) abort$/;"	f
StartTutorial	plugins\kaoriya\plugin\cmdex.vim	/^function! s:StartTutorial()$/;"	f
Starts_with_word	vim82\indent\awk.vim	/^function! s:Starts_with_word( line )$/;"	f
StatementIndent	vim82\indent\ada.vim	/^function s:StatementIndent( current_indent, prev_lnum )$/;"	f
Status	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:Status(argv)$/;"	f
Stmts.break	break	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.break	break $/;"	m
Stmts.case	case	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.case	case  in$/;"	m
Stmts.continue	continue	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.continue	continue $/;"	m
Stmts.elif	elif	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.elif	elif   $/;"	m
Stmts.exit	exit	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.exit	exit $/;"	m
Stmts.for	for	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.for	for  in $/;"	m
Stmts.function	()	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.function	() {$/;"	m
Stmts.if	if	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.if	if   $/;"	m
Stmts.if-else	if	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.if-else	if   $/;"	m
Stmts.return	return	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.return	return $/;"	m
Stmts.return-false	return	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.return-false	return 1$/;"	m
Stmts.return-true	return	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.return-true	return 0$/;"	m
Stmts.shift	shift	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.shift	shift $/;"	m
Stmts.trap	trap	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.trap	trap $/;"	m
Stmts.while	while	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Stmts.while	while   $/;"	m
Strftime2	plugins\kaoriya\plugin\autodate.vim	/^function! Strftime2(...)$/;"	f
String	vim82\plugin\logiPat.vim	/^func! s:String(str)$/;"	f
StripEndlineComments	vim82\indent\php.vim	/^function! StripEndlineComments (line)$/;"	f
Strlen	vim82\autoload\netrw.vim	/^fun! s:Strlen(x)$/;"	f
StructMembers	vim82\autoload\ccomplete.vim	/^function! s:StructMembers(typename, items, all)$/;"	f
SubName	vim82\tools\pltags.pl	/^sub SubName($)$/;"	s
SubmatchCount	vim82\indent\matlab.vim	/^function! s:SubmatchCount(lnum, pattern, ...)$/;"	f
SuperSub	vim82\syntax\tex.vim	/^  fun! s:SuperSub(group,leader,pat,cchar)$/;"	f
SwitchImport	plugins\golang\ftplugin\go\import.vim	/^function! s:SwitchImport(enabled, localname, path)$/;"	f
Syn	vim82\makemenu.vim	/^fun! <SID>Syn(arg)$/;"	f
SynAt	vim82\indent\javascript.vim	/^function s:SynAt(l,c)$/;"	f
SynColor	vim82\syntax\doxygen.vim	/^    command -nargs=+ SynColor hi def <args>$/;"	c
SynColor	vim82\syntax\syncolor.vim	/^    command -nargs=* SynColor hi <args>$/;"	c
SynColor	vim82\syntax\syncolor.vim	/^    command -nargs=* SynColor hi def <args>$/;"	c
SynColor	vim82\syntax\syncolor.vim	/^  command -nargs=* SynColor hi <args>$/;"	c
SynDisplay	vim82\syntax\inform.vim	/^command -nargs=+ SynDisplay syntax <args> display$/;"	c
SynFold	vim82\syntax\ruby.vim	/^com! -nargs=* SynFold call s:run_syntax_fold(<q-args>)$/;"	c
SynFold	vim82\syntax\yacc.vim	/^ com! -nargs=+ SynFold	<args> fold$/;"	c
SynFold	vim82\syntax\yacc.vim	/^ com! -nargs=+ SynFold	<args>$/;"	c
SynLink	vim82\syntax\doxygen.vim	/^    command -nargs=+ SynLink hi def link <args>$/;"	c
SynLink	vim82\syntax\syncolor.vim	/^    command -nargs=* SynLink hi def link <args>$/;"	c
SynLink	vim82\syntax\syncolor.vim	/^    command -nargs=* SynLink hi! link <args>$/;"	c
SynLink	vim82\syntax\syncolor.vim	/^  command -nargs=* SynLink hi link <args>$/;"	c
SynMenu	vim82\makemenu.vim	/^command! -nargs=* SynMenu call <SID>Syn(<q-args>)$/;"	c
SynOnOff	vim82\menu.vim	/^    fun s:SynOnOff()$/;"	f
SynSet	vim82\syntax\synload.vim	/^fun! s:SynSet()$/;"	f
SyntaxCSyntaxGroupItems	vim82\autoload\syntaxcomplete.vim	/^function! s:SyntaxCSyntaxGroupItems( group_name, syntax_full )$/;"	f
SystemVerilogIndent	vim82\indent\systemverilog.vim	/^function SystemVerilogIndent()$/;"	f
T	vim82\macros\hanoi\hanoi.vim	/^map T ko0$/;"	m
T	vim82\macros\life\life.vim	/^map T G,c2k,!9k,@,#j>2k,$j$/;"	m
T	vim82\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
T	vim82\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
T	vim82\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
T	vim82\macros\urm\urm.vim	/^map T y\$$/;"	m
T	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap T Y$/;"	m
TAPTestLine_foldtext	vim82\syntax\tap.vim	/^function! TAPTestLine_foldtext()$/;"	f
TOhtml	vim82\plugin\tohtml.vim	/^  command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)$/;"	c
Tab	vim82\ftplugin\cobol.vim	/^function! s:Tab()$/;"	f
Tag	vim82\ftplugin\pdf.vim	/^function! s:Tag()$/;"	f
Tag2item	vim82\autoload\ccomplete.vim	/^function! s:Tag2item(val)$/;"	f
TagContent	vim82\autoload\xmlformat.vim	/^func! s:TagContent(tag) abort "{{{1$/;"	f
TagFiles	vim82\menu.vim	/^fun! s:TagFiles()$/;"	f
Tagcmd2extra	vim82\autoload\ccomplete.vim	/^function! s:Tagcmd2extra(cmd, name, fname)$/;"	f
Tagline2item	vim82\autoload\ccomplete.vim	/^function! s:Tagline2item(val, brackets)$/;"	f
TarBrowseSelect	vim82\autoload\tar.vim	/^fun! s:TarBrowseSelect()$/;"	f
TcshGetIndent	vim82\indent\tcsh.vim	/^function TcshGetIndent()$/;"	f
TermDebugBalloonExpr	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func TermDebugBalloonExpr()$/;"	f
TermDebugSendCommand	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^func TermDebugSendCommand(cmd)$/;"	f
Termdebug	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^  command -nargs=* -complete=file -bang Termdebug echoerr s:err$/;"	c
Termdebug	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^command -nargs=* -complete=file -bang Termdebug call s:StartDebug(<bang>0, <f-args>)$/;"	c
TermdebugCommand	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^  command -nargs=+ -complete=file -bang TermdebugCommand echoerr s:err$/;"	c
TermdebugCommand	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^command -nargs=+ -complete=file -bang TermdebugCommand call s:StartDebugCommand(<bang>0, <f-args>)$/;"	c
Test.String	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.String is empty [ x = "x$" ]hhi$/;"	m
Test.String	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.String is not empty [ x != "x$" ]hhi$/;"	m
Test.Strings	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Strings is equal [ "" = "" ]hhhhhhhi$/;"	m
Test.Strings	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Strings is not equal [ "" != "" ]hhhhhhhhi$/;"	m
Test.Values	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Values is equal [  -eq  ]hhhhhhi$/;"	m
Test.Values	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Values is greater equal [  -ge  ]hhhhhhi$/;"	m
Test.Values	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Values is greater than [  -gt  ]hhhhhhi$/;"	m
Test.Values	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Values is less equal [  -le  ]hhhhhhi$/;"	m
Test.Values	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Values is less than [  -lt  ]hhhhhhi$/;"	m
Test.Values	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.Values is not equal [  -ne  ]hhhhhhi$/;"	m
Test.existence	[	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.existence	[ -e  ]hi$/;"	m
Test.existence	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.existence - directory	[ -d  ]hi$/;"	m
Test.existence	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.existence - executable	[ -x  ]hi$/;"	m
Test.existence	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.existence - file		[ -f  ]hi$/;"	m
Test.existence	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.existence - file (not empty)	[ -s  ]hi$/;"	m
Test.existence	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.existence - readable	[ -r  ]hi$/;"	m
Test.existence	vim82\pack\dist\opt\shellmenu\plugin\shellmenu.vim	/^imenu Test.existence - writable	[ -w  ]hi$/;"	m
TestFiletypeFuncs	vim82\filetype.vim	/^func! TestFiletypeFuncs(testlist)$/;"	f
TestURL	vim82\doc\test_urls.vim	/^func TestURL(url)$/;"	f
Test_check_URLs	vim82\doc\test_urls.vim	/^func Test_check_URLs()$/;"	f
Test_check_colors	vim82\colors\tools\check_colors.vim	/^func! Test_check_colors()$/;"	f
TexFold	vim82\syntax\tex.vim	/^ com! -nargs=* TexFold <args> $/;"	c
TexFold	vim82\syntax\tex.vim	/^ com! -nargs=* TexFold <args> fold $/;"	c
TexNewMathZone	vim82\syntax\tex.vim	/^ fun! TexNewMathZone(sfx,mathzone,starform)$/;"	f
Texplore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar       -count=0 -complete=dir	Texplore	call netrw#Explore(<count>,0,6        ,<q-args>)$/;"	c
TextWidth	vim82\menu.vim	/^fun! s:TextWidth()$/;"	f
Textwidth	vim82\autoload\xmlformat.vim	/^func! s:Textwidth() abort "{{{1$/;"	f
ThreadedTCPRequestHandler	vim82\tools\demoserver.py	/^class ThreadedTCPRequestHandler(socketserver.BaseRequestHandler):$/;"	c
ThreadedTCPServer	vim82\tools\demoserver.py	/^class ThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):$/;"	c
ToHankaku	plugins\kaoriya\plugin\hz_ja.vim	/^function! ToHankaku(str)$/;"	f
ToZenkaku	plugins\kaoriya\plugin\hz_ja.vim	/^function! ToZenkaku(str)$/;"	f
ToggleChar	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:ToggleChar(char)$/;"	f
ToggleGuiOption	vim82\menu.vim	/^fun! s:ToggleGuiOption(option)$/;"	f
ToggleHZ	plugins\kaoriya\plugin\hz_ja.vim	/^command! -nargs=0 -range ToggleHZ <line1>,<line2>call <SID>ToggleLineWise('Toggle')$/;"	c
ToggleLine	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:ToggleLine(line, startcolumn, endcolumn, operator)$/;"	f
ToggleLineWise	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:ToggleLineWise(operator) range$/;"	f
Token	vim82\indent\javascript.vim	/^function s:Token()$/;"	f
TokenizeLine	vim82\indent\erlang.vim	/^function! s:TokenizeLine(lnum, direction)$/;"	f
ToolBar.Paste		<C-R>+	vim82\menu.vim	/^  cnoremenu	 ToolBar.Paste		<C-R>+$/;"	m
ToolBar.Print		:hardcopy<CR>	vim82\menu.vim	/^    vnoremenu ToolBar.Print		:hardcopy<CR>$/;"	m
ToolBar.Print		:w	vim82\menu.vim	/^    vnoremenu ToolBar.Print		:w !lpr<CR>$/;"	m
ToolBar.Replace		y:promptrepl	vim82\menu.vim	/^    vnoremenu ToolBar.Replace		y:promptrepl <C-R>=<SID>FixFText()<CR><CR>$/;"	m
Transform	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=* -range Transform <line1>,<line2>call Transform(<f-args>)$/;"	c
Transform	plugins\kaoriya\plugin\cmdex.vim	/^function! Transform(from_str, to_str, ...)$/;"	f
TreeListMove	vim82\autoload\netrw.vim	/^fun! s:TreeListMove(dir)$/;"	f
TreeSqueezeDir	vim82\autoload\netrw.vim	/^fun! s:TreeSqueezeDir(islocal)$/;"	f
Trim	vim82\autoload\xmlformat.vim	/^func! s:Trim(item) abort$/;"	f
Tutorial	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 Tutorial call <SID>StartTutorial()$/;"	c
U	vim82\macros\hanoi\hanoi.vim	/^map U L$/;"	m
U	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap U G$/;"	m
USAGE	vim82\tools\ccfilter.c	/^const char USAGE[] =$/;"	v
USAGE	vim82\tools\shtags.pl	/^USAGE: $program [-kvwVx] [-t <file>] <files>$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^	 UWAGA:$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^  UWAGA: Litera  d  pojawi siÍ na dole ekranu. Vim czeka na wpisanie  w .$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^  UWAGA: Przeczytaj ca≥± lekcjÍ zanim wykonasz jakie∂ polecenia!!!$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA:  Mnoønik pomiÍdzy operatorem  d  i ruchem dzia≥a podobnie do ruchu bez$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA:  Moøesz uøywaÊ <BS> aby poprawiaÊ b≥Ídy w czasie pisania.$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: :q!<ENTER> porzuca wszelkie zmiany jakie zrobi≥e∂. W nastÍpnych$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Moøesz teø wczytaÊ wyj∂cie zewnÍtrznego polecenia. Na przyk≥ad$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Moøesz teø zobaczyÊ pozycjÍ kursora w prawym, dolnym rogu ekranu.$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: PamiÍtaj, by uczyÊ siÍ Êwicz±c, a nie pamiÍciowo.$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Po wykonaniu kroku 2. zobaczysz tekst z Lekcji 5.3. Potem przejdº$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Tryb Replace jest jak tryb Insert, ale kaødy znak usuwa istniej±cy$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Ucz siÍ przez Êwiczenie, nie wkuwanie.$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Uzupe≥nianie dzia≥a dla wielu poleceÒ. SprÛbuj wcisn±Ê CTRL-D i <TAB>.$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Wci∂niÍcie  v  zaczyna tryb Wizualny. Moøesz poruszaÊ kursorem, by$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Wci∂niÍcie <ESC> przeniesie CiÍ z powrotem do trybu Normal$/;"	l
UWAGA	vim82\tutor\tutor.pl	/^UWAGA: Wpisanie tylko ruchu w trybie Normal bez operatora przeniesie kursor$/;"	l
Undiff	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=0 Undiff set nodiff noscrollbind wrap nocursorbind$/;"	c
UnexpectedToken	vim82\indent\erlang.vim	/^function! s:UnexpectedToken(token, stack)$/;"	f
Unfinalise	vim82\ftplugin\debchangelog.vim	/^function Unfinalise()$/;"	f
UnfinaliseMenu	vim82\ftplugin\debchangelog.vim	/^function <SID>UnfinaliseMenu()$/;"	f
Update	vim82\optwin.vim	/^fun! <SID>Update(lnum, line, local, thiswin)$/;"	f
UpdateBuffersMenu	vim82\autoload\netrw.vim	/^fun! s:UpdateBuffersMenu()$/;"	f
Urgency	vim82\ftplugin\debchangelog.vim	/^function Urgency(urg)$/;"	f
Usage	vim82\tools\efm_perl.pl	/^Usage:$/;"	l
UseBufWinVars	vim82\autoload\netrw.vim	/^fun! s:UseBufWinVars()$/;"	f
UseVimball	vim82\plugin\vimballPlugin.vim	/^com! -nargs=? -complete=dir  UseVimball						call vimball#Vimball(1,<f-args>)$/;"	c
UserMaps	vim82\autoload\netrw.vim	/^fun! s:UserMaps(islocal,funcname)$/;"	f
Uwaga	vim82\tutor\tutor.pl	/^Uwaga:  'b≥ond' to nie jest metoda, by przeliterowaÊ b≥±d; 'b≥ond' to b≥±d.$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga:  Kiedy szukanie osi±gnie koniec pliku, bÍdzie kontynuowane od pocz±tku$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga:  W ten sposÛb moøna wykonaÊ wszystkie polecenia pow≥oki.$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga:  Wszystkie polecenia  :  musz± byÊ zakoÒczone <ENTER>.$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga:  a ,  i  oraz  A  prowadz± do trybu Insert, jedyn± rÛønic± jest miejsce,$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga: Aby ignorowaÊ wielko∂Ê liter dla jednego wyszukiwania: \/ignore\\c<ENTER>$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga: Aby usun±Ê pod∂wietlanie dopasowaÒ, wpisz:   :nohlsearch$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga: Je∂li nie jeste∂ pewien czego∂ co wpisa≥e∂, wci∂nij <ESC>, by wrÛciÊ do$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga: Klawisze kursora takøe powinny dzia≥aÊ, ale uøywaj±c  hjkl  bÍdziesz$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga: Ta funkcja jest bardzo uøyteczna w debuggowaniu programu$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga: Zauwaø, øe gdyby∂ teraz wyszed≥ z Vima, a nastÍpnie wszed≥ ponownie$/;"	l
Uwaga	vim82\tutor\tutor.pl	/^Uwaga: moøesz uøyÊ  y  jako operatora;  yw  kopiuje jeden wyraz.$/;"	l
V	vim82\macros\hanoi\hanoi.vim	/^map V Go\/$/;"	m
V	vim82\macros\life\life.vim	/^map V R$/;"	m
V	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap V K$/;"	m
VDsplit	plugins\kaoriya\plugin\cmdex.vim	/^command! -nargs=1 -complete=file VDsplit vertical diffsplit <args>$/;"	c
VERSION	vim82\tools\efm_perl.pl	/^use constant VERSION => 0.2;$/;"	c
ValidMatchEnd	vim82\indent\mp.vim	/^function! s:ValidMatchEnd(line, pat, start)$/;"	f
VarNames	vim82\tools\pltags.pl	/^sub VarNames($)$/;"	s
VbGetIndent	vim82\indent\vb.vim	/^fun! VbGetIndent(lnum)$/;"	f
VbSearch	vim82\ftplugin\vb.vim	/^fun! <SID>VbSearch(pattern, flags)$/;"	f
VerifyEnc	plugins\kaoriya\plugin\verifyenc.vim	/^command! -nargs=? VerifyEnc call <SID>Status(<q-args>)$/;"	c
VerifyEncoding	plugins\kaoriya\plugin\verifyenc.vim	/^  augroup VerifyEncoding$/;"	a
VerifyEncoding	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:VerifyEncoding()$/;"	f
Verify_cp932	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:Verify_cp932()$/;"	f
Verify_euc_jp	plugins\kaoriya\plugin\verifyenc.vim	/^function! s:Verify_euc_jp()$/;"	f
Vexplore	vim82\plugin\netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Vexplore	call netrw#Explore(<count>,1,4+<bang>0,<q-args>)$/;"	c
VimEnter	vim82\plugin\netrwPlugin.vim	/^fun! s:VimEnter(dirname)$/;"	f
VimFoldP	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldP <args> fold$/;"	c
VimFoldP	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldP <args>$/;"	c
VimFoldP	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldP	<args>$/;"	c
VimFolda	vim82\syntax\vim.vim	/^  com! -nargs=* VimFolda <args> fold$/;"	c
VimFolda	vim82\syntax\vim.vim	/^  com! -nargs=* VimFolda <args>$/;"	c
VimFolda	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFolda	<args>$/;"	c
VimFoldf	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldf <args> fold$/;"	c
VimFoldf	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldf <args>$/;"	c
VimFoldf	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldf	<args>$/;"	c
VimFoldh	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldh <args> fold$/;"	c
VimFoldh	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldh <args>$/;"	c
VimFoldh	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldh	<args>$/;"	c
VimFoldl	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldl <args> fold$/;"	c
VimFoldl	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldl <args>$/;"	c
VimFoldl	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldl	<args>$/;"	c
VimFoldm	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldm <args> fold$/;"	c
VimFoldm	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldm <args>$/;"	c
VimFoldm	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldm	<args>$/;"	c
VimFoldp	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldp <args> fold$/;"	c
VimFoldp	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldp <args>$/;"	c
VimFoldp	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldp	<args>$/;"	c
VimFoldr	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldr <args> fold$/;"	c
VimFoldr	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldr <args>$/;"	c
VimFoldr	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldr	<args>$/;"	c
VimFoldt	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldt <args> fold$/;"	c
VimFoldt	vim82\syntax\vim.vim	/^  com! -nargs=* VimFoldt <args>$/;"	c
VimFoldt	vim82\syntax\vim.vim	/^ com! -nargs=*	VimFoldt	<args>$/;"	c
VimFtpluginUndo	vim82\ftplugin\vim.vim	/^  func VimFtpluginUndo()$/;"	f
VimProcBang	plugins\vimproc\plugin\vimproc.vim	/^command! -nargs=+ -complete=shellcmd VimProcBang$/;"	c
VimProcInstall	plugins\vimproc\plugin\vimproc.vim	/^command! -nargs=* VimProcInstall$/;"	c
VimProcRead	plugins\vimproc\plugin\vimproc.vim	/^command! -nargs=+ -complete=shellcmd VimProcRead$/;"	c
Vimball	vim82\plugin\vimballPlugin.vim	/^augroup Vimball$/;"	a
VimballList	vim82\plugin\vimballPlugin.vim	/^com! -nargs=0                VimballList					call vimball#Vimball(0)$/;"	c
Vimuntar	vim82\plugin\tarPlugin.vim	/^com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)$/;"	c
VundleClean	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang                                          VundleClean   PluginClean<bang>$/;"	c
VundleDocs	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=0                                                VundleDocs    PluginDocs$/;"	c
VundleInstall	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleInstall PluginInstall<bang> <args>$/;"	c
VundleSearch	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=? -bang -complete=custom,vundle#scripts#complete VundleSearch  PluginSearch<bang> <args>$/;"	c
VundleUpdate	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com!                                                         VundleUpdate  PluginInstall!$/;"	c
VundleUpdate	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^com! -nargs=*       -complete=custom,vundle#scripts#complete VundleUpdate  PluginInstall! <args>$/;"	c
W	vim82\macros\life\life.vim	/^map W makh,3`ah,3`ajh,3($/;"	m
W	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap W <$/;"	m
WWidth	plugins\kaoriya\plugin\scrnmode.vim	/^command! -nargs=0 WWidth	call <SID>ScreenMode(2)$/;"	c
WarnIfNotUnfinalised	vim82\ftplugin\debchangelog.vim	/^function <SID>WarnIfNotUnfinalised()$/;"	f
Weight	vim82\indent\mp.vim	/^function! s:Weight(line)$/;"	f
Wholematch	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
WithPath	vim82\autoload\rust.vim	/^function! s:WithPath(func, ...)$/;"	f
Wydawca	vim82\tutor\tutor.pl	/^	Wydawca: Helion 2001 (O'Reilly) - wg 6. ang. wydania$/;"	l
Wydawca	vim82\tutor\tutor.pl	/^	Wydawca: Helion 2001 (O'Reilly).$/;"	l
Wydawca	vim82\tutor\tutor.pl	/^	Wydawca: New Riders$/;"	l
Wydawca	vim82\tutor\tutor.pl	/^	Wydawca: O'Reilly & Associates Inc.$/;"	l
X	vim82\macros\hanoi\hanoi.vim	/^map X x$/;"	m
X	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap X Q$/;"	m
XMLent	vim82\ftplugin\xml.vim	/^command! -nargs=? XMLent call xmlcomplete#CreateEntConnection(<f-args>)$/;"	c
XMLns	vim82\ftplugin\xml.vim	/^command! -nargs=+ XMLns call xmlcomplete#CreateConnection(<f-args>)$/;"	c
Xf86confdeclopt	vim82\syntax\xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained nextgroup=xf86confValue,xf86confComment skipwhite$/;"	c
Xf86confdeclopt	vim82\syntax\xf86conf.vim	/^	command -nargs=+ Xf86confdeclopt syn keyword xf86confOptionName <args> contained$/;"	c
XmlIndentComment	vim82\indent\xml.vim	/^func! <SID>XmlIndentComment(lnum)$/;"	f
XmlIndentGet	vim82\indent\xml.vim	/^fun! XmlIndentGet(lnum, use_syntax_check)$/;"	f
XmlIndentSum	vim82\indent\xml.vim	/^fun! <SID>XmlIndentSum(line, style, add)$/;"	f
XmlIndentSynCheck	vim82\indent\xml.vim	/^fun! <SID>XmlIndentSynCheck(lnum)$/;"	f
XmlIndentWithPattern	vim82\indent\xml.vim	/^fun! <SID>XmlIndentWithPattern(line, pat)$/;"	f
XxdBack	vim82\menu.vim	/^func s:XxdBack()$/;"	f
XxdConv	vim82\menu.vim	/^func s:XxdConv()$/;"	f
XxdFind	vim82\menu.vim	/^func s:XxdFind()$/;"	f
Y	vim82\macros\hanoi\hanoi.vim	/^map Y o0123456789Z0q$/;"	m
Y	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap Y F$/;"	m
Z	vim82\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	v
Z	vim82\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	v
Z	vim82\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
Z	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap Z :$/;"	m
Zenkaku	plugins\kaoriya\plugin\hz_ja.vim	/^command! -nargs=0 -range Zenkaku <line1>,<line2>call <SID>ToggleLineWise('Zenkaku')$/;"	c
ZenkakuChar	plugins\kaoriya\plugin\hz_ja.vim	/^function! s:ZenkakuChar(char)$/;"	f
ZimbuGoEndBlock	vim82\ftplugin\zimbu.vim	/^func! ZimbuGoEndBlock()$/;"	f
ZimbuGoStartBlock	vim82\ftplugin\zimbu.vim	/^func! ZimbuGoStartBlock()$/;"	f
ZipBrowseSelect	vim82\autoload\zip.vim	/^fun! s:ZipBrowseSelect()$/;"	f
[	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap [ \/$/;"	m
["	vim82\ftplugin\vim.vim	/^  nnoremap <silent><buffer> [" :call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
["	vim82\ftplugin\vim.vim	/^  vnoremap <silent><buffer> [" :<C-U>exe "normal! gv"<Bar>call search('\\%(^\\s*".*\\n\\)\\%(^\\s*"\\)\\@!', "bW")<CR>$/;"	m
["!"] 	lua\jit\dis_x86.lua	/^  ["!"] = function(ctx, name, pat)$/;"	f
[""] 	lua\jit\dis_x86.lua	/^  [""] = function(ctx, name, pat)$/;"	f
["*"] 	lua\jit\dis_x86.lua	/^  ["*"] = function(ctx, name, pat)$/;"	f
[":"] 	lua\jit\dis_x86.lua	/^  [":"] = function(ctx, name, pat)$/;"	f
["CONV  "] 	lua\jit\dump.lua	/^  ["CONV  "] = setmetatable({}, { __index = function(t, mode)$/;"	f
["SLOAD "] 	lua\jit\dump.lua	/^  ["SLOAD "] = setmetatable({}, { __index = function(t, mode)$/;"	f
[#	vim82\ftplugin\hamster.vim	/^noremap <silent><buffer> [# :call search('^\\s*#\\@!', "bW")<CR>$/;"	m
[%	vim82\ftplugin\eiffel.vim	/^  noremap  [% <Nop>$/;"	m
[%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nmap <silent> [% <Plug>(MatchitNormalMultiBackward)$/;"	m
[%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^omap <silent> [% <Plug>(MatchitOperationMultiBackward)$/;"	m
[-	vim82\ftplugin\eiffel.vim	/^  nnoremap <silent> <buffer> [- :<C-U>call <SID>DoMotion(comment_block_end, 1, 'Wb')<CR>$/;"	m
[<C-D>	vim82\ftplugin\cucumber.vim	/^  nnoremap <silent> <script> <buffer> [<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldopen<CR>$/;"	m
[M	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'b','n')<CR>$/;"	m
[[	vim82\ftplugin\abaqus.vim	/^noremap <silent><buffer> [[ ?^\\*\\a<CR>:nohlsearch<CR>$/;"	m
[[	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> [[ m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\s*\\.','bW')<CR>$/;"	m
[[	vim82\ftplugin\context.vim	/^nnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:false) <CR>$/;"	m
[[	vim82\ftplugin\context.vim	/^vnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:true)  <CR>$/;"	m
[[	vim82\ftplugin\eiffel.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>DoMotion(sections, v:count1, 'Wb')<CR>$/;"	m
[[	vim82\ftplugin\hamster.vim	/^noremap <silent><buffer> [[ :call search('^\\s*sub\\>', "bW")<CR>$/;"	m
[[	vim82\ftplugin\j.vim	/^noremap <buffer> <silent> [[ :<C-U>call <SID>SearchSection(0, 1, '')<CR>$/;"	m
[[	vim82\ftplugin\mf.vim	/^nnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:false) <CR>$/;"	m
[[	vim82\ftplugin\mf.vim	/^vnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:true)  <CR>$/;"	m
[[	vim82\ftplugin\mp.vim	/^nnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:false) <CR>$/;"	m
[[	vim82\ftplugin\mp.vim	/^vnoremap <silent><buffer> [[ :<C-U>call <SID>move_around(v:count1, "beginsection", "bW", v:true)  <CR>$/;"	m
[[	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [[ :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
[[	vim82\ftplugin\rust.vim	/^nnoremap <silent> <buffer> [[ :call rust#Jump('n', 'Back')<CR>$/;"	m
[[	vim82\ftplugin\rust.vim	/^onoremap <silent> <buffer> [[ :call rust#Jump('o', 'Back')<CR>$/;"	m
[[	vim82\ftplugin\sql.vim	/^nnoremap <buffer> <silent> [[ :call search('\\c^\\s*begin\\>', 'bW' )<CR>$/;"	m
[[	vim82\ftplugin\vb.vim	/^nnoremap <buffer> <silent> [[ :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[[	vim82\ftplugin\vhdl.vim	/^noremap  <buffer><silent>[[ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[[	vim82\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>[[ :<C-u>cal <SID>CountWrapper('[[')<CR>$/;"	m
[[	vim82\ftplugin\vim.vim	/^  nnoremap <silent><buffer> [[ m':call search('^\\s*\\(fu\\%[nction]\\\\|def\\)\\>', "bW")<CR>$/;"	m
[[	vim82\ftplugin\vim.vim	/^  vnoremap <silent><buffer> [[ m':<C-U>exe "normal! gv"<Bar>call search('^\\s*\\(fu\\%[nction]\\\\|def\\)\\>', "bW")<CR>$/;"	m
[[	vim82\ftplugin\zimbu.vim	/^  nnoremap <silent> <buffer> [[ m`:call ZimbuGoStartBlock()<CR>$/;"	m
[]	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> [] m':call <SID>toend('b')<CR>$/;"	m
[]	vim82\ftplugin\context.vim	/^nnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:false) <CR>$/;"	m
[]	vim82\ftplugin\context.vim	/^vnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:true)  <CR>$/;"	m
[]	vim82\ftplugin\hamster.vim	/^noremap <silent><buffer> [] :call search('^\\s*endsub\\>', "bW")<CR>$/;"	m
[]	vim82\ftplugin\j.vim	/^noremap <buffer> <silent> [] :<C-U>call <SID>SearchSection(1, 1, '')<CR>$/;"	m
[]	vim82\ftplugin\mf.vim	/^nnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:false) <CR>$/;"	m
[]	vim82\ftplugin\mf.vim	/^vnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:true)  <CR>$/;"	m
[]	vim82\ftplugin\mp.vim	/^nnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:false) <CR>$/;"	m
[]	vim82\ftplugin\mp.vim	/^vnoremap <silent><buffer> [] :<C-U>call <SID>move_around(v:count1, "endsection",   "bW", v:true)  <CR>$/;"	m
[]	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [] :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'b','n')<CR>$/;"	m
[]	vim82\ftplugin\sql.vim	/^nnoremap <buffer> <silent> [] :call search('\\c^\\s*end\\W*$', 'bW' )<CR>$/;"	m
[]	vim82\ftplugin\vb.vim	/^nnoremap <buffer> <silent> [] :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'bW')<cr>$/;"	m
[]	vim82\ftplugin\vhdl.vim	/^noremap  <buffer><silent>[] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%^","bW")')<CR>$/;"	m
[]	vim82\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>[] :<C-u>cal <SID>CountWrapper('[]')<CR>$/;"	m
[]	vim82\ftplugin\vim.vim	/^  nnoremap <silent><buffer> [] m':call search('^\\s*end\\(f\\%[unction]\\\\|def\\)\\>', "bW")<CR>$/;"	m
[]	vim82\ftplugin\vim.vim	/^  vnoremap <silent><buffer> [] m':<C-U>exe "normal! gv"<Bar>call search('^\\s*end\\(f\\%[unction]\\\\|def\\)\\>', "bW")<CR>$/;"	m
[d	vim82\ftplugin\cucumber.vim	/^  nnoremap <silent> <script> <buffer> [d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
[m	vim82\ftplugin\eiffel.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>DoFeatureMotion(v:count1, 'Wb')<CR>$/;"	m
[m	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> [m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'b','n')<CR>$/;"	m
[{	vim82\ftplugin\context.vim	/^nnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:false) <CR>$/;"	m
[{	vim82\ftplugin\context.vim	/^vnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:true)  <CR>$/;"	m
[{	vim82\ftplugin\mf.vim	/^nnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:false) <CR>$/;"	m
[{	vim82\ftplugin\mf.vim	/^vnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:true)  <CR>$/;"	m
[{	vim82\ftplugin\mp.vim	/^nnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:false) <CR>$/;"	m
[{	vim82\ftplugin\mp.vim	/^vnoremap <silent><buffer> [{ :<C-U>call <SID>move_around(v:count1, "beginblock",   "bW", v:true)  <CR>$/;"	m
]	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap ] =$/;"	m
]"	vim82\ftplugin\vim.vim	/^  nnoremap <silent><buffer> ]" :call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
]"	vim82\ftplugin\vim.vim	/^  vnoremap <silent><buffer> ]" :<C-U>exe "normal! gv"<Bar>call search('^\\(\\s*".*\\n\\)\\@<!\\(\\s*"\\)', "W")<CR>$/;"	m
]#	vim82\ftplugin\hamster.vim	/^noremap <silent><buffer> ]# :call search('^\\s*#\\@!', "W")<CR>$/;"	m
]%	vim82\ftplugin\eiffel.vim	/^  noremap  ]% <Nop>$/;"	m
]%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nmap <silent> ]% <Plug>(MatchitNormalMultiForward)$/;"	m
]%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^omap <silent> ]% <Plug>(MatchitOperationMultiForward)$/;"	m
]-	vim82\ftplugin\eiffel.vim	/^  nnoremap <silent> <buffer> ]- :<C-U>call <SID>DoMotion(comment_block_start, 1, 'W')<CR>$/;"	m
]<C-D>	vim82\ftplugin\cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]<C-D>      :<C-U>exe <SID>jump('edit',v:count)<SID>foldopen<CR>$/;"	m
]M	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ]M :<C-U>call <SID>searchsyn('\\<end\\>',['rubyDefine'],'','n')<CR>$/;"	m
][	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> ][ m':call <SID>toend('')<CR>$/;"	m
][	vim82\ftplugin\context.vim	/^nnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:false) <CR>$/;"	m
][	vim82\ftplugin\context.vim	/^vnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:true)  <CR>$/;"	m
][	vim82\ftplugin\hamster.vim	/^noremap <silent><buffer> ][ :call search('^\\s*endsub\\>', "W")<CR>$/;"	m
][	vim82\ftplugin\j.vim	/^noremap <buffer> <silent> ][ :<C-U>call <SID>SearchSection(1, 0, '')<CR>$/;"	m
][	vim82\ftplugin\mf.vim	/^nnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:false) <CR>$/;"	m
][	vim82\ftplugin\mf.vim	/^vnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:true)  <CR>$/;"	m
][	vim82\ftplugin\mp.vim	/^nnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:false) <CR>$/;"	m
][	vim82\ftplugin\mp.vim	/^vnoremap <silent><buffer> ][ :<C-U>call <SID>move_around(v:count1, "endsection",   "W",  v:true)  <CR>$/;"	m
][	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ][ :<C-U>call <SID>searchsyn('\\<end\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
][	vim82\ftplugin\sql.vim	/^nnoremap <buffer> <silent> ][ :call search('\\c^\\s*end\\W*$', 'W' )<CR>$/;"	m
][	vim82\ftplugin\vb.vim	/^nnoremap <buffer> <silent> ][ :call <SID>VbSearch('^\\s*\\<end\\>\\s\\+\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
][	vim82\ftplugin\vhdl.vim	/^noremap  <buffer><silent>][ :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\<end\\\\s\\\\+".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
][	vim82\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>][ :<C-u>cal <SID>CountWrapper('][')<CR>$/;"	m
][	vim82\ftplugin\vim.vim	/^  nnoremap <silent><buffer> ][ m':call search('^\\s*end\\(f\\%[unction]\\\\|def\\)\\>', "W")<CR>$/;"	m
][	vim82\ftplugin\vim.vim	/^  vnoremap <silent><buffer> ][ m':<C-U>exe "normal! gv"<Bar>call search('^\\s*end\\(f\\%[unction]\\\\|def\\)\\>', "W")<CR>$/;"	m
]]	vim82\ftplugin\abaqus.vim	/^noremap <silent><buffer> ]] \/^\\*\\a<CR>:nohlsearch<CR>$/;"	m
]]	vim82\ftplugin\cobol.vim	/^    noremap <silent> <buffer> ]] m':call search('\\c^\\%(\\s*\\<Bar>.\\{6\\}\\s\\+\\)\\zs[A-Za-z0-9-]\\+\\s\\+\\%(division\\<Bar>section\\)\\.','W')<CR>$/;"	m
]]	vim82\ftplugin\context.vim	/^nnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:false) <CR>$/;"	m
]]	vim82\ftplugin\context.vim	/^vnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:true)  <CR>$/;"	m
]]	vim82\ftplugin\eiffel.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>DoMotion(sections, v:count1, 'W')<CR>$/;"	m
]]	vim82\ftplugin\hamster.vim	/^noremap <silent><buffer> ]] :call search('^\\s*sub\\>', "W")<CR>$/;"	m
]]	vim82\ftplugin\j.vim	/^noremap <buffer> <silent> ]] :<C-U>call <SID>SearchSection(0, 0, '')<CR>$/;"	m
]]	vim82\ftplugin\mf.vim	/^nnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:false) <CR>$/;"	m
]]	vim82\ftplugin\mf.vim	/^vnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:true)  <CR>$/;"	m
]]	vim82\ftplugin\mp.vim	/^nnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:false) <CR>$/;"	m
]]	vim82\ftplugin\mp.vim	/^vnoremap <silent><buffer> ]] :<C-U>call <SID>move_around(v:count1, "beginsection", "W",  v:true)  <CR>$/;"	m
]]	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ]] :<C-U>call <SID>searchsyn('\\<\\%(class\\<Bar>module\\)\\>',['rubyModule','rubyClass'],'','n')<CR>$/;"	m
]]	vim82\ftplugin\rust.vim	/^nnoremap <silent> <buffer> ]] :call rust#Jump('n', 'Forward')<CR>$/;"	m
]]	vim82\ftplugin\rust.vim	/^onoremap <silent> <buffer> ]] :call rust#Jump('o', 'Forward')<CR>$/;"	m
]]	vim82\ftplugin\sql.vim	/^nnoremap <buffer> <silent> ]] :call search('\\c^\\s*begin\\>', 'W' )<CR>$/;"	m
]]	vim82\ftplugin\vb.vim	/^nnoremap <buffer> <silent> ]] :call <SID>VbSearch('^\\s*\\(\\(private\\|public\\)\\s\\+\\)\\=\\(function\\\\|sub\\)', 'W')<cr>$/;"	m
]]	vim82\ftplugin\vhdl.vim	/^noremap  <buffer><silent>]] :<C-u>cal <SID>CountWrapper(':cal search("\\\\%(--.*\\\\)\\\\@<!\\\\%(\\\\<end\\\\s\\\\+\\\\)\\\\@<!\\\\<".b:vhdl_explore."\\\\>\\\\c\\\\<Bar>\\\\%$","W")')<CR>$/;"	m
]]	vim82\ftplugin\vhdl.vim	/^vnoremap <buffer><silent>]] :<C-u>cal <SID>CountWrapper(']]')<CR>$/;"	m
]]	vim82\ftplugin\vim.vim	/^  nnoremap <silent><buffer> ]] m':call search('^\\s*\\(fu\\%[nction]\\\\|def\\)\\>', "W")<CR>$/;"	m
]]	vim82\ftplugin\vim.vim	/^  vnoremap <silent><buffer> ]] m':<C-U>exe "normal! gv"<Bar>call search('^\\s*\\(fu\\%[nction]\\\\|def\\)\\>', "W")<CR>$/;"	m
]]	vim82\ftplugin\zimbu.vim	/^  nnoremap <silent> <buffer> ]] m`:call ZimbuGoEndBlock()<CR>$/;"	m
]d	vim82\ftplugin\cucumber.vim	/^  nnoremap <silent> <script> <buffer> ]d          :<C-U>exe <SID>jump('pedit',v:count)<CR>$/;"	m
]m	vim82\ftplugin\eiffel.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>DoFeatureMotion(v:count1, 'W')<CR>$/;"	m
]m	vim82\ftplugin\ruby.vim	/^  nnoremap <silent> <buffer> ]m :<C-U>call <SID>searchsyn('\\<def\\>',['rubyDefine'],'','n')<CR>$/;"	m
]}	vim82\ftplugin\context.vim	/^nnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:false) <CR>$/;"	m
]}	vim82\ftplugin\context.vim	/^vnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:true)  <CR>$/;"	m
]}	vim82\ftplugin\mf.vim	/^nnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:false) <CR>$/;"	m
]}	vim82\ftplugin\mf.vim	/^vnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:true)  <CR>$/;"	m
]}	vim82\ftplugin\mp.vim	/^nnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:false) <CR>$/;"	m
]}	vim82\ftplugin\mp.vim	/^vnoremap <silent><buffer> ]} :<C-U>call <SID>move_around(v:count1, "endblock",     "W",  v:true)  <CR>$/;"	m
_	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap _ {$/;"	m
__CCFILTER_C__	vim82\tools\ccfilter.c	14;"	d	file:
__call 	lua\jit\zone.lua	/^  __call = function(t, zone)$/;"	f
_j	vim82\pack\dist\opt\justify\plugin\justify.vim	/^nmap _j :%call Justify('tw',4)<CR>$/;"	m
_j	vim82\pack\dist\opt\justify\plugin\justify.vim	/^vmap _j :call Justify('tw',4)<CR>$/;"	m
a	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap a a$/;"	m
a$	vim82\ftplugin\context.vim	/^  onoremap <silent><buffer> a$ :<c-u>normal! F$vf$<cr>$/;"	m
a$	vim82\ftplugin\context.vim	/^  vnoremap <buffer> a$ F$of\$$/;"	m
a%	vim82\ftplugin\eiffel.vim	/^  vnoremap a% <Nop>$/;"	m
aM	vim82\ftplugin\ruby.vim	/^    onoremap <silent> <buffer> aM :<C-U>call <SID>wrap_a('[[','][')<CR>$/;"	m
ada#Completion	vim82\autoload\ada.vim	/^function ada#Completion (cmd)$/;"	f
ada#Completion_End	vim82\autoload\ada.vim	/^function ada#Completion_End ()$/;"	f
ada#Create_Tags	vim82\autoload\ada.vim	/^function ada#Create_Tags (option)$/;"	f
ada#Insert_Backspace	vim82\autoload\ada.vim	/^function ada#Insert_Backspace ()$/;"	f
ada#Jump_Tag	vim82\autoload\ada.vim	/^function ada#Jump_Tag (Word, Mode)$/;"	f
ada#List_Tag	vim82\autoload\ada.vim	/^function ada#List_Tag (...)$/;"	f
ada#Map_Menu	vim82\autoload\ada.vim	/^function ada#Map_Menu (Text, Keys, Command)$/;"	f
ada#Map_Popup	vim82\autoload\ada.vim	/^function ada#Map_Popup (Text, Keys, Command)$/;"	f
ada#Pretty_Print_Folding	vim82\autoload\ada.vim	/^   function ada#Pretty_Print_Folding (Line)			     " {{{2$/;"	f
ada#Switch_Session	vim82\autoload\ada.vim	/^function ada#Switch_Session (New_Session)$/;"	f
ada#Switch_Syntax_Option	vim82\autoload\ada.vim	/^function ada#Switch_Syntax_Option (option)$/;"	f
ada#User_Complete	vim82\autoload\ada.vim	/^function! ada#User_Complete(findstart, base)$/;"	f
ada#Word	vim82\autoload\ada.vim	/^function ada#Word (...)$/;"	f
adacomplete#Complete	vim82\autoload\adacomplete.vim	/^function! adacomplete#Complete (findstart, base)$/;"	f
afold	vim82\syntax\2html.vim	/^	  let afold.firstline = g:html_start_line$/;"	v
afold	vim82\syntax\2html.vim	/^	let afold.firstline = g:html_start_line$/;"	v
afold	vim82\syntax\2html.vim	/^      let afold.level -= leveladjust$/;"	v
aligned	lua\jit\bcsave.lua	/^  local function aligned(v, a) return bit.band(v+a-1, -a) end$/;"	f
allsteps	vim82\ftplugin\cucumber.vim	/^function! s:allsteps()$/;"	f
am	vim82\ftplugin\ruby.vim	/^    onoremap <silent> <buffer> am :<C-U>call <SID>wrap_a('[m',']M')<CR>$/;"	m
at	vim82\indent\testdir\runtest.vim	/^	    let at = substitute(text, '.*INDENT_\\(\\S*\\).*', '\\1', '')$/;"	v
at	vim82\indent\testdir\runtest.vim	/^	let at = ''$/;"	v
at	vim82\syntax\sed.vim	/^let __at = char2nr("@")$/;"	v
autofmt#compat#formatexpr	plugins\autofmt\autoload\autofmt\compat.vim	/^function autofmt#compat#formatexpr()$/;"	f
autofmt#compat#import	plugins\autofmt\autoload\autofmt\compat.vim	/^function autofmt#compat#import()$/;"	f
autofmt#japanese#formatexpr	plugins\autofmt\autoload\autofmt\japanese.vim	/^function autofmt#japanese#formatexpr()$/;"	f
autofmt#japanese#import	plugins\autofmt\autoload\autofmt\japanese.vim	/^function autofmt#japanese#import()$/;"	f
autofmt#uax14#formatexpr	plugins\autofmt\autoload\autofmt\uax14.vim	/^function autofmt#uax14#formatexpr()$/;"	f
autofmt#uax14#import	plugins\autofmt\autoload\autofmt\uax14.vim	/^function autofmt#uax14#import()$/;"	f
autofmt#unicode#import	plugins\autofmt\autoload\autofmt\unicode.vim	/^function autofmt#unicode#import()$/;"	f
b	vim82\macros\less.vim	/^noremap <script> b <C-B><SID>L$/;"	m
b	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap b x$/;"	m
b:	vim82\syntax\liquid.vim	/^      let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:	vim82\syntax\markdown.vim	/^    let b:{matchstr(s:type,'[^.]*')}_subtype = matchstr(s:type,'\\.\\zs.*')$/;"	v
b:InPHPcode	vim82\indent\php.vim	/^let b:InPHPcode = 0$/;"	v
b:InPHPcode_and_script	vim82\indent\php.vim	/^let b:InPHPcode_and_script = 0$/;"	v
b:InPHPcode_checked	vim82\indent\php.vim	/^let b:InPHPcode_checked = 0$/;"	v
b:InPHPcode_tofind	vim82\indent\php.vim	/^let b:InPHPcode_tofind = ""$/;"	v
b:MATLAB_bracketlevel	vim82\indent\matlab.vim	/^let b:MATLAB_bracketlevel = 0$/;"	v
b:MATLAB_function_indent	vim82\indent\matlab.vim	/^let b:MATLAB_function_indent = get(g:, 'MATLAB_function_indent', 2)$/;"	v
b:MATLAB_lastline	vim82\indent\matlab.vim	/^let b:MATLAB_lastline = -1$/;"	v
b:MATLAB_lasttick	vim82\indent\matlab.vim	/^let b:MATLAB_lasttick = -1$/;"	v
b:MATLAB_waslc	vim82\indent\matlab.vim	/^let b:MATLAB_waslc = 0$/;"	v
b:PHP_BracesAtCodeLevel	vim82\indent\php.vim	/^    let b:PHP_BracesAtCodeLevel = 0$/;"	v
b:PHP_BracesAtCodeLevel	vim82\indent\php.vim	/^    let b:PHP_BracesAtCodeLevel = PHP_BracesAtCodeLevel$/;"	v
b:PHP_CurrentIndentLevel	vim82\indent\php.vim	/^let b:PHP_CurrentIndentLevel = b:PHP_default_indenting$/;"	v
b:PHP_IndentFunctionCallParameters	vim82\indent\php.vim	/^    let b:PHP_IndentFunctionCallParameters = 0$/;"	v
b:PHP_IndentFunctionCallParameters	vim82\indent\php.vim	/^    let b:PHP_IndentFunctionCallParameters = PHP_IndentFunctionCallParameters$/;"	v
b:PHP_IndentFunctionDeclarationParameters	vim82\indent\php.vim	/^    let b:PHP_IndentFunctionDeclarationParameters = 0$/;"	v
b:PHP_IndentFunctionDeclarationParameters	vim82\indent\php.vim	/^    let b:PHP_IndentFunctionDeclarationParameters = PHP_IndentFunctionDeclarationParameters$/;"	v
b:PHP_InsideMultilineComment	vim82\indent\php.vim	/^let b:PHP_InsideMultilineComment = 0$/;"	v
b:PHP_LastIndentedWasComment	vim82\indent\php.vim	/^let b:PHP_LastIndentedWasComment = 0$/;"	v
b:PHP_autoformatcomment	vim82\indent\php.vim	/^    let b:PHP_autoformatcomment = 1$/;"	v
b:PHP_autoformatcomment	vim82\indent\php.vim	/^    let b:PHP_autoformatcomment = PHP_autoformatcomment$/;"	v
b:PHP_default_indenting	vim82\indent\php.vim	/^    let b:PHP_default_indenting = 0$/;"	v
b:PHP_default_indenting	vim82\indent\php.vim	/^    let b:PHP_default_indenting = PHP_default_indenting * shiftwidth()$/;"	v
b:PHP_indentbeforelast	vim82\indent\php.vim	/^let b:PHP_indentbeforelast = 0$/;"	v
b:PHP_indentinghuge	vim82\indent\php.vim	/^let b:PHP_indentinghuge = 0$/;"	v
b:PHP_lastindented	vim82\indent\php.vim	/^let b:PHP_lastindented = 0$/;"	v
b:PHP_noArrowMatching	vim82\indent\php.vim	/^    let b:PHP_noArrowMatching = 0$/;"	v
b:PHP_noArrowMatching	vim82\indent\php.vim	/^    let b:PHP_noArrowMatching = PHP_noArrowMatching$/;"	v
b:PHP_oldchangetick	vim82\indent\php.vim	/^let b:PHP_oldchangetick = b:changedtick$/;"	v
b:PHP_outdentSLComments	vim82\indent\php.vim	/^    let b:PHP_outdentSLComments = 0$/;"	v
b:PHP_outdentSLComments	vim82\indent\php.vim	/^    let b:PHP_outdentSLComments = PHP_outdentSLComments * shiftwidth()$/;"	v
b:PHP_outdentphpescape	vim82\indent\php.vim	/^    let b:PHP_outdentphpescape = 1$/;"	v
b:PHP_outdentphpescape	vim82\indent\php.vim	/^    let b:PHP_outdentphpescape = PHP_outdentphpescape$/;"	v
b:PHP_vintage_case_default_indent	vim82\indent\php.vim	/^    let b:PHP_vintage_case_default_indent = 0$/;"	v
b:PHP_vintage_case_default_indent	vim82\indent\php.vim	/^    let b:PHP_vintage_case_default_indent = 1$/;"	v
b:RstFoldCache	vim82\autoload\RstFold.vim	/^  let b:RstFoldCache = closure.levels$/;"	v
b:UserIsTypingComment	vim82\indent\php.vim	/^let b:UserIsTypingComment = 0$/;"	v
b:autohotkey_syntax_sync_minlines	vim82\syntax\autohotkey.vim	/^  let b:autohotkey_syntax_sync_minlines = 50$/;"	v
b:autohotkey_syntax_sync_minlines	vim82\syntax\autohotkey.vim	/^  let b:autohotkey_syntax_sync_minlines = g:autohotkey_syntax_sync_minlines$/;"	v
b:bdf_minlines	vim82\syntax\bdf.vim	/^  let b:bdf_minlines = 30$/;"	v
b:bdf_minlines	vim82\syntax\bdf.vim	/^  let b:bdf_minlines = bdf_minlines$/;"	v
b:browsefilter	vim82\ftplugin\abap.vim	/^  let b:browsefilter = "ABAP Source Files (*.abap)\\t*.abap\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\abaqus.vim	/^    let b:browsefilter = "Abaqus Input Files (*.inp *.inc)\\t*.inp;*.inc\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\ant.vim	/^    let b:browsefilter = "Build Files (build.xml)\\tbuild.xml\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\aspvbs.vim	/^    let  b:browsefilter="ASP Files (*.asp)\\t*.asp\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\c.vim	/^    let b:browsefilter = "C Source Files (*.c)\\t*.c\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\c.vim	/^    let b:browsefilter = "C++ Source Files (*.cpp *.c++)\\t*.cpp;*.c++\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\c.vim	/^    let b:browsefilter = "Ch Source Files (*.ch *.chf)\\t*.ch;*.chf\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\clojure.vim	/^	let b:browsefilter = "Clojure Source Files (*.clj)\\t*.clj\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\cobol.vim	/^  let b:browsefilter = "COBOL Source Files (*.cbl, *.cob)\\t*.cbl;*.cob;*.lib\\n".$/;"	v
b:browsefilter	vim82\ftplugin\config.vim	/^    let  b:browsefilter="Configure Scripts (configure.*, config.*)\\tconfigure*;config.*\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\cs.vim	/^    let b:browsefilter = "C# Source Files (*.cs)\\t*.cs\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\csh.vim	/^    let  b:browsefilter="csh Scripts (*.csh)\\t*.csh\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\dosbatch.vim	/^  let b:browsefilter = "DOS Batch Files (*.bat, *.cmd)\\t*.bat;*.cmd\\nAll Files (*.*)\\t*.*\\n"$/;"	v
b:browsefilter	vim82\ftplugin\dtd.vim	/^    let  b:browsefilter="DTD Files (*.dtd)\\t*.dtd\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\eiffel.vim	/^  let b:browsefilter = "Eiffel Source Files (*.e)\\t*.e\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\eruby.vim	/^  let b:browsefilter="eRuby Files (*.erb, *.rhtml)\\t*.erb;*.rhtml\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\falcon.vim	/^  let b:browsefilter = "Falcon Source Files (*.fal *.ftd)\\t*.fal;*.ftd\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\fortran.vim	/^  let b:browsefilter = "Fortran Files (*.f;*.for;*.f77;*.f90;*.f95;*.f03;*.f08;*.fpp;*.ftn)\\t*.f;*.for;*.f77;*.f90;*.f95;*.f03;*.f08;*.fpp;*.ftn\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\haml.vim	/^  let b:browsefilter="Haml Files (*.haml)\\t*.haml\\nSass Files (*.sass)\\t*.sass\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\html.vim	/^    let  b:browsefilter="HTML Files (*.html,*.htm)\\t*.htm;*.html\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\ishd.vim	/^    let b:browsefilter = "InstallShield Files (*.rul)\\t*.rul\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\j.vim	/^  let b:browsefilter = "J Script Files (*.ijs)\\t*.ijs\\n"$/;"	v
b:browsefilter	vim82\ftplugin\java.vim	/^    let  b:browsefilter="Java Files (*.java)\\t*.java\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\javascript.vim	/^    let  b:browsefilter="Javascript Files (*.js)\\t*.js\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\jsp.vim	/^    let  b:browsefilter="JSP Files (*.jsp)\\t*.jsp\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\kwt.vim	/^    let b:browsefilter = "Kimwitu\/Kimwitu++ Files (*.k)\\t*.k\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\liquid.vim	/^  let b:browsefilter = "\\n".b:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\liquid.vim	/^  let b:browsefilter = ''$/;"	v
b:browsefilter	vim82\ftplugin\liquid.vim	/^  let b:browsefilter="Liquid Files (*.liquid)\\t*.liquid" . b:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\msmessages.vim	/^  let b:browsefilter = "MS Message Files (*.mc)\\t*.mc\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\occam.vim	/^  let b:browsefilter = "All Occam Files (*.occ *.inc)\\t*.occ;*.inc\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\perl.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\perl6.vim	/^    let b:browsefilter = "Perl Source Files (*.pl)\\t*.pl\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\php.vim	/^    let  b:browsefilter="PHP Files (*.php)\\t*.php\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\postscr.vim	/^  let b:browsefilter = "PostScript Files (*.ps)\\t*.ps\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\pyrex.vim	/^    let  b:browsefilter = "Pyrex files (*.pyx,*.pxd)\\t*.pyx;*.pxd\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\python.vim	/^    let b:browsefilter = "Python Files (*.py)\\t*.py\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\r.vim	/^  let b:browsefilter = "R Source Files (*.R)\\t*.R\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\registry.vim	/^   let b:browsefilter =$/;"	v
b:browsefilter	vim82\ftplugin\rhelp.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rrst\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\rmd.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rrst\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\rnoweb.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rrst\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\rrst.vim	/^  let b:browsefilter = "R Source Files (*.R *.Rnw *.Rd *.Rmd *.Rrst)\\t*.R;*.Rnw;*.Rd;*.Rmd;*.Rrst\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\ruby.vim	/^  let b:browsefilter = "Ruby Source Files (*.rb)\\t*.rb\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\sgml.vim	/^    let  b:browsefilter="SGML Files (*.sgml,*.sgm)\\t*.sgm*\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\sh.vim	/^    let  b:browsefilter="Bourne Shell Scripts (*.sh)\\t*.sh\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\sql.vim	/^    let b:browsefilter = "SQL Files (*.sql)\\t*.sql\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\svg.vim	/^    let  b:browsefilter="SVG Files (*.svg)\\t*.svg\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\tcl.vim	/^    let b:browsefilter = "Tcl Source Files (.tcl)\\t*.tcl\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\tcsh.vim	/^    let  b:browsefilter="tcsh Scripts (*.tcsh)\\t*.tcsh\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\verilog.vim	/^  let b:browsefilter = "Verilog Source Files (*.v)\\t*.v\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\xhtml.vim	/^    let  b:browsefilter="XHTML files (*.xhtml, *.xhtm)\\t*.xhtml;*.xhtm\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\xml.vim	/^    let  b:browsefilter="XML Files (*.xml)\\t*.xml\\n" .$/;"	v
b:browsefilter	vim82\ftplugin\xsd.vim	/^    let  b:browsefilter="XSD Files (*.xsd)\\t*.xsd\\n" . s:browsefilter$/;"	v
b:browsefilter	vim82\ftplugin\xslt.vim	/^    let  b:browsefilter="XSLT Files (*.xsl,*.xslt)\\t*.xsl;*.xslt\\n" . b:browsefilter$/;"	v
b:browsefilter	vim82\syntax\lpc.vim	/^    let b:browsefilter = "LPC Source Files (*.c *.d *.h)\\t*.c;*.d;*.h\\n" .$/;"	v
b:c_minlines	vim82\syntax\autodoc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	vim82\syntax\autodoc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	vim82\syntax\autodoc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	vim82\syntax\c.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	vim82\syntax\c.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	vim82\syntax\c.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	vim82\syntax\calendar.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	vim82\syntax\calendar.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	vim82\syntax\calendar.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	vim82\syntax\indent.vim	/^    let b:c_minlines = 15       " mostly for () constructs$/;"	v
b:c_minlines	vim82\syntax\indent.vim	/^    let b:c_minlines = 50       " #if 0 constructs can be long$/;"	v
b:c_minlines	vim82\syntax\indent.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	vim82\syntax\lpc.vim	/^    let b:c_minlines = 15	" mostly for () constructs$/;"	v
b:c_minlines	vim82\syntax\lpc.vim	/^    let b:c_minlines = 50	" #if 0 constructs can be long$/;"	v
b:c_minlines	vim82\syntax\lpc.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:c_minlines	vim82\syntax\pike.vim	/^    let b:c_minlines = 200	" mostly for multiline strings$/;"	v
b:c_minlines	vim82\syntax\pike.vim	/^    let b:c_minlines = 400	" #if 0 constructs can be long$/;"	v
b:c_minlines	vim82\syntax\pike.vim	/^  let b:c_minlines = c_minlines$/;"	v
b:child_match	vim82\ftplugin\python.vim	/^let b:child_match = '\\(\\w\\)\\.\\(\\w\\)'$/;"	v
b:child_sub	vim82\ftplugin\python.vim	/^let b:child_sub = '\\1\/\\2'$/;"	v
b:comment_end	vim82\ftplugin\sql.vim	/^let b:comment_end = '\\(^\\s*'.b:comment_leader.'.*\\n\\)'.$/;"	v
b:comment_jump_over	vim82\ftplugin\sql.vim	/^let b:comment_jump_over  = "call search('".$/;"	v
b:comment_leader	vim82\ftplugin\sql.vim	/^let b:comment_leader = '\\(--\\\\|\\\/\\\/\\\\|\\*\\\\|\\\/\\*\\\\|\\*\\\/\\)'$/;"	v
b:comment_skip_back	vim82\ftplugin\sql.vim	/^let b:comment_skip_back  = "call search('".$/;"	v
b:comment_start	vim82\ftplugin\sql.vim	/^let b:comment_start  = '^\\(\\s*'.b:comment_leader.'.*\\n\\)\\@<!'.$/;"	v
b:completingLangExtension	vim82\autoload\haskellcomplete.vim	/^let b:completingLangExtension = 0$/;"	v
b:completingModule	vim82\autoload\haskellcomplete.vim	/^let b:completingModule        = 0$/;"	v
b:completingOptionsGHC	vim82\autoload\haskellcomplete.vim	/^let b:completingOptionsGHC    = 0$/;"	v
b:context_errorformat	vim82\compiler\context.vim	/^let b:context_errorformat = ''$/;"	v
b:cucumber_root	vim82\ftplugin\cucumber.vim	/^let b:cucumber_root = expand('%:p:h:s?.*[\\\/]\\%(features\\|stories\\)\\zs[\\\/].*??')$/;"	v
b:cucumber_steps_glob	vim82\ftplugin\cucumber.vim	/^  let b:cucumber_steps_glob = b:cucumber_root.'\/**\/*.rb'$/;"	v
b:current_ftplugin	vim82\ftplugin\sql.vim	/^let b:current_ftplugin = 'sql'$/;"	v
b:current_indent	vim82\indent\sqlanywhere.vim	/^let b:current_indent = "sqlanywhere"$/;"	v
b:current_syntax	plugins\kaoriya\syntax\memo.vim	/^let b:current_syntax = "memo"$/;"	v
b:current_syntax	vim82\syntax\8th.vim	/^let b:current_syntax = "8th"$/;"	v
b:current_syntax	vim82\syntax\a2ps.vim	/^let b:current_syntax = "a2ps"$/;"	v
b:current_syntax	vim82\syntax\a65.vim	/^let b:current_syntax = "a65"$/;"	v
b:current_syntax	vim82\syntax\aap.vim	/^let b:current_syntax = "aap"$/;"	v
b:current_syntax	vim82\syntax\abap.vim	/^let b:current_syntax = "abap"$/;"	v
b:current_syntax	vim82\syntax\abaqus.vim	/^let b:current_syntax = "abaqus"$/;"	v
b:current_syntax	vim82\syntax\abc.vim	/^let b:current_syntax = "abc"$/;"	v
b:current_syntax	vim82\syntax\abel.vim	/^let b:current_syntax = "abel"$/;"	v
b:current_syntax	vim82\syntax\acedb.vim	/^let b:current_syntax = "acedb"$/;"	v
b:current_syntax	vim82\syntax\ada.vim	/^let b:current_syntax = "ada"$/;"	v
b:current_syntax	vim82\syntax\aflex.vim	/^let b:current_syntax = "aflex"$/;"	v
b:current_syntax	vim82\syntax\ahdl.vim	/^let b:current_syntax = "ahdl"$/;"	v
b:current_syntax	vim82\syntax\alsaconf.vim	/^let b:current_syntax = "alsaconf"$/;"	v
b:current_syntax	vim82\syntax\amiga.vim	/^let b:current_syntax = "amiga"$/;"	v
b:current_syntax	vim82\syntax\aml.vim	/^let b:current_syntax = "aml"$/;"	v
b:current_syntax	vim82\syntax\ampl.vim	/^let b:current_syntax = "ampl"$/;"	v
b:current_syntax	vim82\syntax\ant.vim	/^let b:current_syntax = "ant"$/;"	v
b:current_syntax	vim82\syntax\antlr.vim	/^let b:current_syntax = "antlr"$/;"	v
b:current_syntax	vim82\syntax\apache.vim	/^let b:current_syntax = "apache"$/;"	v
b:current_syntax	vim82\syntax\apachestyle.vim	/^let b:current_syntax = "apachestyle"$/;"	v
b:current_syntax	vim82\syntax\aptconf.vim	/^let b:current_syntax = "aptconf"$/;"	v
b:current_syntax	vim82\syntax\arch.vim	/^let b:current_syntax = "arch"$/;"	v
b:current_syntax	vim82\syntax\art.vim	/^let b:current_syntax = "art"$/;"	v
b:current_syntax	vim82\syntax\asciidoc.vim	/^let b:current_syntax = "asciidoc"$/;"	v
b:current_syntax	vim82\syntax\asm.vim	/^let b:current_syntax = "asm"$/;"	v
b:current_syntax	vim82\syntax\asm68k.vim	/^let b:current_syntax = "asm68k"$/;"	v
b:current_syntax	vim82\syntax\asmh8300.vim	/^let b:current_syntax = "asmh8300"$/;"	v
b:current_syntax	vim82\syntax\asn.vim	/^let b:current_syntax = "asn"$/;"	v
b:current_syntax	vim82\syntax\aspperl.vim	/^let b:current_syntax = "aspperl"$/;"	v
b:current_syntax	vim82\syntax\aspvbs.vim	/^let b:current_syntax = "aspvbs"$/;"	v
b:current_syntax	vim82\syntax\asterisk.vim	/^let b:current_syntax = "asterisk" $/;"	v
b:current_syntax	vim82\syntax\asteriskvm.vim	/^let b:current_syntax = "asteriskvm"$/;"	v
b:current_syntax	vim82\syntax\atlas.vim	/^let b:current_syntax = "atlas"$/;"	v
b:current_syntax	vim82\syntax\autodoc.vim	/^let b:current_syntax = "autodoc"$/;"	v
b:current_syntax	vim82\syntax\autohotkey.vim	/^let b:current_syntax = "autohotkey"$/;"	v
b:current_syntax	vim82\syntax\autoit.vim	/^let b:current_syntax = "autoit"$/;"	v
b:current_syntax	vim82\syntax\automake.vim	/^let b:current_syntax = 'automake'$/;"	v
b:current_syntax	vim82\syntax\ave.vim	/^let b:current_syntax = "ave"$/;"	v
b:current_syntax	vim82\syntax\avra.vim	/^let b:current_syntax = "avra"$/;"	v
b:current_syntax	vim82\syntax\awk.vim	/^let b:current_syntax = "awk"$/;"	v
b:current_syntax	vim82\syntax\ayacc.vim	/^let b:current_syntax = "ayacc"$/;"	v
b:current_syntax	vim82\syntax\b.vim	/^let b:current_syntax = "b"$/;"	v
b:current_syntax	vim82\syntax\baan.vim	/^let b:current_syntax = "baan"$/;"	v
b:current_syntax	vim82\syntax\bash.vim	/^let b:current_syntax = 'bash'$/;"	v
b:current_syntax	vim82\syntax\basic.vim	/^let b:current_syntax = "basic"$/;"	v
b:current_syntax	vim82\syntax\bc.vim	/^let b:current_syntax = "bc"$/;"	v
b:current_syntax	vim82\syntax\bdf.vim	/^let b:current_syntax = "bdf"$/;"	v
b:current_syntax	vim82\syntax\bib.vim	/^let b:current_syntax = "bib"$/;"	v
b:current_syntax	vim82\syntax\bindzone.vim	/^let b:current_syntax = "bindzone"$/;"	v
b:current_syntax	vim82\syntax\blank.vim	/^let b:current_syntax = "blank"$/;"	v
b:current_syntax	vim82\syntax\bsdl.vim	/^let b:current_syntax = "bsdl"$/;"	v
b:current_syntax	vim82\syntax\bst.vim	/^let b:current_syntax = "bst"$/;"	v
b:current_syntax	vim82\syntax\btm.vim	/^let b:current_syntax = "btm"$/;"	v
b:current_syntax	vim82\syntax\bzl.vim	/^let b:current_syntax = 'bzl'$/;"	v
b:current_syntax	vim82\syntax\bzr.vim	/^let b:current_syntax = "bzr"$/;"	v
b:current_syntax	vim82\syntax\c.vim	/^let b:current_syntax = "c"$/;"	v
b:current_syntax	vim82\syntax\cabal.vim	/^let b:current_syntax = "cabal"$/;"	v
b:current_syntax	vim82\syntax\calendar.vim	/^let b:current_syntax = "calendar"$/;"	v
b:current_syntax	vim82\syntax\catalog.vim	/^let b:current_syntax = "catalog"$/;"	v
b:current_syntax	vim82\syntax\cdl.vim	/^let b:current_syntax = "cdl"$/;"	v
b:current_syntax	vim82\syntax\cdrdaoconf.vim	/^let b:current_syntax = "cdrdaoconf"$/;"	v
b:current_syntax	vim82\syntax\cdrtoc.vim	/^let b:current_syntax = "cdrtoc"$/;"	v
b:current_syntax	vim82\syntax\cf.vim	/^let b:current_syntax = "cfml"$/;"	v
b:current_syntax	vim82\syntax\cfg.vim	/^let b:current_syntax = "cfg"$/;"	v
b:current_syntax	vim82\syntax\ch.vim	/^let b:current_syntax = "ch"$/;"	v
b:current_syntax	vim82\syntax\chaiscript.vim	/^let b:current_syntax = "chaiscript"$/;"	v
b:current_syntax	vim82\syntax\change.vim	/^let b:current_syntax = "change"$/;"	v
b:current_syntax	vim82\syntax\changelog.vim	/^let b:current_syntax = "changelog"$/;"	v
b:current_syntax	vim82\syntax\cheetah.vim	/^let b:current_syntax = "cheetah"$/;"	v
b:current_syntax	vim82\syntax\chill.vim	/^let b:current_syntax = "chill"$/;"	v
b:current_syntax	vim82\syntax\chordpro.vim	/^let b:current_syntax = "chordpro"$/;"	v
b:current_syntax	vim82\syntax\cl.vim	/^let b:current_syntax = "cl"$/;"	v
b:current_syntax	vim82\syntax\clean.vim	/^let b:current_syntax = "clean"$/;"	v
b:current_syntax	vim82\syntax\clipper.vim	/^let b:current_syntax = "clipper"$/;"	v
b:current_syntax	vim82\syntax\clojure.vim	/^let b:current_syntax = "clojure"$/;"	v
b:current_syntax	vim82\syntax\cmake.vim	/^let b:current_syntax = "cmake"$/;"	v
b:current_syntax	vim82\syntax\cmod.vim	/^let b:current_syntax = "cmod"$/;"	v
b:current_syntax	vim82\syntax\cmusrc.vim	/^let b:current_syntax = "cmusrc"$/;"	v
b:current_syntax	vim82\syntax\cobol.vim	/^let b:current_syntax = "cobol"$/;"	v
b:current_syntax	vim82\syntax\conaryrecipe.vim	/^let b:current_syntax = "conaryrecipe"$/;"	v
b:current_syntax	vim82\syntax\conf.vim	/^let b:current_syntax = "conf"$/;"	v
b:current_syntax	vim82\syntax\config.vim	/^let b:current_syntax = "config"$/;"	v
b:current_syntax	vim82\syntax\context.vim	/^let b:current_syntax = "context"$/;"	v
b:current_syntax	vim82\syntax\cpp.vim	/^let b:current_syntax = "cpp"$/;"	v
b:current_syntax	vim82\syntax\crm.vim	/^let b:current_syntax = "crm"$/;"	v
b:current_syntax	vim82\syntax\crontab.vim	/^let b:current_syntax = "crontab"$/;"	v
b:current_syntax	vim82\syntax\cs.vim	/^let b:current_syntax = 'cs'$/;"	v
b:current_syntax	vim82\syntax\csc.vim	/^let b:current_syntax = "csc"$/;"	v
b:current_syntax	vim82\syntax\csdl.vim	/^let b:current_syntax = "csdl"$/;"	v
b:current_syntax	vim82\syntax\csh.vim	/^let b:current_syntax = "csh"$/;"	v
b:current_syntax	vim82\syntax\csp.vim	/^let b:current_syntax = "csp"$/;"	v
b:current_syntax	vim82\syntax\css.vim	/^let b:current_syntax = "css"$/;"	v
b:current_syntax	vim82\syntax\cterm.vim	/^let b:current_syntax = "cterm"$/;"	v
b:current_syntax	vim82\syntax\cucumber.vim	/^let b:current_syntax = "cucumber"$/;"	v
b:current_syntax	vim82\syntax\cuda.vim	/^let b:current_syntax = "cuda"$/;"	v
b:current_syntax	vim82\syntax\cupl.vim	/^let b:current_syntax = "cupl"$/;"	v
b:current_syntax	vim82\syntax\cuplsim.vim	/^let b:current_syntax = "cuplsim"$/;"	v
b:current_syntax	vim82\syntax\cvs.vim	/^let b:current_syntax = "cvs"$/;"	v
b:current_syntax	vim82\syntax\cvsrc.vim	/^let b:current_syntax = "cvsrc"$/;"	v
b:current_syntax	vim82\syntax\cweb.vim	/^let b:current_syntax = "cweb"$/;"	v
b:current_syntax	vim82\syntax\cynlib.vim	/^let b:current_syntax = "cynlib"$/;"	v
b:current_syntax	vim82\syntax\cynpp.vim	/^let b:current_syntax = "cynpp"$/;"	v
b:current_syntax	vim82\syntax\d.vim	/^let b:current_syntax = "d"$/;"	v
b:current_syntax	vim82\syntax\dart.vim	/^let b:current_syntax = "dart"$/;"	v
b:current_syntax	vim82\syntax\datascript.vim	/^let b:current_syntax = "datascript"$/;"	v
b:current_syntax	vim82\syntax\dcd.vim	/^let b:current_syntax = "dcd"$/;"	v
b:current_syntax	vim82\syntax\dcl.vim	/^let b:current_syntax = "dcl"$/;"	v
b:current_syntax	vim82\syntax\debchangelog.vim	/^let b:current_syntax = 'debchangelog'$/;"	v
b:current_syntax	vim82\syntax\debcontrol.vim	/^let b:current_syntax = 'debcontrol'$/;"	v
b:current_syntax	vim82\syntax\debcopyright.vim	/^let b:current_syntax = 'debcopyright'$/;"	v
b:current_syntax	vim82\syntax\debsources.vim	/^let b:current_syntax = 'debsources'$/;"	v
b:current_syntax	vim82\syntax\def.vim	/^let b:current_syntax = "def"$/;"	v
b:current_syntax	vim82\syntax\denyhosts.vim	/^let b:current_syntax = "denyhosts"$/;"	v
b:current_syntax	vim82\syntax\desc.vim	/^let b:current_syntax = "desc"$/;"	v
b:current_syntax	vim82\syntax\desktop.vim	/^let b:current_syntax = "desktop"$/;"	v
b:current_syntax	vim82\syntax\dictconf.vim	/^let b:current_syntax = "dictconf"$/;"	v
b:current_syntax	vim82\syntax\dictdconf.vim	/^let b:current_syntax = "dictdconf"$/;"	v
b:current_syntax	vim82\syntax\diff.vim	/^let b:current_syntax = "diff"$/;"	v
b:current_syntax	vim82\syntax\dircolors.vim	/^let b:current_syntax = "dircolors"$/;"	v
b:current_syntax	vim82\syntax\dirpager.vim	/^let b:current_syntax = "dirpager"$/;"	v
b:current_syntax	vim82\syntax\diva.vim	/^let b:current_syntax = "diva"$/;"	v
b:current_syntax	vim82\syntax\django.vim	/^let b:current_syntax = "django"$/;"	v
b:current_syntax	vim82\syntax\dnsmasq.vim	/^let b:current_syntax = "dnsmasq"$/;"	v
b:current_syntax	vim82\syntax\docbk.vim	/^let b:current_syntax = "docbk"$/;"	v
b:current_syntax	vim82\syntax\dockerfile.vim	/^let b:current_syntax = "dockerfile"$/;"	v
b:current_syntax	vim82\syntax\dosbatch.vim	/^let b:current_syntax = "dosbatch"$/;"	v
b:current_syntax	vim82\syntax\dosini.vim	/^let b:current_syntax = "dosini"$/;"	v
b:current_syntax	vim82\syntax\dot.vim	/^let b:current_syntax = "dot"$/;"	v
b:current_syntax	vim82\syntax\doxygen.vim	/^    let b:current_syntax = "doxygen"$/;"	v
b:current_syntax	vim82\syntax\doxygen.vim	/^    let b:current_syntax = b:current_syntax.'.doxygen'$/;"	v
b:current_syntax	vim82\syntax\doxygen.vim	/^    let b:current_syntax=b:doxygen_syntax_save$/;"	v
b:current_syntax	vim82\syntax\dracula.vim	/^let b:current_syntax = "dracula"$/;"	v
b:current_syntax	vim82\syntax\dsl.vim	/^let b:current_syntax = "dsl"$/;"	v
b:current_syntax	vim82\syntax\dtd.vim	/^let b:current_syntax = "dtd"$/;"	v
b:current_syntax	vim82\syntax\dtml.vim	/^let b:current_syntax = "dtml"$/;"	v
b:current_syntax	vim82\syntax\dtrace.vim	/^let b:current_syntax = "dtrace"$/;"	v
b:current_syntax	vim82\syntax\dune.vim	/^let b:current_syntax = "dune"$/;"	v
b:current_syntax	vim82\syntax\dylan.vim	/^let b:current_syntax = "dylan"$/;"	v
b:current_syntax	vim82\syntax\dylanintr.vim	/^let b:current_syntax = "dylanintr"$/;"	v
b:current_syntax	vim82\syntax\dylanlid.vim	/^let b:current_syntax = "dylanlid"$/;"	v
b:current_syntax	vim82\syntax\ecd.vim	/^let b:current_syntax = "ecd"$/;"	v
b:current_syntax	vim82\syntax\edif.vim	/^let b:current_syntax = "edif"$/;"	v
b:current_syntax	vim82\syntax\eiffel.vim	/^let b:current_syntax = "eiffel"$/;"	v
b:current_syntax	vim82\syntax\elf.vim	/^let b:current_syntax = "elf"$/;"	v
b:current_syntax	vim82\syntax\elinks.vim	/^let b:current_syntax = "elinks"$/;"	v
b:current_syntax	vim82\syntax\elm.vim	/^let b:current_syntax = 'elm'$/;"	v
b:current_syntax	vim82\syntax\elmfilt.vim	/^let b:current_syntax = "elmfilt"$/;"	v
b:current_syntax	vim82\syntax\erlang.vim	/^let b:current_syntax = "erlang"$/;"	v
b:current_syntax	vim82\syntax\eruby.vim	/^let b:current_syntax = matchstr(&syntax, '^.*\\<eruby\\>')$/;"	v
b:current_syntax	vim82\syntax\esmtprc.vim	/^let b:current_syntax = "esmtprc"$/;"	v
b:current_syntax	vim82\syntax\esqlc.vim	/^let b:current_syntax = "esqlc"$/;"	v
b:current_syntax	vim82\syntax\esterel.vim	/^let b:current_syntax = "esterel"$/;"	v
b:current_syntax	vim82\syntax\eterm.vim	/^let b:current_syntax = "eterm"$/;"	v
b:current_syntax	vim82\syntax\euphoria3.vim	/^let b:current_syntax = "euphoria3"$/;"	v
b:current_syntax	vim82\syntax\euphoria4.vim	/^let b:current_syntax = "euphoria4"$/;"	v
b:current_syntax	vim82\syntax\eviews.vim	/^let b:current_syntax="eviews"$/;"	v
b:current_syntax	vim82\syntax\exim.vim	/^let b:current_syntax = "exim"$/;"	v
b:current_syntax	vim82\syntax\expect.vim	/^let b:current_syntax = "expect"$/;"	v
b:current_syntax	vim82\syntax\exports.vim	/^let b:current_syntax = "exports"$/;"	v
b:current_syntax	vim82\syntax\falcon.vim	/^let b:current_syntax = "falcon"$/;"	v
b:current_syntax	vim82\syntax\fan.vim	/^let b:current_syntax = "fan"$/;"	v
b:current_syntax	vim82\syntax\fasm.vim	/^let b:current_syntax = "fasm"$/;"	v
b:current_syntax	vim82\syntax\fdcc.vim	/^let b:current_syntax = "fdcc"$/;"	v
b:current_syntax	vim82\syntax\fetchmail.vim	/^let b:current_syntax = "fetchmail"$/;"	v
b:current_syntax	vim82\syntax\fgl.vim	/^let b:current_syntax = "fgl"$/;"	v
b:current_syntax	vim82\syntax\flexwiki.vim	/^let b:current_syntax="FlexWiki"$/;"	v
b:current_syntax	vim82\syntax\focexec.vim	/^let b:current_syntax = "focexec"$/;"	v
b:current_syntax	vim82\syntax\form.vim	/^  let b:current_syntax = "form"$/;"	v
b:current_syntax	vim82\syntax\forth.vim	/^let b:current_syntax = "forth"$/;"	v
b:current_syntax	vim82\syntax\fortran.vim	/^let b:current_syntax = "fortran"$/;"	v
b:current_syntax	vim82\syntax\foxpro.vim	/^let b:current_syntax = "foxpro"$/;"	v
b:current_syntax	vim82\syntax\framescript.vim	/^let b:current_syntax = "framescript"$/;"	v
b:current_syntax	vim82\syntax\freebasic.vim	/^let b:current_syntax = "freebasic"$/;"	v
b:current_syntax	vim82\syntax\fstab.vim	/^let b:current_syntax = "fstab"$/;"	v
b:current_syntax	vim82\syntax\fvwm.vim	/^let b:current_syntax = "fvwm"$/;"	v
b:current_syntax	vim82\syntax\fvwm2m4.vim	/^let b:current_syntax = 'fvwm2m4'$/;"	v
b:current_syntax	vim82\syntax\gdb.vim	/^let b:current_syntax = "gdb"$/;"	v
b:current_syntax	vim82\syntax\gdmo.vim	/^let b:current_syntax = "gdmo"$/;"	v
b:current_syntax	vim82\syntax\gedcom.vim	/^let b:current_syntax = "gedcom"$/;"	v
b:current_syntax	vim82\syntax\git.vim	/^let b:current_syntax = "git"$/;"	v
b:current_syntax	vim82\syntax\gitcommit.vim	/^let b:current_syntax = "gitcommit"$/;"	v
b:current_syntax	vim82\syntax\gitconfig.vim	/^let b:current_syntax = "gitconfig"$/;"	v
b:current_syntax	vim82\syntax\gitolite.vim	/^let b:current_syntax = "gitolite"$/;"	v
b:current_syntax	vim82\syntax\gitrebase.vim	/^let b:current_syntax = "gitrebase"$/;"	v
b:current_syntax	vim82\syntax\gitsendemail.vim	/^let b:current_syntax = "gitsendemail"$/;"	v
b:current_syntax	vim82\syntax\gkrellmrc.vim	/^let b:current_syntax = "gkrellmrc"$/;"	v
b:current_syntax	vim82\syntax\gnash.vim	/^let b:current_syntax = "gnash"$/;"	v
b:current_syntax	vim82\syntax\gnuplot.vim	/^let b:current_syntax = "gnuplot"$/;"	v
b:current_syntax	vim82\syntax\go.vim	/^let b:current_syntax = 'go'$/;"	v
b:current_syntax	vim82\syntax\godoc.vim	/^let b:current_syntax = 'godoc'$/;"	v
b:current_syntax	vim82\syntax\gp.vim	/^let b:current_syntax = "gp"$/;"	v
b:current_syntax	vim82\syntax\gpg.vim	/^let b:current_syntax = "gpg"$/;"	v
b:current_syntax	vim82\syntax\gprof.vim	/^let b:current_syntax = "gprof"$/;"	v
b:current_syntax	vim82\syntax\grads.vim	/^let b:current_syntax = "grads"$/;"	v
b:current_syntax	vim82\syntax\gretl.vim	/^let b:current_syntax="gretl"$/;"	v
b:current_syntax	vim82\syntax\groovy.vim	/^let b:current_syntax = "groovy"$/;"	v
b:current_syntax	vim82\syntax\group.vim	/^let b:current_syntax = "group"$/;"	v
b:current_syntax	vim82\syntax\grub.vim	/^let b:current_syntax = "grub"$/;"	v
b:current_syntax	vim82\syntax\gsp.vim	/^let b:current_syntax = "gsp"$/;"	v
b:current_syntax	vim82\syntax\gtkrc.vim	/^let b:current_syntax = "gtkrc"$/;"	v
b:current_syntax	vim82\syntax\haml.vim	/^let b:current_syntax = "haml"$/;"	v
b:current_syntax	vim82\syntax\hamster.vim	/^let b:current_syntax = "hamster"$/;"	v
b:current_syntax	vim82\syntax\haskell.vim	/^let b:current_syntax = "haskell"$/;"	v
b:current_syntax	vim82\syntax\haste.vim	/^let b:current_syntax = "haste"$/;"	v
b:current_syntax	vim82\syntax\hastepreproc.vim	/^let b:current_syntax = "hastepreproc"$/;"	v
b:current_syntax	vim82\syntax\hb.vim	/^let b:current_syntax = "hb"$/;"	v
b:current_syntax	vim82\syntax\help.vim	/^let b:current_syntax = "help"$/;"	v
b:current_syntax	vim82\syntax\hercules.vim	/^let b:current_syntax = "hercules"$/;"	v
b:current_syntax	vim82\syntax\hex.vim	/^let b:current_syntax = "hex"$/;"	v
b:current_syntax	vim82\syntax\hgcommit.vim	/^let b:current_syntax = "hgcommit"$/;"	v
b:current_syntax	vim82\syntax\hog.vim	/^let b:current_syntax = "hog"$/;"	v
b:current_syntax	vim82\syntax\hollywood.vim	/^let b:current_syntax = "hollywood"$/;"	v
b:current_syntax	vim82\syntax\hostconf.vim	/^let b:current_syntax = "hostconf"$/;"	v
b:current_syntax	vim82\syntax\hostsaccess.vim	/^let b:current_syntax = "hostsaccess"$/;"	v
b:current_syntax	vim82\syntax\html.vim	/^let b:current_syntax = "html"$/;"	v
b:current_syntax	vim82\syntax\htmlcheetah.vim	/^let b:current_syntax = "htmlcheetah"$/;"	v
b:current_syntax	vim82\syntax\htmldjango.vim	/^let b:current_syntax = "htmldjango"$/;"	v
b:current_syntax	vim82\syntax\htmlm4.vim	/^let b:current_syntax = "htmlm4"$/;"	v
b:current_syntax	vim82\syntax\htmlos.vim	/^let b:current_syntax = "htmlos"$/;"	v
b:current_syntax	vim82\syntax\ia64.vim	/^let b:current_syntax = "ia64"$/;"	v
b:current_syntax	vim82\syntax\ibasic.vim	/^let b:current_syntax = "ibasic"$/;"	v
b:current_syntax	vim82\syntax\icemenu.vim	/^let b:current_syntax = "IceMenu"$/;"	v
b:current_syntax	vim82\syntax\icon.vim	/^let b:current_syntax = "icon"$/;"	v
b:current_syntax	vim82\syntax\idl.vim	/^  let b:current_syntax = "idl"$/;"	v
b:current_syntax	vim82\syntax\idlang.vim	/^let b:current_syntax = "idlang"$/;"	v
b:current_syntax	vim82\syntax\indent.vim	/^let b:current_syntax = "indent"$/;"	v
b:current_syntax	vim82\syntax\inform.vim	/^let b:current_syntax = "inform"$/;"	v
b:current_syntax	vim82\syntax\initex.vim	/^let b:current_syntax = "initex"$/;"	v
b:current_syntax	vim82\syntax\initng.vim	/^let b:current_syntax = "initng"$/;"	v
b:current_syntax	vim82\syntax\inittab.vim	/^let b:current_syntax = "inittab"$/;"	v
b:current_syntax	vim82\syntax\ishd.vim	/^let b:current_syntax = "ishd"$/;"	v
b:current_syntax	vim82\syntax\iss.vim	/^let b:current_syntax = "iss"$/;"	v
b:current_syntax	vim82\syntax\ist.vim	/^let b:current_syntax = "ist"$/;"	v
b:current_syntax	vim82\syntax\j.vim	/^let b:current_syntax = 'j'$/;"	v
b:current_syntax	vim82\syntax\jal.vim	/^let b:current_syntax = "jal"$/;"	v
b:current_syntax	vim82\syntax\jam.vim	/^let b:current_syntax = "jam"$/;"	v
b:current_syntax	vim82\syntax\jargon.vim	/^let b:current_syntax = "jargon"$/;"	v
b:current_syntax	vim82\syntax\java.vim	/^let b:current_syntax = "java"$/;"	v
b:current_syntax	vim82\syntax\javacc.vim	/^let b:current_syntax = "javacc"$/;"	v
b:current_syntax	vim82\syntax\javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	vim82\syntax\jess.vim	/^let b:current_syntax = "jess"$/;"	v
b:current_syntax	vim82\syntax\jgraph.vim	/^let b:current_syntax = "jgraph"$/;"	v
b:current_syntax	vim82\syntax\jovial.vim	/^let b:current_syntax = "jovial"$/;"	v
b:current_syntax	vim82\syntax\jproperties.vim	/^let b:current_syntax = "jproperties"$/;"	v
b:current_syntax	vim82\syntax\json.vim	/^let b:current_syntax = "json"$/;"	v
b:current_syntax	vim82\syntax\jsp.vim	/^let b:current_syntax = "jsp"$/;"	v
b:current_syntax	vim82\syntax\kconfig.vim	/^let b:current_syntax = "kconfig"$/;"	v
b:current_syntax	vim82\syntax\kivy.vim	/^let b:current_syntax = "kivy"$/;"	v
b:current_syntax	vim82\syntax\kix.vim	/^let b:current_syntax = "kix"$/;"	v
b:current_syntax	vim82\syntax\kscript.vim	/^let b:current_syntax = "kscript"$/;"	v
b:current_syntax	vim82\syntax\kwt.vim	/^let b:current_syntax = "kwt"$/;"	v
b:current_syntax	vim82\syntax\lace.vim	/^let b:current_syntax = "lace"$/;"	v
b:current_syntax	vim82\syntax\latte.vim	/^let b:current_syntax = "latte"$/;"	v
b:current_syntax	vim82\syntax\ld.vim	/^let b:current_syntax = "ld"$/;"	v
b:current_syntax	vim82\syntax\ldapconf.vim	/^let b:current_syntax = "ldapconf"$/;"	v
b:current_syntax	vim82\syntax\ldif.vim	/^let b:current_syntax = "ldif"$/;"	v
b:current_syntax	vim82\syntax\less.vim	/^let b:current_syntax = "less"$/;"	v
b:current_syntax	vim82\syntax\lex.vim	/^let b:current_syntax = "lex"$/;"	v
b:current_syntax	vim82\syntax\lftp.vim	/^let b:current_syntax = "lftp"$/;"	v
b:current_syntax	vim82\syntax\lhaskell.vim	/^let b:current_syntax = "lhaskell"$/;"	v
b:current_syntax	vim82\syntax\libao.vim	/^let b:current_syntax = "libao"$/;"	v
b:current_syntax	vim82\syntax\lifelines.vim	/^let b:current_syntax = "lifelines"$/;"	v
b:current_syntax	vim82\syntax\lilo.vim	/^let b:current_syntax = "lilo"$/;"	v
b:current_syntax	vim82\syntax\limits.vim	/^let b:current_syntax = "limits"$/;"	v
b:current_syntax	vim82\syntax\liquid.vim	/^let b:current_syntax = 'liquid'$/;"	v
b:current_syntax	vim82\syntax\lisp.vim	/^let b:current_syntax = "lisp"$/;"	v
b:current_syntax	vim82\syntax\lite.vim	/^let b:current_syntax = "lite"$/;"	v
b:current_syntax	vim82\syntax\litestep.vim	/^let b:current_syntax = "litestep"$/;"	v
b:current_syntax	vim82\syntax\loginaccess.vim	/^let b:current_syntax = "loginaccess"$/;"	v
b:current_syntax	vim82\syntax\logindefs.vim	/^let b:current_syntax = "logindefs"$/;"	v
b:current_syntax	vim82\syntax\logtalk.vim	/^let b:current_syntax = "logtalk"$/;"	v
b:current_syntax	vim82\syntax\lotos.vim	/^let b:current_syntax = "lotos"$/;"	v
b:current_syntax	vim82\syntax\lout.vim	/^let b:current_syntax = "lout"$/;"	v
b:current_syntax	vim82\syntax\lpc.vim	/^let b:current_syntax = "lpc"$/;"	v
b:current_syntax	vim82\syntax\lprolog.vim	/^let b:current_syntax = "lprolog"$/;"	v
b:current_syntax	vim82\syntax\lscript.vim	/^let b:current_syntax = "lscript"$/;"	v
b:current_syntax	vim82\syntax\lsl.vim	/^let b:current_syntax = "lsl"$/;"	v
b:current_syntax	vim82\syntax\lss.vim	/^let b:current_syntax = "lss"$/;"	v
b:current_syntax	vim82\syntax\lua.vim	/^let b:current_syntax = "lua"$/;"	v
b:current_syntax	vim82\syntax\lynx.vim	/^let b:current_syntax = "lynx"$/;"	v
b:current_syntax	vim82\syntax\m4.vim	/^let b:current_syntax = "m4"$/;"	v
b:current_syntax	vim82\syntax\mail.vim	/^let b:current_syntax = "mail"$/;"	v
b:current_syntax	vim82\syntax\mailaliases.vim	/^let b:current_syntax = "mailaliases"$/;"	v
b:current_syntax	vim82\syntax\mailcap.vim	/^let b:current_syntax = "mailcap"$/;"	v
b:current_syntax	vim82\syntax\make.vim	/^let b:current_syntax = "make"$/;"	v
b:current_syntax	vim82\syntax\mallard.vim	/^let b:current_syntax = "mallard"$/;"	v
b:current_syntax	vim82\syntax\man.vim	/^let b:current_syntax = "man"$/;"	v
b:current_syntax	vim82\syntax\manconf.vim	/^let b:current_syntax = "manconf"$/;"	v
b:current_syntax	vim82\syntax\maple.vim	/^let b:current_syntax = "maple"$/;"	v
b:current_syntax	vim82\syntax\markdown.vim	/^let b:current_syntax = "markdown"$/;"	v
b:current_syntax	vim82\syntax\masm.vim	/^let b:current_syntax = "masm"$/;"	v
b:current_syntax	vim82\syntax\mason.vim	/^let b:current_syntax = "mason"$/;"	v
b:current_syntax	vim82\syntax\master.vim	/^let b:current_syntax = "master"$/;"	v
b:current_syntax	vim82\syntax\matlab.vim	/^let b:current_syntax = "matlab"$/;"	v
b:current_syntax	vim82\syntax\maxima.vim	/^let b:current_syntax = "maxima"$/;"	v
b:current_syntax	vim82\syntax\mel.vim	/^let b:current_syntax = "mel"$/;"	v
b:current_syntax	vim82\syntax\meson.vim	/^let b:current_syntax = "meson"$/;"	v
b:current_syntax	vim82\syntax\messages.vim	/^let b:current_syntax = "messages"$/;"	v
b:current_syntax	vim82\syntax\mf.vim	/^let b:current_syntax = "mf"$/;"	v
b:current_syntax	vim82\syntax\mgl.vim	/^let b:current_syntax = "mgl"$/;"	v
b:current_syntax	vim82\syntax\mgp.vim	/^let b:current_syntax = "mgp"$/;"	v
b:current_syntax	vim82\syntax\mib.vim	/^let b:current_syntax = "mib"$/;"	v
b:current_syntax	vim82\syntax\mix.vim	/^let b:current_syntax = "mix"$/;"	v
b:current_syntax	vim82\syntax\mma.vim	/^let b:current_syntax = "mma"$/;"	v
b:current_syntax	vim82\syntax\mmix.vim	/^let b:current_syntax = "mmix"$/;"	v
b:current_syntax	vim82\syntax\mmp.vim	/^let b:current_syntax = "mmp"$/;"	v
b:current_syntax	vim82\syntax\modconf.vim	/^let b:current_syntax = "modconf"$/;"	v
b:current_syntax	vim82\syntax\model.vim	/^let b:current_syntax = "model"$/;"	v
b:current_syntax	vim82\syntax\modsim3.vim	/^let b:current_syntax = "modsim3"$/;"	v
b:current_syntax	vim82\syntax\modula2.vim	/^let b:current_syntax = "modula2"$/;"	v
b:current_syntax	vim82\syntax\modula3.vim	/^let b:current_syntax = "modula3"$/;"	v
b:current_syntax	vim82\syntax\monk.vim	/^let b:current_syntax = "monk"$/;"	v
b:current_syntax	vim82\syntax\moo.vim	/^let b:current_syntax = "moo"$/;"	v
b:current_syntax	vim82\syntax\mp.vim	/^let b:current_syntax = "mp"$/;"	v
b:current_syntax	vim82\syntax\mplayerconf.vim	/^let b:current_syntax = "mplayerconf"$/;"	v
b:current_syntax	vim82\syntax\mrxvtrc.vim	/^let b:current_syntax = "mrxvtrc"$/;"	v
b:current_syntax	vim82\syntax\msidl.vim	/^let b:current_syntax = "msidl"$/;"	v
b:current_syntax	vim82\syntax\msmessages.vim	/^let b:current_syntax = "msmessages"$/;"	v
b:current_syntax	vim82\syntax\msql.vim	/^let b:current_syntax = "msql"$/;"	v
b:current_syntax	vim82\syntax\murphi.vim	/^let b:current_syntax = "murphi"$/;"	v
b:current_syntax	vim82\syntax\mush.vim	/^let b:current_syntax = "mush"$/;"	v
b:current_syntax	vim82\syntax\muttrc.vim	/^let b:current_syntax = "muttrc"$/;"	v
b:current_syntax	vim82\syntax\mysql.vim	/^let b:current_syntax = "mysql"$/;"	v
b:current_syntax	vim82\syntax\n1ql.vim	/^let b:current_syntax = "n1ql"$/;"	v
b:current_syntax	vim82\syntax\named.vim	/^let b:current_syntax = "named"$/;"	v
b:current_syntax	vim82\syntax\nanorc.vim	/^let b:current_syntax = "nanorc"$/;"	v
b:current_syntax	vim82\syntax\nasm.vim	/^let b:current_syntax = "nasm"$/;"	v
b:current_syntax	vim82\syntax\nastran.vim	/^let b:current_syntax = "nastran"$/;"	v
b:current_syntax	vim82\syntax\natural.vim	/^let b:current_syntax = "natural"$/;"	v
b:current_syntax	vim82\syntax\ncf.vim	/^let b:current_syntax = "ncf"$/;"	v
b:current_syntax	vim82\syntax\neomuttrc.vim	/^let b:current_syntax = "neomuttrc"$/;"	v
b:current_syntax	vim82\syntax\netrc.vim	/^let b:current_syntax = "netrc"$/;"	v
b:current_syntax	vim82\syntax\netrw.vim	/^let   b:current_syntax = "netrwlist"$/;"	v
b:current_syntax	vim82\syntax\ninja.vim	/^let b:current_syntax = "ninja"$/;"	v
b:current_syntax	vim82\syntax\nqc.vim	/^let b:current_syntax = "nqc"$/;"	v
b:current_syntax	vim82\syntax\nroff.vim	/^let b:current_syntax = "nroff"$/;"	v
b:current_syntax	vim82\syntax\nsis.vim	/^let b:current_syntax = "nsis"$/;"	v
b:current_syntax	vim82\syntax\obj.vim	/^let b:current_syntax = "obj"$/;"	v
b:current_syntax	vim82\syntax\objc.vim	/^let b:current_syntax = "objc"$/;"	v
b:current_syntax	vim82\syntax\objcpp.vim	/^let b:current_syntax = "objcpp"$/;"	v
b:current_syntax	vim82\syntax\ocaml.vim	/^let b:current_syntax = "ocaml"$/;"	v
b:current_syntax	vim82\syntax\occam.vim	/^let b:current_syntax = "occam"$/;"	v
b:current_syntax	vim82\syntax\omnimark.vim	/^let b:current_syntax = "omnimark"$/;"	v
b:current_syntax	vim82\syntax\openroad.vim	/^let b:current_syntax = "openroad"$/;"	v
b:current_syntax	vim82\syntax\opl.vim	/^let b:current_syntax = "opl"$/;"	v
b:current_syntax	vim82\syntax\ora.vim	/^let b:current_syntax = "ora"$/;"	v
b:current_syntax	vim82\syntax\pamconf.vim	/^let b:current_syntax = "pamconf"$/;"	v
b:current_syntax	vim82\syntax\pamenv.vim	/^let b:current_syntax = "pamenv"$/;"	v
b:current_syntax	vim82\syntax\papp.vim	/^let b:current_syntax = "papp"$/;"	v
b:current_syntax	vim82\syntax\pascal.vim	/^let b:current_syntax = "pascal"$/;"	v
b:current_syntax	vim82\syntax\passwd.vim	/^let b:current_syntax = "passwd"$/;"	v
b:current_syntax	vim82\syntax\pcap.vim	/^let b:current_syntax = "pcap"$/;"	v
b:current_syntax	vim82\syntax\pccts.vim	/^let b:current_syntax = "pccts"$/;"	v
b:current_syntax	vim82\syntax\pdf.vim	/^let b:current_syntax = "pdf"$/;"	v
b:current_syntax	vim82\syntax\perl.vim	/^let b:current_syntax = "perl"$/;"	v
b:current_syntax	vim82\syntax\perl6.vim	/^let b:current_syntax = "perl6"$/;"	v
b:current_syntax	vim82\syntax\pf.vim	/^let b:current_syntax = "pf"$/;"	v
b:current_syntax	vim82\syntax\pfmain.vim	/^let b:current_syntax = "pfmain"$/;"	v
b:current_syntax	vim82\syntax\php.vim	/^let b:current_syntax = "php"$/;"	v
b:current_syntax	vim82\syntax\pic.vim	/^let b:current_syntax = "pic"$/;"	v
b:current_syntax	vim82\syntax\pike.vim	/^let b:current_syntax = "pike"$/;"	v
b:current_syntax	vim82\syntax\pilrc.vim	/^let b:current_syntax = "pilrc"$/;"	v
b:current_syntax	vim82\syntax\pine.vim	/^let b:current_syntax = "pine"$/;"	v
b:current_syntax	vim82\syntax\pinfo.vim	/^let b:current_syntax = "pinfo"$/;"	v
b:current_syntax	vim82\syntax\plaintex.vim	/^let b:current_syntax = "plaintex"$/;"	v
b:current_syntax	vim82\syntax\pli.vim	/^let b:current_syntax = "pl1"$/;"	v
b:current_syntax	vim82\syntax\plm.vim	/^let b:current_syntax = "plm"$/;"	v
b:current_syntax	vim82\syntax\plp.vim	/^let b:current_syntax = "plp"$/;"	v
b:current_syntax	vim82\syntax\plsql.vim	/^let b:current_syntax = "plsql"$/;"	v
b:current_syntax	vim82\syntax\po.vim	/^let b:current_syntax = "po"$/;"	v
b:current_syntax	vim82\syntax\pod.vim	/^let b:current_syntax = "pod"$/;"	v
b:current_syntax	vim82\syntax\postscr.vim	/^let b:current_syntax = "postscr"$/;"	v
b:current_syntax	vim82\syntax\pov.vim	/^let b:current_syntax = "pov"$/;"	v
b:current_syntax	vim82\syntax\povini.vim	/^let b:current_syntax = "povini"$/;"	v
b:current_syntax	vim82\syntax\ppd.vim	/^let b:current_syntax = "ppd"$/;"	v
b:current_syntax	vim82\syntax\ppwiz.vim	/^let b:current_syntax = "ppwiz"$/;"	v
b:current_syntax	vim82\syntax\prescribe.vim	/^let b:current_syntax = "prescribe"$/;"	v
b:current_syntax	vim82\syntax\privoxy.vim	/^let b:current_syntax = "privoxy"$/;"	v
b:current_syntax	vim82\syntax\procmail.vim	/^let b:current_syntax = "procmail"$/;"	v
b:current_syntax	vim82\syntax\progress.vim	/^let b:current_syntax = "progress"$/;"	v
b:current_syntax	vim82\syntax\prolog.vim	/^let b:current_syntax = "prolog"$/;"	v
b:current_syntax	vim82\syntax\promela.vim	/^let b:current_syntax = "promela"$/;"	v
b:current_syntax	vim82\syntax\proto.vim	/^let b:current_syntax = "proto"$/;"	v
b:current_syntax	vim82\syntax\protocols.vim	/^let b:current_syntax = "protocols"$/;"	v
b:current_syntax	vim82\syntax\psf.vim	/^let b:current_syntax = "psf"$/;"	v
b:current_syntax	vim82\syntax\ptcap.vim	/^let b:current_syntax = "ptcap"$/;"	v
b:current_syntax	vim82\syntax\purifylog.vim	/^let b:current_syntax = "purifylog"$/;"	v
b:current_syntax	vim82\syntax\pyrex.vim	/^let b:current_syntax = "pyrex"$/;"	v
b:current_syntax	vim82\syntax\python.vim	/^let b:current_syntax = "python"$/;"	v
b:current_syntax	vim82\syntax\qf.vim	/^let b:current_syntax = "qf"$/;"	v
b:current_syntax	vim82\syntax\quake.vim	/^let b:current_syntax = "quake"$/;"	v
b:current_syntax	vim82\syntax\r.vim	/^let b:current_syntax="r"$/;"	v
b:current_syntax	vim82\syntax\racc.vim	/^let b:current_syntax = "racc"$/;"	v
b:current_syntax	vim82\syntax\radiance.vim	/^let b:current_syntax = "radiance"$/;"	v
b:current_syntax	vim82\syntax\raml.vim	/^let b:current_syntax = "raml"$/;"	v
b:current_syntax	vim82\syntax\ratpoison.vim	/^let b:current_syntax = "ratpoison"$/;"	v
b:current_syntax	vim82\syntax\rc.vim	/^let b:current_syntax = "rc"$/;"	v
b:current_syntax	vim82\syntax\rcs.vim	/^let b:current_syntax = "rcs"$/;"	v
b:current_syntax	vim82\syntax\rcslog.vim	/^let b:current_syntax = "rcslog"$/;"	v
b:current_syntax	vim82\syntax\readline.vim	/^let b:current_syntax = 'readline'$/;"	v
b:current_syntax	vim82\syntax\rebol.vim	/^let b:current_syntax = "rebol"$/;"	v
b:current_syntax	vim82\syntax\redif.vim	/^let b:current_syntax="redif"$/;"	v
b:current_syntax	vim82\syntax\registry.vim	/^let b:current_syntax = "registry"$/;"	v
b:current_syntax	vim82\syntax\rego.vim	/^let b:current_syntax = 'rego'$/;"	v
b:current_syntax	vim82\syntax\remind.vim	/^let b:current_syntax = "remind"$/;"	v
b:current_syntax	vim82\syntax\resolv.vim	/^let b:current_syntax = "resolv"$/;"	v
b:current_syntax	vim82\syntax\reva.vim	/^let b:current_syntax = "reva"$/;"	v
b:current_syntax	vim82\syntax\rexx.vim	/^let b:current_syntax = "rexx"$/;"	v
b:current_syntax	vim82\syntax\rhelp.vim	/^let   b:current_syntax = "rhelp"$/;"	v
b:current_syntax	vim82\syntax\rib.vim	/^let b:current_syntax = "rib"$/;"	v
b:current_syntax	vim82\syntax\rmd.vim	/^  let b:current_syntax = "rmd"$/;"	v
b:current_syntax	vim82\syntax\rmd.vim	/^let b:current_syntax = "rmd"$/;"	v
b:current_syntax	vim82\syntax\rnc.vim	/^let b:current_syntax = "rnc"$/;"	v
b:current_syntax	vim82\syntax\rng.vim	/^let b:current_syntax = 'rng'$/;"	v
b:current_syntax	vim82\syntax\rnoweb.vim	/^let   b:current_syntax = "rnoweb"$/;"	v
b:current_syntax	vim82\syntax\robots.vim	/^let b:current_syntax = "robots"$/;"	v
b:current_syntax	vim82\syntax\rpcgen.vim	/^let b:current_syntax = "rpcgen"$/;"	v
b:current_syntax	vim82\syntax\rpl.vim	/^let b:current_syntax = "rpl"$/;"	v
b:current_syntax	vim82\syntax\rrst.vim	/^let b:current_syntax = "rrst"$/;"	v
b:current_syntax	vim82\syntax\rst.vim	/^let b:current_syntax = "rst"$/;"	v
b:current_syntax	vim82\syntax\rtf.vim	/^let b:current_syntax = "rtf"$/;"	v
b:current_syntax	vim82\syntax\ruby.vim	/^let b:current_syntax = "ruby"$/;"	v
b:current_syntax	vim82\syntax\rust.vim	/^let b:current_syntax = "rust"$/;"	v
b:current_syntax	vim82\syntax\samba.vim	/^let b:current_syntax = "samba"$/;"	v
b:current_syntax	vim82\syntax\sas.vim	/^let b:current_syntax = "sas"$/;"	v
b:current_syntax	vim82\syntax\sass.vim	/^let b:current_syntax = "sass"$/;"	v
b:current_syntax	vim82\syntax\sather.vim	/^let b:current_syntax = "sather"$/;"	v
b:current_syntax	vim82\syntax\scala.vim	/^let b:current_syntax = "scala"$/;"	v
b:current_syntax	vim82\syntax\scala.vim	/^let b:current_syntax = 'scala'$/;"	v
b:current_syntax	vim82\syntax\scheme.vim	/^let b:current_syntax = 'scheme'$/;"	v
b:current_syntax	vim82\syntax\scilab.vim	/^let b:current_syntax = "scilab"$/;"	v
b:current_syntax	vim82\syntax\screen.vim	/^let b:current_syntax = "screen"$/;"	v
b:current_syntax	vim82\syntax\scss.vim	/^let b:current_syntax = "scss"$/;"	v
b:current_syntax	vim82\syntax\sd.vim	/^let b:current_syntax = "sd"$/;"	v
b:current_syntax	vim82\syntax\sdc.vim	/^let b:current_syntax = "sdc"$/;"	v
b:current_syntax	vim82\syntax\sdl.vim	/^let b:current_syntax = "sdl"$/;"	v
b:current_syntax	vim82\syntax\sed.vim	/^let b:current_syntax = "sed"$/;"	v
b:current_syntax	vim82\syntax\sensors.vim	/^let b:current_syntax = "sensors"$/;"	v
b:current_syntax	vim82\syntax\services.vim	/^let b:current_syntax = "services"$/;"	v
b:current_syntax	vim82\syntax\setserial.vim	/^let b:current_syntax = "setserial"$/;"	v
b:current_syntax	vim82\syntax\sgml.vim	/^let b:current_syntax = "sgml"$/;"	v
b:current_syntax	vim82\syntax\sgmldecl.vim	/^let b:current_syntax = "sgmldecl"$/;"	v
b:current_syntax	vim82\syntax\sgmllnx.vim	/^let b:current_syntax = "sgmllnx"$/;"	v
b:current_syntax	vim82\syntax\sh.vim	/^ let b:current_syntax = "bash"$/;"	v
b:current_syntax	vim82\syntax\sh.vim	/^ let b:current_syntax = "ksh"$/;"	v
b:current_syntax	vim82\syntax\sh.vim	/^ let b:current_syntax = "posix"$/;"	v
b:current_syntax	vim82\syntax\sh.vim	/^ let b:current_syntax = "sh"$/;"	v
b:current_syntax	vim82\syntax\sicad.vim	/^let b:current_syntax = "sicad"$/;"	v
b:current_syntax	vim82\syntax\sieve.vim	/^let b:current_syntax = "sieve"$/;"	v
b:current_syntax	vim82\syntax\sil.vim	/^let b:current_syntax = "sil"$/;"	v
b:current_syntax	vim82\syntax\simula.vim	/^let b:current_syntax = "simula"$/;"	v
b:current_syntax	vim82\syntax\sinda.vim	/^let b:current_syntax = "sinda"$/;"	v
b:current_syntax	vim82\syntax\sindacmp.vim	/^let b:current_syntax = "sindacmp"$/;"	v
b:current_syntax	vim82\syntax\sindaout.vim	/^let b:current_syntax = "sindaout"$/;"	v
b:current_syntax	vim82\syntax\sisu.vim	/^let b:current_syntax = "sisu"$/;"	v
b:current_syntax	vim82\syntax\skill.vim	/^let b:current_syntax = "skill"$/;"	v
b:current_syntax	vim82\syntax\sl.vim	/^let b:current_syntax = "sl"$/;"	v
b:current_syntax	vim82\syntax\slang.vim	/^let b:current_syntax = "slang"$/;"	v
b:current_syntax	vim82\syntax\slice.vim	/^let b:current_syntax = "slice"$/;"	v
b:current_syntax	vim82\syntax\slpconf.vim	/^let b:current_syntax = "slpconf"$/;"	v
b:current_syntax	vim82\syntax\slpreg.vim	/^let b:current_syntax = "slpreg"$/;"	v
b:current_syntax	vim82\syntax\slpspi.vim	/^let b:current_syntax = "slpspi"$/;"	v
b:current_syntax	vim82\syntax\slrnrc.vim	/^let b:current_syntax = "slrnrc"$/;"	v
b:current_syntax	vim82\syntax\slrnsc.vim	/^let b:current_syntax = "slrnsc"$/;"	v
b:current_syntax	vim82\syntax\sm.vim	/^let b:current_syntax = "sm"$/;"	v
b:current_syntax	vim82\syntax\smarty.vim	/^let b:current_syntax = "smarty"$/;"	v
b:current_syntax	vim82\syntax\smcl.vim	/^let b:current_syntax = "smcl"$/;"	v
b:current_syntax	vim82\syntax\smil.vim	/^let b:current_syntax = "smil"$/;"	v
b:current_syntax	vim82\syntax\smith.vim	/^let b:current_syntax = "smith"$/;"	v
b:current_syntax	vim82\syntax\sml.vim	/^let b:current_syntax = "sml"$/;"	v
b:current_syntax	vim82\syntax\snnsnet.vim	/^let b:current_syntax = "snnsnet"$/;"	v
b:current_syntax	vim82\syntax\snnspat.vim	/^let b:current_syntax = "snnspat"$/;"	v
b:current_syntax	vim82\syntax\snnsres.vim	/^let b:current_syntax = "snnsres"$/;"	v
b:current_syntax	vim82\syntax\snobol4.vim	/^let b:current_syntax = "snobol4"$/;"	v
b:current_syntax	vim82\syntax\spec.vim	/^let b:current_syntax = "spec"$/;"	v
b:current_syntax	vim82\syntax\specman.vim	/^let b:current_syntax = "specman"$/;"	v
b:current_syntax	vim82\syntax\spice.vim	/^let b:current_syntax = "spice"$/;"	v
b:current_syntax	vim82\syntax\splint.vim	/^let b:current_syntax = "splint"$/;"	v
b:current_syntax	vim82\syntax\spup.vim	/^let b:current_syntax = "spup"$/;"	v
b:current_syntax	vim82\syntax\spyce.vim	/^let b:current_syntax = "spyce"$/;"	v
b:current_syntax	vim82\syntax\sqlanywhere.vim	/^let b:current_syntax = "sqlanywhere"$/;"	v
b:current_syntax	vim82\syntax\sqlforms.vim	/^let b:current_syntax = "sqlforms"$/;"	v
b:current_syntax	vim82\syntax\sqlhana.vim	/^let b:current_syntax = "sqlhana"$/;"	v
b:current_syntax	vim82\syntax\sqlinformix.vim	/^let b:current_syntax = "sqlinformix"$/;"	v
b:current_syntax	vim82\syntax\sqlj.vim	/^let b:current_syntax = "sqlj"$/;"	v
b:current_syntax	vim82\syntax\sqloracle.vim	/^let b:current_syntax = "sql"$/;"	v
b:current_syntax	vim82\syntax\sqr.vim	/^let b:current_syntax = "sqr"$/;"	v
b:current_syntax	vim82\syntax\squid.vim	/^let b:current_syntax = "squid"$/;"	v
b:current_syntax	vim82\syntax\srec.vim	/^let b:current_syntax = "srec"$/;"	v
b:current_syntax	vim82\syntax\sshconfig.vim	/^let b:current_syntax = "sshconfig"$/;"	v
b:current_syntax	vim82\syntax\sshdconfig.vim	/^let b:current_syntax = "sshdconfig"$/;"	v
b:current_syntax	vim82\syntax\st.vim	/^let b:current_syntax = "st"$/;"	v
b:current_syntax	vim82\syntax\stata.vim	/^let b:current_syntax = "stata"$/;"	v
b:current_syntax	vim82\syntax\stp.vim	/^let b:current_syntax = "stp"$/;"	v
b:current_syntax	vim82\syntax\strace.vim	/^let b:current_syntax = "strace"$/;"	v
b:current_syntax	vim82\syntax\sudoers.vim	/^let b:current_syntax = "sudoers"$/;"	v
b:current_syntax	vim82\syntax\svg.vim	/^let b:current_syntax = "svg"$/;"	v
b:current_syntax	vim82\syntax\svn.vim	/^let b:current_syntax = "svn"$/;"	v
b:current_syntax	vim82\syntax\swift.vim	/^let b:current_syntax = "swift"$/;"	v
b:current_syntax	vim82\syntax\swiftgyb.vim	/^let b:current_syntax = "swiftgyb"$/;"	v
b:current_syntax	vim82\syntax\sysctl.vim	/^let b:current_syntax = "sysctl"$/;"	v
b:current_syntax	vim82\syntax\systemd.vim	/^  let b:current_syntax = 'systemd'$/;"	v
b:current_syntax	vim82\syntax\systemverilog.vim	/^let b:current_syntax = "systemverilog"$/;"	v
b:current_syntax	vim82\syntax\tads.vim	/^let b:current_syntax = "tads"$/;"	v
b:current_syntax	vim82\syntax\tags.vim	/^let b:current_syntax = "tags"$/;"	v
b:current_syntax	vim82\syntax\tak.vim	/^let b:current_syntax = "tak"$/;"	v
b:current_syntax	vim82\syntax\takcmp.vim	/^let b:current_syntax = "takcmp"$/;"	v
b:current_syntax	vim82\syntax\takout.vim	/^let b:current_syntax = "takout"$/;"	v
b:current_syntax	vim82\syntax\tap.vim	/^let b:current_syntax="tapVerboseOutput"$/;"	v
b:current_syntax	vim82\syntax\taskdata.vim	/^let b:current_syntax = "taskdata"$/;"	v
b:current_syntax	vim82\syntax\taskedit.vim	/^let b:current_syntax = "taskedit"$/;"	v
b:current_syntax	vim82\syntax\tasm.vim	/^let b:current_syntax = "tasm"$/;"	v
b:current_syntax	vim82\syntax\tcl.vim	/^let b:current_syntax = "tcl"$/;"	v
b:current_syntax	vim82\syntax\tcsh.vim	/^let b:current_syntax = 'tcsh'$/;"	v
b:current_syntax	vim82\syntax\teraterm.vim	/^let b:current_syntax = "teraterm"$/;"	v
b:current_syntax	vim82\syntax\terminfo.vim	/^let b:current_syntax = "terminfo"$/;"	v
b:current_syntax	vim82\syntax\tex.vim	/^let   b:current_syntax = "tex"$/;"	v
b:current_syntax	vim82\syntax\texinfo.vim	/^let b:current_syntax = "texinfo"$/;"	v
b:current_syntax	vim82\syntax\texmf.vim	/^let b:current_syntax = "texmf"$/;"	v
b:current_syntax	vim82\syntax\tf.vim	/^let b:current_syntax = "tf"$/;"	v
b:current_syntax	vim82\syntax\tidy.vim	/^let b:current_syntax = "tidy"$/;"	v
b:current_syntax	vim82\syntax\tilde.vim	/^let b:current_syntax = "tilde"$/;"	v
b:current_syntax	vim82\syntax\tli.vim	/^let b:current_syntax = "tli"$/;"	v
b:current_syntax	vim82\syntax\tmux.vim	/^let b:current_syntax = "tmux"$/;"	v
b:current_syntax	vim82\syntax\tpp.vim	/^let b:current_syntax = 'tpp'$/;"	v
b:current_syntax	vim82\syntax\trasys.vim	/^let b:current_syntax = "trasys"$/;"	v
b:current_syntax	vim82\syntax\treetop.vim	/^let b:current_syntax = 'treetop'$/;"	v
b:current_syntax	vim82\syntax\tsalt.vim	/^let b:current_syntax = "tsalt"$/;"	v
b:current_syntax	vim82\syntax\tsscl.vim	/^let b:current_syntax = "tsscl"$/;"	v
b:current_syntax	vim82\syntax\tssgm.vim	/^let b:current_syntax = "tssgm"$/;"	v
b:current_syntax	vim82\syntax\tssop.vim	/^let b:current_syntax = "tssop"$/;"	v
b:current_syntax	vim82\syntax\tt2.vim	/^let b:current_syntax = "tt2"$/;"	v
b:current_syntax	vim82\syntax\tt2html.vim	/^let b:current_syntax = "tt2html"$/;"	v
b:current_syntax	vim82\syntax\tt2js.vim	/^let b:current_syntax = "tt2js"$/;"	v
b:current_syntax	vim82\syntax\typescript.vim	/^let b:current_syntax = "typescript"$/;"	v
b:current_syntax	vim82\syntax\typescriptreact.vim	/^let b:current_syntax = "typescriptreact"$/;"	v
b:current_syntax	vim82\syntax\uc.vim	/^let b:current_syntax = "uc"$/;"	v
b:current_syntax	vim82\syntax\udevconf.vim	/^let b:current_syntax = "udevconf"$/;"	v
b:current_syntax	vim82\syntax\udevperm.vim	/^let b:current_syntax = "udevperm"$/;"	v
b:current_syntax	vim82\syntax\udevrules.vim	/^let b:current_syntax = "udevrules"$/;"	v
b:current_syntax	vim82\syntax\uil.vim	/^let b:current_syntax = "uil"$/;"	v
b:current_syntax	vim82\syntax\updatedb.vim	/^let b:current_syntax = "updatedb"$/;"	v
b:current_syntax	vim82\syntax\upstart.vim	/^let b:current_syntax = "upstart"$/;"	v
b:current_syntax	vim82\syntax\upstreamdat.vim	/^let b:current_syntax = "upstreamdat"$/;"	v
b:current_syntax	vim82\syntax\upstreaminstalllog.vim	/^let b:current_syntax = "upstreaminstalllog"$/;"	v
b:current_syntax	vim82\syntax\upstreamlog.vim	/^let b:current_syntax = "upstreamlog"$/;"	v
b:current_syntax	vim82\syntax\upstreamrpt.vim	/^let b:current_syntax = "upstreamrpt"$/;"	v
b:current_syntax	vim82\syntax\usserverlog.vim	/^let b:current_syntax = "usserverlog"$/;"	v
b:current_syntax	vim82\syntax\usw2kagtlog.vim	/^let b:current_syntax = "usw2kagentlog"$/;"	v
b:current_syntax	vim82\syntax\valgrind.vim	/^let b:current_syntax = "valgrind"$/;"	v
b:current_syntax	vim82\syntax\vb.vim	/^let b:current_syntax = "vb"$/;"	v
b:current_syntax	vim82\syntax\vera.vim	/^let b:current_syntax = "vera"$/;"	v
b:current_syntax	vim82\syntax\verilog.vim	/^let b:current_syntax = "verilog"$/;"	v
b:current_syntax	vim82\syntax\verilogams.vim	/^let b:current_syntax = "verilogams"$/;"	v
b:current_syntax	vim82\syntax\vgrindefs.vim	/^let b:current_syntax = "vgrindefs"$/;"	v
b:current_syntax	vim82\syntax\vhdl.vim	/^let b:current_syntax = "vhdl"$/;"	v
b:current_syntax	vim82\syntax\vim.vim	/^let b:current_syntax = "vim"$/;"	v
b:current_syntax	vim82\syntax\viminfo.vim	/^let b:current_syntax = "viminfo"$/;"	v
b:current_syntax	vim82\syntax\virata.vim	/^let b:current_syntax = "virata"$/;"	v
b:current_syntax	vim82\syntax\vmasm.vim	/^let b:current_syntax = "vmasm"$/;"	v
b:current_syntax	vim82\syntax\voscm.vim	/^let b:current_syntax = "voscm"$/;"	v
b:current_syntax	vim82\syntax\vrml.vim	/^let b:current_syntax = "vrml"$/;"	v
b:current_syntax	vim82\syntax\vroom.vim	/^let b:current_syntax = 'vroom'$/;"	v
b:current_syntax	vim82\syntax\vsejcl.vim	/^let b:current_syntax = "vsejcl"$/;"	v
b:current_syntax	vim82\syntax\wast.vim	/^let b:current_syntax = "wast"$/;"	v
b:current_syntax	vim82\syntax\wdiff.vim	/^let b:current_syntax = "wdiff"$/;"	v
b:current_syntax	vim82\syntax\web.vim	/^let b:current_syntax = "web"$/;"	v
b:current_syntax	vim82\syntax\webmacro.vim	/^let b:current_syntax = "webmacro"$/;"	v
b:current_syntax	vim82\syntax\wget.vim	/^let b:current_syntax = "wget"$/;"	v
b:current_syntax	vim82\syntax\winbatch.vim	/^let b:current_syntax = "winbatch"$/;"	v
b:current_syntax	vim82\syntax\wml.vim	/^let b:current_syntax = "wml"$/;"	v
b:current_syntax	vim82\syntax\wsh.vim	/^let b:current_syntax = "wsh"$/;"	v
b:current_syntax	vim82\syntax\wsml.vim	/^let b:current_syntax = "wsml"$/;"	v
b:current_syntax	vim82\syntax\wvdial.vim	/^let b:current_syntax = "wvdial"$/;"	v
b:current_syntax	vim82\syntax\xbl.vim	/^let b:current_syntax = "xbl"$/;"	v
b:current_syntax	vim82\syntax\xdefaults.vim	/^let b:current_syntax = "xdefaults"$/;"	v
b:current_syntax	vim82\syntax\xf86conf.vim	/^let b:current_syntax = "xf86conf"$/;"	v
b:current_syntax	vim82\syntax\xhtml.vim	/^let b:current_syntax = "xhtml"$/;"	v
b:current_syntax	vim82\syntax\xinetd.vim	/^let b:current_syntax = "xinetd"$/;"	v
b:current_syntax	vim82\syntax\xkb.vim	/^let b:current_syntax = "xkb"$/;"	v
b:current_syntax	vim82\syntax\xmath.vim	/^let b:current_syntax = "xmath"$/;"	v
b:current_syntax	vim82\syntax\xml.vim	/^let b:current_syntax = "xml"$/;"	v
b:current_syntax	vim82\syntax\xmodmap.vim	/^let b:current_syntax = "xmodmap"$/;"	v
b:current_syntax	vim82\syntax\xpm.vim	/^let b:current_syntax = "xpm"$/;"	v
b:current_syntax	vim82\syntax\xpm2.vim	/^let b:current_syntax = "xpm2"$/;"	v
b:current_syntax	vim82\syntax\xquery.vim	/^let b:current_syntax = "xquery"$/;"	v
b:current_syntax	vim82\syntax\xs.vim	/^let b:current_syntax = "xs"$/;"	v
b:current_syntax	vim82\syntax\xxd.vim	/^let b:current_syntax = "xxd"$/;"	v
b:current_syntax	vim82\syntax\yacc.vim	/^let b:current_syntax = "yacc"$/;"	v
b:current_syntax	vim82\syntax\yaml.vim	/^let b:current_syntax = "yaml"$/;"	v
b:current_syntax	vim82\syntax\z8a.vim	/^let b:current_syntax = "z8a"$/;"	v
b:current_syntax	vim82\syntax\zimbu.vim	/^let b:current_syntax = "zimbu"$/;"	v
b:current_syntax	vim82\syntax\zsh.vim	/^let b:current_syntax = "zsh"$/;"	v
b:dc_next_index	vim82\syntax\dircolors.vim	/^let b:dc_next_index = 0$/;"	v
b:did_8thplugin	vim82\ftplugin\8th.vim	/^let b:did_8thplugin = 1$/;"	v
b:did_add_maps	vim82\ftplugin\vim.vim	/^  let b:did_add_maps = 1$/;"	v
b:did_ftplugin	plugins\~\.vim\bundle\Vundle.vim\ftplugin\vundlelog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\a2ps.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\aap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\abap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\abaqus.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\ada.vim	/^let b:did_ftplugin = 45$/;"	v
b:did_ftplugin	vim82\ftplugin\alsaconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\ant.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\arch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\asm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\aspvbs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\awk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\bdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\bst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\c.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\calendar.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\cdrdaoconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\cfg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\changelog.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\clojure.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\cmake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\cobol.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\config.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\context.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\crm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\cs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\csc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\csh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\css.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\cucumber.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\cvsrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\debchangelog.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	vim82\ftplugin\debcontrol.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	vim82\ftplugin\denyhosts.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dictconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dictdconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\diff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dircolors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dockerfile.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dosbatch.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dosini.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dtd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dtrace.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\dune.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	vim82\ftplugin\eiffel.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\elinks.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\elm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\erlang.vim	/^	let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\eruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\eterm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\falcon.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\fetchmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\flexwiki.vim	/^let b:did_ftplugin = 1  " Don't load another plugin for this buffer$/;"	v
b:did_ftplugin	vim82\ftplugin\fortran.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\framescript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\fvwm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\gdb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\git.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\gitcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\gitconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\gitrebase.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\go.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\gpg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\gprof.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	vim82\ftplugin\groovy.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\group.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\grub.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\haml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\hamster.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\haskell.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\help.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\hgcommit.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\hog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\hostconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\hostsaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\html.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\indent.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\initex.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\ishd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\j.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\java.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\javascript.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\jproperties.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\json.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\jsp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\kconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\ld.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\less.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\lftp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\libao.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\limits.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\liquid.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\lisp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\logcheck.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\loginaccess.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\logindefs.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\logtalk.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\lprolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\lua.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\m4.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mailaliases.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mailcap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\make.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\man.vim	/^  let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\manconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\masm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\matlab.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\meson.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mma.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\modconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mplayerconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\mrxvtrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\msmessages.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\muttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\nanorc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\neomuttrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\netrc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\nroff.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\nsis.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\ocaml.vim	/^let b:did_ftplugin=1$/;"	v
b:did_ftplugin	vim82\ftplugin\occam.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\pamconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\pascal.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\passwd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\pdf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\perl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\perl6.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\php.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\pinfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\postscr.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\procmail.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\prolog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\protocols.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\python.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\qf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\quake.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\r.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\racc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\readline.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\registry.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\reva.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rhelp.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rmd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rnc.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rnoweb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rpl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rrst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rst.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\ruby.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\rust.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sass.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sbt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\scala.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\scheme.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\screen.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sensors.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\services.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\setserial.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sgml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sieve.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\slpconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\slpreg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\slpspi.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\spec.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sql.vim	/^let b:did_ftplugin     = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sshconfig.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sudoers.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\svg.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\sysctl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\tcl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\tcsh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\terminfo.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\text.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\tmux.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\treetop.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\udevconf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\udevperm.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\udevrules.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\updatedb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\vb.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\verilog.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\vhdl.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\vim.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\vroom.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\wast.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xdefaults.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xf86conf.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xhtml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xinetd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xmodmap.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xsd.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\xslt.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\yaml.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\zimbu.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin	vim82\ftplugin\zsh.vim	/^let b:did_ftplugin = 1$/;"	v
b:did_ftplugin_go_fmt	plugins\golang\ftplugin\go\fmt.vim	/^let b:did_ftplugin_go_fmt = 1$/;"	v
b:did_ftplugin_go_import	plugins\golang\ftplugin\go\import.vim	/^let b:did_ftplugin_go_import = 1$/;"	v
b:did_indent	vim82\indent\ada.vim	/^let b:did_indent = 45$/;"	v
b:did_indent	vim82\indent\awk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\bib.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\bst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\bzl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\c.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\cdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\ch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\chaiscript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\changelog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\clojure.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\cmake.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\cobol.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\cpp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\cs.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\css.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\cucumber.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\cuda.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\d.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\dictconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\dictdconf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\dosbatch.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\dtrace.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\dylan.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\eiffel.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\elm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\erlang.vim	/^  let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\eruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\eterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\falcon.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\fortran.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\framescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\gitconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\gitolite.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\go.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\haml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\hamster.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\hog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\html.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\idlang.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\ishd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\j.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\java.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\json.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\ld.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\lifelines.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\liquid.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\lisp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\logtalk.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\lua.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\mail.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\make.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\matlab.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\meson.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\mma.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\mp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\nsis.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\objc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\ocaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\occam.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\pascal.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\perl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\perl6.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\php.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\postscr.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\pov.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\prolog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\python.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\r.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\readline.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\rhelp.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\rmd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\rnoweb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\rpl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\rrst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\rst.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\ruby.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\rust.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\sas.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\sass.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\scala.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\sdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\sh.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\sml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\sqlanywhere.vim	/^let b:did_indent     = 1$/;"	v
b:did_indent	vim82\indent\sshconfig.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\systemverilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\tcl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\tcsh.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\teraterm.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\tex.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\tf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\tilde.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\treetop.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\typescript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\vb.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\verilog.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\vhdl.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\vim.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\vroom.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\wast.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\xf86conf.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\xinetd.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\xml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\yacc.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\yaml.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\indent\zimbu.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	vim82\syntax\spyce.vim	/^let b:did_indent = 1	     " don't perform HTML indentation!$/;"	v
b:did_scheme_ftplugin	vim82\ftplugin\scheme.vim	/^let b:did_scheme_ftplugin = 1$/;"	v
b:did_scheme_syntax	vim82\syntax\scheme.vim	/^let b:did_scheme_syntax = 1$/;"	v
b:dnsmasq_backrgound_light	vim82\syntax\dnsmasq.vim	/^	let b:dnsmasq_backrgound_light = 0$/;"	v
b:dnsmasq_backrgound_light	vim82\syntax\dnsmasq.vim	/^	let b:dnsmasq_backrgound_light = dnsmasq_backrgound_light$/;"	v
b:docbk_type	vim82\ftplugin\docbk.vim	/^    let b:docbk_type = 'sgml'$/;"	v
b:docbk_type	vim82\ftplugin\docbk.vim	/^    let b:docbk_type = 'xml'$/;"	v
b:docbk_type	vim82\syntax\docbk.vim	/^    let b:docbk_type = 'sgml'$/;"	v
b:docbk_type	vim82\syntax\docbk.vim	/^    let b:docbk_type = 'xml'$/;"	v
b:docbk_type	vim82\syntax\docbksgml.vim	/^let b:docbk_type="sgml"$/;"	v
b:docbk_type	vim82\syntax\docbkxml.vim	/^let b:docbk_type="xml"$/;"	v
b:docbk_ver	vim82\syntax\docbk.vim	/^    let b:docbk_ver = 4$/;"	v
b:docbk_ver	vim82\syntax\docbk.vim	/^    let b:docbk_ver = docbk_ver$/;"	v
b:doxygen_syntax_save	vim82\syntax\doxygen.vim	/^    let b:doxygen_syntax_save=b:current_syntax$/;"	v
b:erlang_syntax_synced	vim82\syntax\erlang.vim	/^let b:erlang_syntax_synced = 1$/;"	v
b:eruby_nest_level	vim82\syntax\eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(&filetype,'\\C\\<eruby\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	vim82\syntax\eruby.vim	/^    let b:eruby_nest_level = strlen(substitute(substitute(substitute(expand("%:t"),'@','','g'),'\\c\\.\\%(erb\\|rhtml\\)\\>','@','g'),'[^@]','','g'))$/;"	v
b:eruby_nest_level	vim82\syntax\eruby.vim	/^  let b:eruby_nest_level = 1$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	vim82\ftplugin\eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^    let b:eruby_subtype = 'html'$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^    let b:eruby_subtype = 'javascript'$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^    let b:eruby_subtype = 'ruby'$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^    let b:eruby_subtype = 'text'$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^    let b:eruby_subtype = 'yaml'$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^    let b:eruby_subtype = g:eruby_default_subtype$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^    let b:eruby_subtype = matchstr(substitute(expand("%:t"),'\\c\\%(\\.erb\\|\\.eruby\\|\\.erubis\\|\\.example\\)\\+$','',''),'\\.\\zs\\w\\+\\%(\\ze+\\w\\+\\)\\=$')$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^.\\{-\\}\\ze\\.eruby\\>')$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^  let b:eruby_subtype = matchstr(&filetype,'^eruby\\.\\zs\\w\\+')$/;"	v
b:eruby_subtype	vim82\syntax\eruby.vim	/^  let b:eruby_subtype = matchstr(s:lines,'eruby_subtype=\\zs\\w\\+')$/;"	v
b:eruby_subtype_indentexpr	vim82\indent\eruby.vim	/^let b:eruby_subtype_indentexpr = &l:indentexpr$/;"	v
b:eterm_minlines	vim82\syntax\eterm.vim	/^  let b:eterm_minlines = 50$/;"	v
b:eterm_minlines	vim82\syntax\eterm.vim	/^  let b:eterm_minlines = eterm_minlines$/;"	v
b:fortran_dialect	vim82\syntax\fortran.vim	/^    let b:fortran_dialect = "f08"$/;"	v
b:fortran_dialect	vim82\syntax\fortran.vim	/^    let b:fortran_dialect = g:fortran_dialect$/;"	v
b:fortran_dialect	vim82\syntax\fortran.vim	/^  let b:fortran_dialect = "F"$/;"	v
b:fortran_dialect	vim82\syntax\fortran.vim	/^  let b:fortran_dialect = "f08"$/;"	v
b:fortran_fixed_source	vim82\ftplugin\fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	vim82\ftplugin\fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	vim82\ftplugin\fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	vim82\indent\fortran.vim	/^	let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	vim82\indent\fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	vim82\indent\fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_fixed_source	vim82\syntax\fortran.vim	/^        let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	vim82\syntax\fortran.vim	/^    let b:fortran_fixed_source = 0$/;"	v
b:fortran_fixed_source	vim82\syntax\fortran.vim	/^    let b:fortran_fixed_source = 1$/;"	v
b:fortran_retype	vim82\syntax\fortran.vim	/^let b:fortran_retype = getline(1)." ".getline(2)." ".getline(3)$/;"	v
b:framescript_minlines	vim82\syntax\framescript.vim	/^let b:framescript_minlines = exists("framescript_minlines")$/;"	v
b:git_dir	vim82\ftplugin\git.vim	/^    let b:git_dir = $GIT_DIR$/;"	v
b:git_dir	vim82\ftplugin\git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git[\\\/]worktrees[\\\/][^\\\/]\\+\\>')$/;"	v
b:git_dir	vim82\ftplugin\git.vim	/^    let b:git_dir = matchstr(expand('%:p'),'.*\\.git\\>')$/;"	v
b:git_dir	vim82\ftplugin\git.vim	/^    let b:git_dir = substitute(b:git_dir,'\\\\','\/','g')$/;"	v
b:git_dir	vim82\ftplugin\gitcommit.vim	/^  let b:git_dir = expand("%:p:h")$/;"	v
b:grandparent_match	vim82\ftplugin\python.vim	/^let b:grandparent_match = '^\\(.\\.\\)\\(\\.*\\)'$/;"	v
b:grandparent_sub	vim82\ftplugin\python.vim	/^let b:grandparent_sub = '\\=submatch(1)."\/".repeat("..\/",strlen(submatch(2)))'$/;"	v
b:hi_indent	vim82\indent\html.vim	/^let b:hi_indent = {"lnum": -1}$/;"	v
b:hi_lasttick	vim82\indent\html.vim	/^let b:hi_lasttick = 0$/;"	v
b:hi_newstate	vim82\indent\html.vim	/^let b:hi_newstate = {}$/;"	v
b:hs_chs	vim82\syntax\chaskell.vim	/^let b:hs_chs=1$/;"	v
b:html_indent_usestate	vim82\indent\eruby.vim	/^let b:html_indent_usestate = 0$/;"	v
b:i	vim82\syntax\hitest.vim	/^   let b:i = b:i + 1$/;"	v
b:i	vim82\syntax\hitest.vim	/^let b:i = 1$/;"	v
b:indent_use_syntax	vim82\indent\perl.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:indent_use_syntax	vim82\indent\perl6.vim	/^let b:indent_use_syntax = has("syntax")$/;"	v
b:is_bash	vim82\ftplugin\bash.vim	/^let b:is_bash = 1$/;"	v
b:is_bash	vim82\indent\bash.vim	/^let b:is_bash = 1$/;"	v
b:is_bash	vim82\syntax\bash.vim	/^let b:is_bash = 1$/;"	v
b:is_bash	vim82\syntax\sh.vim	/^    let b:is_bash= 1$/;"	v
b:is_bash	vim82\syntax\sh.vim	/^  let b:is_bash = 1$/;"	v
b:is_bash	vim82\syntax\sh.vim	/^ let b:is_bash      = 1$/;"	v
b:is_kornshell	vim82\syntax\sh.vim	/^    let b:is_kornshell= 1$/;"	v
b:is_kornshell	vim82\syntax\sh.vim	/^  let b:is_kornshell= 1$/;"	v
b:is_kornshell	vim82\syntax\sh.vim	/^ let b:is_kornshell = 1$/;"	v
b:is_posix	vim82\syntax\sh.vim	/^  let b:is_posix = 1$/;"	v
b:is_posix	vim82\syntax\sh.vim	/^ let b:is_posix     = 1$/;"	v
b:is_sh	vim82\syntax\sh.vim	/^    let b:is_sh= 1$/;"	v
b:keymap	vim82\keymap\magyar_utf-8.vim	/^let b:keymap = "magyar"$/;"	v
b:keymap_name	plugins\kaoriya\keymap\azik_cp932.vim	/^let b:keymap_name = "azik"$/;"	v
b:keymap_name	plugins\kaoriya\keymap\japanese_cp932.vim	/^let b:keymap_name = "jpn"$/;"	v
b:keymap_name	plugins\kaoriya\keymap\tcode_cp932.vim	/^let b:keymap_name = "tcode"$/;"	v
b:keymap_name	plugins\kaoriya\keymap\tutcode_cp932.vim	/^let b:keymap_name = "tutcode"$/;"	v
b:keymap_name	vim82\keymap\accents.vim	/^let b:keymap_name = "acc"$/;"	v
b:keymap_name	vim82\keymap\arabic_utf-8.vim	/^let b:keymap_name = "arab"$/;"	v
b:keymap_name	vim82\keymap\armenian-eastern_utf-8.vim	/^let b:keymap_name = "hy"$/;"	v
b:keymap_name	vim82\keymap\armenian-western_utf-8.vim	/^let b:keymap_name = "hy"$/;"	v
b:keymap_name	vim82\keymap\belarusian-jcuken.vim	/^let b:keymap_name = "by"$/;"	v
b:keymap_name	vim82\keymap\bulgarian-bds.vim	/^let b:keymap_name = "bds"$/;"	v
b:keymap_name	vim82\keymap\bulgarian-phonetic.vim	/^let b:keymap_name = "pho"$/;"	v
b:keymap_name	vim82\keymap\canfr-win.vim	/^let b:keymap_name = "canfr"$/;"	v
b:keymap_name	vim82\keymap\croatian_cp1250.vim	/^let b:keymap_name = "croatian-cp1250"$/;"	v
b:keymap_name	vim82\keymap\croatian_iso-8859-2.vim	/^let b:keymap_name = "croatian-iso-8859-2"$/;"	v
b:keymap_name	vim82\keymap\croatian_utf-8.vim	/^let b:keymap_name = "croatian-UTF-8"$/;"	v
b:keymap_name	vim82\keymap\czech_utf-8.vim	/^let b:keymap_name = "czech"$/;"	v
b:keymap_name	vim82\keymap\dvorak.vim	/^let b:keymap_name = "en-dv"$/;"	v
b:keymap_name	vim82\keymap\esperanto_utf-8.vim	/^let b:keymap_name = "Eo"$/;"	v
b:keymap_name	vim82\keymap\greek_cp1253.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	vim82\keymap\greek_cp737.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	vim82\keymap\greek_iso-8859-7.vim	/^let b:keymap_name = "greek"$/;"	v
b:keymap_name	vim82\keymap\greek_utf-8.vim	/^let b:keymap_name = "grk"$/;"	v
b:keymap_name	vim82\keymap\hebrew_cp1255.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	vim82\keymap\hebrew_iso-8859-8.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	vim82\keymap\hebrew_utf-8.vim	/^let b:keymap_name = "heb"$/;"	v
b:keymap_name	vim82\keymap\hebrewp_cp1255.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	vim82\keymap\hebrewp_iso-8859-8.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	vim82\keymap\hebrewp_utf-8.vim	/^let b:keymap_name = "hebp"$/;"	v
b:keymap_name	vim82\keymap\kana.vim	/^let b:keymap_name = "kana"$/;"	v
b:keymap_name	vim82\keymap\kazakh-jcuken.vim	/^let b:keymap_name = "kk"$/;"	v
b:keymap_name	vim82\keymap\lithuanian-baltic.vim	/^let b:keymap_name = "lt"$/;"	v
b:keymap_name	vim82\keymap\mongolian_utf-8.vim	/^let b:keymap_name = "mn"$/;"	v
b:keymap_name	vim82\keymap\oldturkic-orkhon_utf-8.vim	/^let b:keymap_name = "oto"$/;"	v
b:keymap_name	vim82\keymap\oldturkic-yenisei_utf-8.vim	/^let b:keymap_name = "oty"$/;"	v
b:keymap_name	vim82\keymap\persian-iranian_utf-8.vim	/^let b:keymap_name = "per"$/;"	v
b:keymap_name	vim82\keymap\pinyin.vim	/^let b:keymap_name = "py"$/;"	v
b:keymap_name	vim82\keymap\polish-slash_cp1250.vim	/^let b:keymap_name = "PL-slash-WIN"$/;"	v
b:keymap_name	vim82\keymap\polish-slash_cp852.vim	/^let b:keymap_name = "PL-slash-DOS"$/;"	v
b:keymap_name	vim82\keymap\polish-slash_iso-8859-2.vim	/^let b:keymap_name = "PL-slash-ISO"$/;"	v
b:keymap_name	vim82\keymap\polish-slash_utf-8.vim	/^let b:keymap_name = "PL-slash-UTF"$/;"	v
b:keymap_name	vim82\keymap\russian-dvorak.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	vim82\keymap\russian-jcuken.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	vim82\keymap\russian-jcukenmac.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	vim82\keymap\russian-jcukenwin.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	vim82\keymap\russian-jcukenwintype.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	vim82\keymap\russian-yawerty.vim	/^let b:keymap_name = "ru"$/;"	v
b:keymap_name	vim82\keymap\serbian-latin_utf-8.vim	/^let b:keymap_name = "serbian-UTF-8"$/;"	v
b:keymap_name	vim82\keymap\serbian_cp1250.vim	/^let b:keymap_name = "serbian-cp1250"$/;"	v
b:keymap_name	vim82\keymap\serbian_cp1251.vim	/^let b:keymap_name = "serbian-cp1251"$/;"	v
b:keymap_name	vim82\keymap\serbian_iso-8859-2.vim	/^let b:keymap_name = "serbian-iso-8859-2"$/;"	v
b:keymap_name	vim82\keymap\serbian_iso-8859-5.vim	/^let b:keymap_name = "serbian-iso-8859-5"$/;"	v
b:keymap_name	vim82\keymap\serbian_utf-8.vim	/^let b:keymap_name = "serbian-UTF-8"$/;"	v
b:keymap_name	vim82\keymap\sinhala-phonetic_utf-8.vim	/^let b:keymap_name = "sinhala"$/;"	v
b:keymap_name	vim82\keymap\slovak_cp1250.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	vim82\keymap\slovak_iso-8859-2.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	vim82\keymap\slovak_utf-8.vim	/^let b:keymap_name = "sk"$/;"	v
b:keymap_name	vim82\keymap\tamil_tscii.vim	/^let b:keymap_name = "tamil_tscii"$/;"	v
b:keymap_name	vim82\keymap\thaana-phonetic_utf-8.vim	/^let b:keymap_name= "thaana"$/;"	v
b:keymap_name	vim82\keymap\ukrainian-dvorak.vim	/^let b:keymap_name = "uk"$/;"	v
b:keymap_name	vim82\keymap\ukrainian-jcuken.vim	/^let b:keymap_name = "uk"$/;"	v
b:keymap_name	vim82\keymap\vietnamese-telex_utf-8.vim	/^let b:keymap_name = "vi"$/;"	v
b:keymap_name	vim82\keymap\vietnamese-viqr_utf-8.vim	/^let b:keymap_name = "vietnamese"$/;"	v
b:keymap_name	vim82\keymap\vietnamese-vni_utf-8.vim	/^let b:keymap_name = "vi"$/;"	v
b:lhs_markup	vim82\syntax\lhaskell.vim	/^	    let b:lhs_markup = "unknown"$/;"	v
b:lhs_markup	vim82\syntax\lhaskell.vim	/^	    let b:lhs_markup = matchstr(lhs_markup,'\\<\\%(tex\\|none\\)\\>')$/;"	v
b:lhs_markup	vim82\syntax\lhaskell.vim	/^	let b:lhs_markup = "plain"$/;"	v
b:lhs_markup	vim82\syntax\lhaskell.vim	/^	let b:lhs_markup = "tex"$/;"	v
b:lhs_markup	vim82\syntax\lhaskell.vim	/^	let b:lhs_markup = "unknown"$/;"	v
b:liquid_subtype	vim82\ftplugin\liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	vim82\ftplugin\liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	vim82\ftplugin\liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	vim82\ftplugin\liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype	vim82\syntax\liquid.vim	/^    let b:liquid_subtype = g:liquid_default_subtype$/;"	v
b:liquid_subtype	vim82\syntax\liquid.vim	/^    let b:liquid_subtype = matchstr(&filetype,'^liquid\\.\\zs\\w\\+')$/;"	v
b:liquid_subtype	vim82\syntax\liquid.vim	/^    let b:liquid_subtype = matchstr(substitute(expand('%:t'),'\\c\\%(\\.liquid\\)\\+$','',''),'\\.\\zs\\w\\+$')$/;"	v
b:liquid_subtype	vim82\syntax\liquid.vim	/^    let b:liquid_subtype = s:subtype$/;"	v
b:liquid_subtype	vim82\syntax\liquid.vim	/^  let b:liquid_subtype = matchstr(s:lines,'liquid_subtype=\\zs\\w\\+')$/;"	v
b:liquid_subtype_indentexpr	vim82\indent\liquid.vim	/^let b:liquid_subtype_indentexpr = &l:indentexpr$/;"	v
b:main_syntax	vim82\syntax\groff.vim	/^let b:main_syntax = "nroff"$/;"	v
b:match_ignorecase	vim82\ftplugin\abaqus.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	vim82\ftplugin\aspvbs.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	vim82\ftplugin\cmake.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	vim82\ftplugin\cobol.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	vim82\ftplugin\context.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\eiffel.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\falcon.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\fortran.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	vim82\ftplugin\hamster.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\html.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	vim82\ftplugin\ishd.vim	/^    let b:match_ignorecase=0$/;"	v
b:match_ignorecase	vim82\ftplugin\j.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\lua.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\mf.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\mp.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\nsis.vim	/^  let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	vim82\ftplugin\ocaml.vim	/^let b:match_ignorecase=0$/;"	v
b:match_ignorecase	vim82\ftplugin\pascal.vim	/^    let b:match_ignorecase = 1 " (pascal is case-insensitive)$/;"	v
b:match_ignorecase	vim82\ftplugin\plaintex.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\postscr.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\ruby.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\spec.vim	/^let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\sql.vim	/^    let b:match_ignorecase = 1$/;"	v
b:match_ignorecase	vim82\ftplugin\vb.vim	/^    let b:match_ignorecase=1$/;"	v
b:match_ignorecase	vim82\ftplugin\verilog.vim	/^  let b:match_ignorecase=0$/;"	v
b:match_ignorecase	vim82\ftplugin\vhdl.vim	/^  let b:match_ignorecase=1$/;"	v
b:match_ignorecase	vim82\ftplugin\vim.vim	/^  let b:match_ignorecase = 0$/;"	v
b:match_ignorecase	vim82\ftplugin\xml.vim	/^    let b:match_ignorecase=0$/;"	v
b:match_skip	vim82\ftplugin\c.vim	/^let b:match_skip = 's:comment\\|string\\|character\\|special'$/;"	v
b:match_skip	vim82\ftplugin\clojure.vim	/^	let b:match_skip = 's:comment\\|string\\|regex\\|character'$/;"	v
b:match_skip	vim82\ftplugin\context.vim	/^  let b:match_skip = 'r:\\\\\\@<!\\%(\\\\\\\\\\)*%'$/;"	v
b:match_skip	vim82\ftplugin\dtrace.vim	/^let b:match_skip = 's:comment\\|string\\|character'$/;"	v
b:match_skip	vim82\ftplugin\eiffel.vim	/^  let b:match_skip = 's:\\<eiffel\\%(Comment\\|String\\|Operator\\)\\>'$/;"	v
b:match_skip	vim82\ftplugin\hog.vim	/^    let b:match_skip = 'r:\\\\.\\{-}$\\|^\\s*#.\\{-}$\\|^\\s*$'$/;"	v
b:match_skip	vim82\ftplugin\mf.vim	/^  let b:match_skip = 'synIDattr(synID(line("."), col("."), 1), "name")$/;"	v
b:match_skip	vim82\ftplugin\mp.vim	/^  let b:match_skip = 'synIDattr(synID(line("."), col("."), 1), "name")$/;"	v
b:match_skip	vim82\ftplugin\perl.vim	/^let b:match_skip = 's:comment\\|string\\|perlQQ\\|perlShellCommand\\|perlHereDoc\\|perlSubstitution\\|perlTranslation\\|perlMatch\\|perlFormatField'$/;"	v
b:match_skip	vim82\ftplugin\ruby.vim	/^  let b:match_skip =$/;"	v
b:match_skip	vim82\ftplugin\vim.vim	/^  let b:match_skip = 'synIDattr(synID(line("."),col("."),1),"name")$/;"	v
b:match_skip	vim82\ftplugin\zimbu.vim	/^let b:match_skip = 's:comment\\|string\\|zimbuchar'$/;"	v
b:match_skip	vim82\ftplugin\zsh.vim	/^let b:match_skip = 's:comment\\|string\\|heredoc\\|subst'$/;"	v
b:match_words	vim82\ftplugin\abaqus.vim	/^    let b:match_words = $/;"	v
b:match_words	vim82\ftplugin\ada.vim	/^   let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\aspvbs.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\c.vim	/^let b:match_words = '^\\s*#\\s*if\\(\\|def\\|ndef\\)\\>:^\\s*#\\s*elif\\>:^\\s*#\\s*else\\>:^\\s*#\\s*endif\\>'$/;"	v
b:match_words	vim82\ftplugin\chicken.vim	/^  let b:match_words = '#>:<#'$/;"	v
b:match_words	vim82\ftplugin\clojure.vim	/^	let b:match_words = &matchpairs$/;"	v
b:match_words	vim82\ftplugin\cmake.vim	/^  let b:match_words = '\\<if\\>:\\<elseif\\>\\|\\<else\\>:\\<endif\\>'$/;"	v
b:match_words	vim82\ftplugin\cobol.vim	/^    let b:match_words=$/;"	v
b:match_words	vim82\ftplugin\context.vim	/^  let b:match_words = '(:),\\[:],{:},\\\\(:\\\\),\\\\\\[:\\\\],' .$/;"	v
b:match_words	vim82\ftplugin\csc.vim	/^    let b:match_words=$/;"	v
b:match_words	vim82\ftplugin\csh.vim	/^    let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\dtd.vim	/^    let b:match_words = '<!--:-->,<!:>'$/;"	v
b:match_words	vim82\ftplugin\dtrace.vim	/^let b:match_words = &matchpairs$/;"	v
b:match_words	vim82\ftplugin\eiffel.vim	/^  let b:match_words = '\\%^:' .$/;"	v
b:match_words	vim82\ftplugin\eruby.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	vim82\ftplugin\falcon.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\fortran.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\framescript.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\haml.vim	/^  let b:match_words = s:match_words$/;"	v
b:match_words	vim82\ftplugin\hamster.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\hog.vim	/^    let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\html.vim	/^    let b:match_words = '<:>,' .$/;"	v
b:match_words	vim82\ftplugin\ishd.vim	/^    let b:match_words=$/;"	v
b:match_words	vim82\ftplugin\j.vim	/^  let b:match_words = '^\\%(\\s*Note\\|.\\{-}\\<\\%([0-4]\\|13\\|noun\\|adverb\\|conjunction\\|verb\\|monad\\|dyad\\)\\s\\+\\%(\\:\\s*0\\|def\\s\\+0\\|define\\)\\)\\>:^\\s*\\:\\s*$:^\\s*)\\s*$'$/;"	v
b:match_words	vim82\ftplugin\jsp.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	vim82\ftplugin\kconfig.vim	/^  let b:match_words = '^\\<menu\\>:\\<endmenu\\>,^\\<if\\>:\\<endif\\>,^\\<choice\\>:\\<endchoice\\>'$/;"	v
b:match_words	vim82\ftplugin\liquid.vim	/^  let b:match_words .= ','$/;"	v
b:match_words	vim82\ftplugin\liquid.vim	/^  let b:match_words .= '\\<\\%(if\\w*\\|unless\\|case\\)\\>:\\<\\%(elsif\\|else\\|when\\)\\>:\\<end\\%(if\\w*\\|unless\\|case\\)\\>,\\<\\%(for\\|tablerow\\)\\>:\\%({%\\s*\\)\\@<=empty\\>:\\<end\\%(for\\|tablerow\\)\\>,<\\(capture\\|comment\\|highlight\\)\\>:\\<end\\1\\>'$/;"	v
b:match_words	vim82\ftplugin\liquid.vim	/^  let b:match_words = ''$/;"	v
b:match_words	vim82\ftplugin\lua.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\make.vim	/^  let b:match_words = '^ *ifn\\=\\(eq\\|def\\)\\>:^ *else\\(\\s\\+ifn\\=\\(eq\\|def\\)\\)\\=\\>:^ *endif\\>,\\<define\\>:\\<endef\\>,^!\\s*if\\(n\\=def\\)\\=\\>:^!\\s*else\\(if\\(n\\=def\\)\\=\\)\\=\\>:^!\\s*endif\\>'$/;"	v
b:match_words	vim82\ftplugin\matlab.vim	/^ let b:match_words=$/;"	v
b:match_words	vim82\ftplugin\mf.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\mp.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\nsis.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\ocaml.vim	/^let b:match_words = b:mw$/;"	v
b:match_words	vim82\ftplugin\pascal.vim	/^    let b:match_words .= ',\\<if\\>:\\<else\\>'$/;"	v
b:match_words	vim82\ftplugin\pascal.vim	/^    let b:match_words .= ',\\<repeat\\>:\\<until\\>'$/;"	v
b:match_words	vim82\ftplugin\pascal.vim	/^    let b:match_words .= ':\\<^\\s*\\%(except\\|finally\\)\\>:\\<end\\>'$/;"	v
b:match_words	vim82\ftplugin\pascal.vim	/^    let b:match_words = '\\<\\%(begin\\|case\\|record\\|object\\|try\\)\\>'$/;"	v
b:match_words	vim82\ftplugin\pdf.vim	/^    let b:match_words = '\\<\\%(\\d\\+\\s\\+\\d\\+\\s\\+\\)obj\\>:\\<endobj\\>,\\<stream$:\\<endstream\\>,\\<xref\\>:\\<trailer\\>,<<:>>'$/;"	v
b:match_words	vim82\ftplugin\perl.vim	/^let b:match_words = '\\<if\\>:\\<elsif\\>:\\<else\\>'$/;"	v
b:match_words	vim82\ftplugin\php.vim	/^    let b:match_words = '<?php:?>,\\<switch\\>:\\<endswitch\\>,' .$/;"	v
b:match_words	vim82\ftplugin\postscr.vim	/^  let b:match_words = '<<:>>,\\<begin\\>:\\<end\\>,\\<save\\>:\\<restore\\>,\\<gsave\\>:\\<grestore\\>'$/;"	v
b:match_words	vim82\ftplugin\ruby.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\sh.vim	/^    let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\spec.vim	/^let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\sql.vim	/^    let b:match_words = &matchpairs .$/;"	v
b:match_words	vim82\ftplugin\tex.vim	/^  let b:match_words .= ',\\\\begin\\s*\\({\\a\\+\\*\\=}\\):\\\\end\\s*\\1'$/;"	v
b:match_words	vim82\ftplugin\vb.vim	/^    let b:match_words=$/;"	v
b:match_words	vim82\ftplugin\verilog.vim	/^  let b:match_words=$/;"	v
b:match_words	vim82\ftplugin\vhdl.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\vim.vim	/^  let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\xhtml.vim	/^    let b:match_words = s:match_words$/;"	v
b:match_words	vim82\ftplugin\xml.vim	/^    let b:match_words =$/;"	v
b:match_words	vim82\ftplugin\zimbu.vim	/^let b:match_words = '\\(^\\s*\\)\\@<=\\(MODULE\\|CLASS\\|INTERFACE\\|BITS\\|ENUM\\|SHARED\\|FUNC\\|REPLACE\\|DEFINE\\|PROC\\|EQUAL\\|MAIN\\|IF\\|GENERATE_IF\\|WHILE\\|REPEAT\\|WITH\\|DO\\|FOR\\|SWITCH\\|TRY\\)\\>\\|{\\s*$:\\(^\\s*\\)\\@<=\\(ELSE\\|ELSEIF\\|GENERATE_ELSE\\|GENERATE_ELSEIF\\|CATCH\\|FINALLY\\)\\>:\\(^\\s*\\)\\@<=\\(}\\|\\<UNTIL\\>\\)'$/;"	v
b:match_words	vim82\ftplugin\zsh.vim	/^let b:match_words = ',\\<if\\>:\\<elif\\>:\\<else\\>:\\<fi\\>'$/;"	v
b:match_words	vim82\syntax\cdl.vim	/^let b:match_words='\\<if\\>:\\<then\\>:\\<elseif\\>:\\<else\\>:\\<endif\\>'$/;"	v
b:match_words	vim82\syntax\cmod.vim	/^let b:match_words = "({:}\\\\@1<=),^\\s*#\\s*\\%(if\\%(n\\?def\\)\\|else\\|el\\%(se\\)\\?if\\|endif\\)\\>"$/;"	v
b:match_words	vim82\syntax\pike.vim	/^let b:match_words = "({:}\\\\@1<=),(\\\\[:]\\\\@1<=),(<:>\\\\@1<=),^\\s*#\\s*\\%(if\\%(n\\?def\\)\\|else\\|el\\%(se\\)\\?if\\|endif\\)\\>"$/;"	v
b:mp_metafun_macros	vim82\syntax\context.vim	/^  let b:mp_metafun_macros = 1 " Highlight MetaFun keywords$/;"	v
b:mw	vim82\ftplugin\ocaml.vim	/^let b:mw =         '\\<let\\>:\\<and\\>:\\(\\<in\\>\\|;;\\)'$/;"	v
b:mw	vim82\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<\\(for\\|while\\)\\>:\\<do\\>:\\<done\\>'$/;"	v
b:mw	vim82\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<\\(match\\|try\\)\\>:\\<with\\>'$/;"	v
b:mw	vim82\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<\\(object\\|sig\\|struct\\|begin\\)\\>:\\<end\\>'$/;"	v
b:mw	vim82\ftplugin\ocaml.vim	/^let b:mw = b:mw . ',\\<if\\>:\\<then\\>:\\<else\\>'$/;"	v
b:next	vim82\ftplugin\python.vim	/^let b:next='\\v%$\\|^\\s*(class\\|def\\|async def)>'$/;"	v
b:next_end	vim82\ftplugin\python.vim	/^let b:next_end='\\v\\S\\n*(%$\\|^(\\s*\\n*)*(class\\|def\\|async def)\\|^\\S)'$/;"	v
b:next_endtoplevel	vim82\ftplugin\python.vim	/^let b:next_endtoplevel='\\v%$\\|\\S.*\\n+(def\\|class)'$/;"	v
b:next_toplevel	vim82\ftplugin\python.vim	/^let b:next_toplevel='\\v%$\\|^(class\\|def\\|async def)>'$/;"	v
b:nroff_is_groff	vim82\syntax\groff.vim	/^let b:nroff_is_groff = 1$/;"	v
b:optionsset	vim82\indent\php.vim	/^let b:optionsset = 0$/;"	v
b:parent_match	vim82\ftplugin\python.vim	/^let b:parent_match = '^\\.\\(\\.\\)\\@!'$/;"	v
b:parent_sub	vim82\ftplugin\python.vim	/^let b:parent_sub = '.\/'$/;"	v
b:pdf_tagstack	vim82\ftplugin\pdf.vim	/^    let b:pdf_tagstack = []$/;"	v
b:prev	vim82\ftplugin\python.vim	/^let b:prev='\\v^\\s*(class\\|def\\|async def)>'$/;"	v
b:prev_end	vim82\ftplugin\python.vim	/^let b:prev_end='\\v\\S\\n*(^(\\s*\\n*)*(class\\|def\\|async def)\\|^\\S)'$/;"	v
b:prev_endtoplevel	vim82\ftplugin\python.vim	/^let b:prev_endtoplevel='\\v\\S.*\\n+(def\\|class)'$/;"	v
b:prev_toplevel	vim82\ftplugin\python.vim	/^let b:prev_toplevel='\\v^(class\\|def\\|async def)>'$/;"	v
b:ruby_no_expensive	vim82\syntax\haml.vim	/^let b:ruby_no_expensive = 1$/;"	v
b:ruby_no_expensive	vim82\syntax\ruby.vim	/^  let b:ruby_no_expensive = 1$/;"	v
b:ruby_version	vim82\ftplugin\ruby.vim	/^    let b:ruby_version = get(readfile(s:version_file, '', 1), '')$/;"	v
b:rust_last_args	vim82\ftplugin\rust.vim	/^	let b:rust_last_args = []$/;"	v
b:rust_last_rustc_args	vim82\ftplugin\rust.vim	/^	let b:rust_last_rustc_args = []$/;"	v
b:rust_original_delimitMate_excluded_regions	vim82\ftplugin\rust.vim	/^		let b:rust_original_delimitMate_excluded_regions = b:delimitMate_excluded_regions$/;"	v
b:rust_set_conceallevel	vim82\ftplugin\rust.vim	/^	let b:rust_set_conceallevel=1$/;"	v
b:rust_set_foldmethod	vim82\ftplugin\rust.vim	/^	let b:rust_set_foldmethod=1$/;"	v
b:spell_options	vim82\syntax\groovy.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	vim82\syntax\java.vim	/^let b:spell_options="contained"$/;"	v
b:spell_options	vim82\syntax\wsml.vim	/^let b:spell_options="contained"$/;"	v
b:sql_compl_savefunc	vim82\ftplugin\sql.vim	/^    let b:sql_compl_savefunc = &omnifunc$/;"	v
b:sql_vis	vim82\ftplugin\sql.vim	/^    let b:sql_vis = 1$/;"	v
b:synhead	vim82\syntax\hitest.vim	/^	    let b:synhead = b:synhead."s"$/;"	v
b:synhead	vim82\syntax\hitest.vim	/^	 let b:synhead = b:synhead." - filetype"$/;"	v
b:synhead	vim82\syntax\hitest.vim	/^	 let b:synhead = b:synhead.":".@a$/;"	v
b:synhead	vim82\syntax\hitest.vim	/^   let b:synhead = "Syntax highlighting groups"$/;"	v
b:tex_isk	vim82\syntax\tex.vim	/^  let b:tex_isk= '@,'.g:tex_isk$/;"	v
b:tex_isk	vim82\syntax\tex.vim	/^  let b:tex_isk= g:tex_isk$/;"	v
b:tex_isk	vim82\syntax\tex.vim	/^ let b:tex_isk="48-57,a-z,A-Z,192-255"$/;"	v
b:tex_isk	vim82\syntax\tex.vim	/^ let b:tex_isk="@,48-57,a-z,A-Z,192-255"$/;"	v
b:tex_stylish	vim82\syntax\tex.vim	/^  let b:tex_stylish= 0$/;"	v
b:tex_stylish	vim82\syntax\tex.vim	/^  let b:tex_stylish= 1$/;"	v
b:tex_stylish	vim82\syntax\tex.vim	/^ let b:tex_stylish= g:tex_stylish$/;"	v
b:tt2_syn_inc_perl	vim82\syntax\tt2.vim	/^    let b:tt2_syn_inc_perl = 1$/;"	v
b:tt2_syn_tags	vim82\syntax\tt2.vim	/^    let b:tt2_syn_tags = '\\[% %]'$/;"	v
b:undo_ftplugin	vim82\ftplugin\a2ps.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\aap.vim	/^let b:undo_ftplugin = "setl fo< com< et<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\abaqus.vim	/^    let b:undo_ftplugin .= " foldexpr< foldmethod<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\abaqus.vim	/^    let b:undo_ftplugin .= "|unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\abaqus.vim	/^    let b:undo_ftplugin .= "|unlet! b:match_ignorecase b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\abaqus.vim	/^let b:undo_ftplugin .= "|unmap <buffer> [[|unmap <buffer> ]]"$/;"	v
b:undo_ftplugin	vim82\ftplugin\abaqus.vim	/^let b:undo_ftplugin = "let s:cpo_save = &cpoptions|"$/;"	v
b:undo_ftplugin	vim82\ftplugin\abaqus.vim	/^let b:undo_ftplugin = "setlocal include< includeexpr< isfname<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\alsaconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\ant.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\arch.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\aspvbs.vim	/^let b:undo_ftplugin = "unlet! b:match_words b:match_ignorecase b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\awk.vim	/^let b:undo_ftplugin = "setl commentstring<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\bdf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\bst.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\c.vim	/^let b:undo_ftplugin = "setl fo< com< ofu< cms< def< inc< | if has('vms') | setl isk< | endif"$/;"	v
b:undo_ftplugin	vim82\ftplugin\calendar.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\cdrdaoconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\cfg.vim	/^let b:undo_ftplugin = "setl cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\changelog.vim	/^    let b:undo_ftplugin .= " tw<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\changelog.vim	/^  let b:undo_ftplugin = "setl com< fo< et< ai<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\chicken.vim	/^  let b:undo_ftplugin = b:undo_ftplugin . ' | unlet! b:match_words'$/;"	v
b:undo_ftplugin	vim82\ftplugin\chicken.vim	/^let b:undo_ftplugin = b:undo_ftplugin . ' keywordprg<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\clojure.vim	/^		let b:undo_ftplugin .= ' | setlocal ' . s:setting . '<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\clojure.vim	/^	let b:undo_ftplugin .= ' | setlocal path<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
b:undo_ftplugin	vim82\ftplugin\clojure.vim	/^	let b:undo_ftplugin .= ' | unlet! b:match_words b:match_skip'$/;"	v
b:undo_ftplugin	vim82\ftplugin\clojure.vim	/^let b:undo_ftplugin = 'setlocal iskeyword< define< formatoptions< comments< commentstring< lispwords<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\cmake.vim	/^  let b:undo_ftplugin .= "| unlet b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\cmake.vim	/^let b:undo_ftplugin = "setl commentstring<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\cobol.vim	/^    let b:undo_ftplugin = b:undo_ftplugin .$/;"	v
b:undo_ftplugin	vim82\ftplugin\cobol.vim	/^let b:undo_ftplugin = "setlocal com< cms< fo< et< tw<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\config.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\context.vim	/^let b:undo_ftplugin = "setl com< cms< def< inc< sua< fo< ofu<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\crm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\csc.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\csh.vim	/^let b:undo_ftplugin = "setlocal commentstring< formatoptions<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\css.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo< ofu<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\cucumber.vim	/^  let b:undo_ftplugin .=$/;"	v
b:undo_ftplugin	vim82\ftplugin\cucumber.vim	/^let b:undo_ftplugin = "setl fo< com< cms< ofu<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\cvsrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\debchangelog.vim	/^let b:undo_ftplugin = 'setlocal tw< comments< foldmethod< foldexpr< foldtext<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\debcontrol.vim	/^let b:undo_ftplugin = 'setlocal tw< foldmethod< foldexpr< foldtext<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\denyhosts.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\dictconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\dictdconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\diff.vim	/^let b:undo_ftplugin = "setl modeline<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\dircolors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\docbk.vim	/^let b:undo_ftplugin = "unlet! b:docbk_type"$/;"	v
b:undo_ftplugin	vim82\ftplugin\dockerfile.vim	/^let b:undo_ftplugin = "setl commentstring<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\dosbatch.vim	/^let b:undo_ftplugin = "setlocal comments< formatoptions< keywordprg<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\dosini.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\dtd.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\dtrace.vim	/^let b:undo_ftplugin = "setl fo< com< cms< isk<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\eiffel.vim	/^  let b:undo_ftplugin = b:undo_ftplugin .$/;"	v
b:undo_ftplugin	vim82\ftplugin\eiffel.vim	/^let b:undo_ftplugin = "setl fo< com< cms<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\elinks.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\erlang.vim	/^let b:undo_ftplugin = "setlocal foldmethod< foldexpr< foldtext<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\eruby.vim	/^let b:undo_ftplugin = "setl cms< "$/;"	v
b:undo_ftplugin	vim82\ftplugin\eterm.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\falcon.vim	/^let b:undo_ftplugin = "setlocal tabstop< shiftwidth< expandtab< fileencoding<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\fetchmail.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\flexwiki.vim	/^let b:undo_ftplugin = "setl tw< wrap< lbr< et< ts< fenc< bomb< ff<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\fortran.vim	/^let b:undo_ftplugin = "setl fo< com< tw< cms< et< inc< sua<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\framescript.vim	/^let b:undo_ftplugin = "setl com< cms< fo< inc< | unlet! b:matchwords"$/;"	v
b:undo_ftplugin	vim82\ftplugin\fvwm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\gdb.vim	/^let b:undo_ftplugin = "setlocal cms<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\git.vim	/^let b:undo_ftplugin = "setl keywordprg< path< includeexpr<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\gitcommit.vim	/^let b:undo_ftplugin = 'setl modeline< tabstop< formatoptions< tw< com< cms< formatlistpat<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\gitcommit.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|delc DiffGitCached"$/;"	v
b:undo_ftplugin	vim82\ftplugin\gitconfig.vim	/^let b:undo_ftplugin = "setl fo< com< cms<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\gitrebase.vim	/^  let b:undo_ftplugin = ""$/;"	v
b:undo_ftplugin	vim82\ftplugin\gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin . "|exe 'nunmap <buffer> K'|exe 'nunmap <buffer> <C-A>'|exe 'nunmap <buffer> <C-X>'"$/;"	v
b:undo_ftplugin	vim82\ftplugin\gitrebase.vim	/^let b:undo_ftplugin = b:undo_ftplugin."|setl com< cms< fo< ml<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\go.vim	/^let b:undo_ftplugin = 'setl fo< com< cms<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\gpg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\groovy.vim	/^let b:undo_ftplugin = 'setlocal commentstring<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\group.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\grub.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\haml.vim	/^let b:undo_ftplugin = "setl def< cms< com< "$/;"	v
b:undo_ftplugin	vim82\ftplugin\hamster.vim	/^let b:undo_ftplugin = "setl fo< com< tw< commentstring<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\haskell.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\help.vim	/^let b:undo_ftplugin = "setl fo< tw< cole< cocu< keywordprg<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\hgcommit.vim	/^let b:undo_ftplugin = 'setl modeline<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\hostconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\hostsaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\html.vim	/^let b:undo_ftplugin = "setlocal commentstring< matchpairs< omnifunc< comments< formatoptions<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\indent.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\initex.vim	/^let b:undo_ftplugin = "setl com< cms< define< include< sua<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\j.vim	/^  let b:undo_ftplugin .= ' | unlet! b:browsefilter'$/;"	v
b:undo_ftplugin	vim82\ftplugin\j.vim	/^  let b:undo_ftplugin .= ' | unlet! b:match_ignorecase b:match_words'$/;"	v
b:undo_ftplugin	vim82\ftplugin\j.vim	/^let b:undo_ftplugin .= ' | silent! execute "unmap <buffer> ]]"'$/;"	v
b:undo_ftplugin	vim82\ftplugin\j.vim	/^let b:undo_ftplugin = 'setlocal suffixesadd< includeexpr< include< path< matchpairs< formatoptions< commentstring< comments< iskeyword<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\java.vim	/^let b:undo_ftplugin = "setlocal suffixes< suffixesadd<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\javascript.vim	/^let b:undo_ftplugin = "setl fo< ofu< com< cms<" $/;"	v
b:undo_ftplugin	vim82\ftplugin\jproperties.vim	/^let b:undo_ftplugin = "setl cms< com< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\json.vim	/^let b:undo_ftplugin = 'setlocal formatoptions< comments< commentstring<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\jsp.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\kconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\kwt.vim	/^    let b:undo_ftplugin = "setlocal efm<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\kwt.vim	/^    let b:undo_ftplugin = b:undo_ftplugin . " | setlocal efm<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\ld.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\less.vim	/^let b:undo_ftplugin = "setl cms< def< inc< inex< ofu< sua<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\lftp.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\libao.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\limits.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\liquid.vim	/^  let b:undo_ftplugin .= '|'$/;"	v
b:undo_ftplugin	vim82\ftplugin\liquid.vim	/^  let b:undo_ftplugin = ''$/;"	v
b:undo_ftplugin	vim82\ftplugin\liquid.vim	/^let b:undo_ftplugin .= 'setl cms< | unlet! b:browsefilter b:match_words'$/;"	v
b:undo_ftplugin	vim82\ftplugin\lisp.vim	/^let b:undo_ftplugin = "setlocal comments< define< formatoptions< iskeyword< lisp< commentstring<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\logcheck.vim	/^let b:undo_ftplugin = 'setl fo<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\loginaccess.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\logindefs.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\logtalk.vim	/^let b:undo_ftplugin = "setl ts< sw< fdm< fdc< ai< dict<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\lua.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< suffixesadd<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\m4.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\mail.vim	/^let b:undo_ftplugin = "setl modeline< tw< fo< comments<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\mailaliases.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\mailcap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\make.vim	/^let b:undo_ftplugin = "setl et< sts< fo< com< cms< inc<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\man.vim	/^      let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\man.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\man.vim	/^  let b:undo_ftplugin = "setlocal iskeyword<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\manconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\markdown.vim	/^  let b:undo_ftplugin .= " foldexpr< foldmethod< foldtext<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\markdown.vim	/^  let b:undo_ftplugin .= "|setl cms< com< fo< flp<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\markdown.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\masm.vim	/^let b:undo_ftplugin = "setl iskeyword<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\matlab.vim	/^let b:undo_ftplugin = "setlocal suffixesadd< suffixes< commentstring< "$/;"	v
b:undo_ftplugin	vim82\ftplugin\mf.vim	/^let b:undo_ftplugin = "setl com< cms< fo< sua< inc< def< ofu<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\mma.vim	/^let b:undo_ftplugin = "setlocal commentstring<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\modconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\mp.vim	/^let b:undo_ftplugin = "setl com< cms< fo< sua< inc< def< ofu<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\mplayerconf.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\mrxvtrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\msmessages.vim	/^let b:undo_ftplugin = "setl fo< com< cms< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\muttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\nanorc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\neomuttrc.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\netrc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\nsis.vim	/^let b:undo_ftplugin = "setl com< cms< fo< def< inc<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\ocaml.vim	/^let b:undo_ftplugin = "setlocal efm< foldmethod< foldexpr<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\occam.vim	/^let b:undo_ftplugin = "setlocal shiftwidth< softtabstop< expandtab<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\pamconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\pascal.vim	/^let b:undo_ftplugin = "unlet! b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\passwd.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\pdf.vim	/^let b:undo_ftplugin .= " | silent! nunmap <buffer> <C-]> | silent! nunmap <buffer> <C-T>"$/;"	v
b:undo_ftplugin	vim82\ftplugin\pdf.vim	/^let b:undo_ftplugin = "setlocal cms< com< | unlet! b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\perl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isk< isf< kp< path<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\perl6.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isk<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\php.vim	/^let b:undo_ftplugin = "setlocal commentstring< include< omnifunc<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\pinfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\plaintex.vim	/^let b:undo_ftplugin .= "| unlet! b:match_ignorecase b:match_skip b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\postscr.vim	/^let b:undo_ftplugin = "setlocal comments< formatoptions<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\procmail.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\prolog.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\protocols.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\python.vim	/^let b:undo_ftplugin = 'setlocal cinkeys<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\qf.vim	/^  let b:undo_ftplugin = "set stl<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\quake.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\r.vim	/^let b:undo_ftplugin = "setl cms< com< fo< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\racc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\readline.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\registry.vim	/^let b:undo_ftplugin =$/;"	v
b:undo_ftplugin	vim82\ftplugin\rhelp.vim	/^let b:undo_ftplugin = "setl isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rmd.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rmd.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rnc.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rnoweb.vim	/^  let b:undo_ftplugin .= " | setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rnoweb.vim	/^  let b:undo_ftplugin = "setl isk< sua< com< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rpl.vim	/^let b:undo_ftplugin = "setlocal fo< comments<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rrst.vim	/^  let b:undo_ftplugin .= " | setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rrst.vim	/^  let b:undo_ftplugin = "setl cms< com< fo< flp< isk< | unlet! b:browsefilter"$/;"	v
b:undo_ftplugin	vim82\ftplugin\rst.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\ruby.vim	/^    let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\ruby.vim	/^  let b:undo_ftplugin .= "| setl bexpr="$/;"	v
b:undo_ftplugin	vim82\ftplugin\ruby.vim	/^  let b:undo_ftplugin .= ' | setl sw< sts< et<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\ruby.vim	/^  let b:undo_ftplugin = b:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\ruby.vim	/^let b:undo_ftplugin .= "| sil! cunmap <buffer> <Plug><ctag>| sil! cunmap <buffer> <Plug><cfile>"$/;"	v
b:undo_ftplugin	vim82\ftplugin\ruby.vim	/^let b:undo_ftplugin = "setl inc= sua= path= tags= fo< com< cms< kp="$/;"	v
b:undo_ftplugin	vim82\ftplugin\rust.vim	/^let b:undo_ftplugin = "$/;"	v
b:undo_ftplugin	vim82\ftplugin\sass.vim	/^  let b:undo_ftplugin .= ' isk<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\sass.vim	/^let b:undo_ftplugin = "setl com< cms< def< inc< inex< ofu< sua<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\scheme.vim	/^let b:undo_ftplugin = 'setl lisp< comments< commentstring< define< iskeyword<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\scheme.vim	/^let b:undo_ftplugin = b:undo_ftplugin . ' lispwords<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\screen.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\sensors.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\services.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\setserial.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\sgml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\sh.vim	/^let b:undo_ftplugin = "setlocal cms< | unlet! b:browsefilter b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\sieve.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\slpconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\slpreg.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\slpspi.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\spec.vim	/^let b:undo_ftplugin = "unlet! b:match_ignorecase b:match_words"$/;"	v
b:undo_ftplugin	vim82\ftplugin\sql.vim	/^let b:undo_ftplugin = "setl comments< formatoptions< define< omnifunc<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\sshconfig.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\sudoers.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\svg.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\sysctl.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\systemd.vim	/^  let b:undo_ftplugin .= '| setlocal keywordprg< iskeyword<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\systemd.vim	/^  let b:undo_ftplugin = 'setlocal keywordprg< iskeyword<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\tcl.vim	/^let b:undo_ftplugin = "setlocal fo< com< cms< inc< inex< def< isf< kp<" .$/;"	v
b:undo_ftplugin	vim82\ftplugin\tcsh.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\terminfo.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\tex.vim	/^let b:undo_ftplugin .= "| setl inex<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\text.vim	/^let b:undo_ftplugin = 'setlocal comments< commentstring<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\treetop.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\udevconf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\udevperm.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\udevrules.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\updatedb.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\verilog.vim	/^let b:undo_ftplugin = "setlocal fo< com< tw<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\vim.vim	/^let b:undo_ftplugin = "call VimFtpluginUndo()"$/;"	v
b:undo_ftplugin	vim82\ftplugin\vroom.vim	/^let b:undo_ftplugin = 'setlocal formatoptions< shiftwidth< softtabstop<' .$/;"	v
b:undo_ftplugin	vim82\ftplugin\wast.vim	/^let b:undo_ftplugin = "setlocal comments< commentstring< formatoptions< iskeyword<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\xdefaults.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\xf86conf.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\xhtml.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter b:match_words | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\xinetd.vim	/^let b:undo_ftplugin = "setl com< cms< inc< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\xml.vim	/^let b:undo_ftplugin = "setlocal commentstring< comments< formatoptions< formatexpr< " .$/;"	v
b:undo_ftplugin	vim82\ftplugin\xmodmap.vim	/^let b:undo_ftplugin = "setl com< cms< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\xsd.vim	/^let b:undo_ftplugin = "unlet! b:browsefilter | " . s:undo_ftplugin$/;"	v
b:undo_ftplugin	vim82\ftplugin\yaml.vim	/^  let b:undo_ftplugin ..= " sw< sts<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\yaml.vim	/^let b:undo_ftplugin = "setl com< cms< et< fo<"$/;"	v
b:undo_ftplugin	vim82\ftplugin\zimbu.vim	/^let b:undo_ftplugin = "setl fo< com< ofu< efm< tw< et< sts< sw< | if has('vms') | setl isk< | endif"$/;"	v
b:undo_ftplugin	vim82\ftplugin\zsh.vim	/^  let b:undo_ftplugin .= 'keywordprg< errorformat< makeprg<'$/;"	v
b:undo_ftplugin	vim82\ftplugin\zsh.vim	/^let b:undo_ftplugin = "setl com< cms< fo< "$/;"	v
b:undo_indent	vim82\indent\bib.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	vim82\indent\c.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	vim82\indent\changelog.vim	/^let b:undo_indent = "setl ai<"$/;"	v
b:undo_indent	vim82\indent\clojure.vim	/^	let b:undo_indent .= '| setlocal lisp<'$/;"	v
b:undo_indent	vim82\indent\clojure.vim	/^let b:undo_indent = 'setlocal autoindent< smartindent< expandtab< softtabstop< shiftwidth< indentexpr< indentkeys<'$/;"	v
b:undo_indent	vim82\indent\context.vim	/^let b:undo_indent = "setl indentexpr<"$/;"	v
b:undo_indent	vim82\indent\cpp.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	vim82\indent\cs.vim	/^let b:undo_indent = 'setlocal indentexpr<'$/;"	v
b:undo_indent	vim82\indent\css.vim	/^let b:undo_indent = "setl smartindent< indentkeys< indentexpr<"$/;"	v
b:undo_indent	vim82\indent\cucumber.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
b:undo_indent	vim82\indent\cuda.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	vim82\indent\dtrace.vim	/^let b:undo_indent = "setl cin<"$/;"	v
b:undo_indent	vim82\indent\eiffel.vim	/^let b:undo_indent = "setl smartindent< indentkeys< indentexpr< autoindent< comments< "$/;"	v
b:undo_indent	vim82\indent\gitconfig.vim	/^let b:undo_indent = 'setl ai< inde< indk<'$/;"	v
b:undo_indent	vim82\indent\hog.vim	/^let b:undo_indent = 'setlocal smartindent< indentexpr< indentkeys<'$/;"	v
b:undo_indent	vim82\indent\html.vim	/^let b:undo_indent = "setlocal inde< indk<"$/;"	v
b:undo_indent	vim82\indent\ishd.vim	/^let b:undo_indent = "setl ai< indentexpr< indentkeys<"$/;"	v
b:undo_indent	vim82\indent\j.vim	/^let b:undo_indent = 'setlocal indentkeys< indentexpr<'$/;"	v
b:undo_indent	vim82\indent\java.vim	/^let b:undo_indent = "set cin< cino< indentkeys< indentexpr<"$/;"	v
b:undo_indent	vim82\indent\javascript.vim	/^let b:undo_indent = 'setlocal indentexpr< smartindent< autoindent< indentkeys<'$/;"	v
b:undo_indent	vim82\indent\lifelines.vim	/^let b:undo_indent = "setl cin< cino< cinw<"$/;"	v
b:undo_indent	vim82\indent\lisp.vim	/^let b:undo_indent = "setl ai< si<"$/;"	v
b:undo_indent	vim82\indent\mp.vim	/^let b:undo_indent = "setl indentkeys< indentexpr<"$/;"	v
b:undo_indent	vim82\indent\rpl.vim	/^let b:undo_indent = "set ai< indentkeys< indentexpr<"$/;"	v
b:undo_indent	vim82\indent\sh.vim	/^let b:undo_indent = 'setlocal indentexpr< indentkeys< smartindent<'$/;"	v
b:undo_indent	vim82\indent\sshconfig.vim	/^let b:undo_indent = "setlocal autoindent< indentexpr< indentkeys<"$/;"	v
b:undo_indent	vim82\indent\vb.vim	/^let b:undo_indent = "set ai< indentexpr< indentkeys<"$/;"	v
b:undo_indent	vim82\indent\vim.vim	/^let b:undo_indent = "setl indentkeys< indentexpr<"$/;"	v
b:undo_indent	vim82\indent\vroom.vim	/^let b:undo_indent = 'setlocal autoindent<'$/;"	v
b:undo_indent	vim82\indent\wast.vim	/^let b:undo_indent = "setl lisp< indentexpr<"$/;"	v
b:undo_indent	vim82\indent\yaml.vim	/^let b:undo_indent = 'setlocal indentexpr< indentkeys< smartindent<'$/;"	v
b:undo_indent	vim82\indent\zimbu.vim	/^let b:undo_indent = "setl et< sw< ai< indentkeys< indentexpr="$/;"	v
b:various	vim82\syntax\hitest.vim	/^let b:various = &highlight.',:Normal,:Cursor,:,'$/;"	v
b:vera_minlines	vim82\syntax\vera.vim	/^    let b:vera_minlines = 15	" mostly for () constructs$/;"	v
b:vera_minlines	vim82\syntax\vera.vim	/^    let b:vera_minlines = 50	" #if 0 constructs can be long$/;"	v
b:vera_minlines	vim82\syntax\vera.vim	/^  let b:vera_minlines = vera_minlines$/;"	v
b:vhdl_explore	vim82\ftplugin\vhdl.vim	/^let b:vhdl_explore = '\\%(architecture\\|block\\|configuration\\|component\\|entity\\|function\\|package\\|procedure\\|process\\|record\\|units\\)'$/;"	v
b:xf86conf_xfree86_version	vim82\syntax\xf86conf.vim	/^		let b:xf86conf_xfree86_version = 4$/;"	v
b:xf86conf_xfree86_version	vim82\syntax\xf86conf.vim	/^		let b:xf86conf_xfree86_version = xf86conf_xfree86_version$/;"	v
b:xml_indent_close	vim82\indent\xml.vim	/^    let b:xml_indent_close = '.\\{-}<\/'$/;"	v
b:xml_indent_open	vim82\indent\xml.vim	/^    let b:xml_indent_open = '.\\{-}<[:A-Z_a-z]'$/;"	v
b:yaml_schema	vim82\syntax\yaml.vim	/^    let b:yaml_schema = 'core'$/;"	v
b:yaml_schema	vim82\syntax\yaml.vim	/^    let b:yaml_schema = g:yaml_schema$/;"	v
bcdump	lua\jit\bc.lua	/^local function bcdump(func, out, all)$/;"	f
bcline	lua\jit\bc.lua	/^local function bcline(func, pc, prefix)$/;"	f
bclist	lua\jit\bcsave.lua	/^local function bclist(input, output)$/;"	f
bclistoff	lua\jit\bc.lua	/^local function bclistoff()$/;"	f
bcliston	lua\jit\bc.lua	/^local function bcliston(outfile)$/;"	f
bcsave	lua\jit\bcsave.lua	/^local function bcsave(ctx, input, output)$/;"	f
bcsave_c	lua\jit\bcsave.lua	/^local function bcsave_c(ctx, output, s)$/;"	f
bcsave_elfobj	lua\jit\bcsave.lua	/^local function bcsave_elfobj(ctx, output, s, ffi)$/;"	f
bcsave_machobj	lua\jit\bcsave.lua	/^local function bcsave_machobj(ctx, output, s, ffi)$/;"	f
bcsave_obj	lua\jit\bcsave.lua	/^local function bcsave_obj(ctx, output, s)$/;"	f
bcsave_peobj	lua\jit\bcsave.lua	/^local function bcsave_peobj(ctx, output, s, ffi)$/;"	f
bcsave_raw	lua\jit\bcsave.lua	/^local function bcsave_raw(output, s)$/;"	f
bcsave_tail	lua\jit\bcsave.lua	/^local function bcsave_tail(fp, output, s)$/;"	f
bctargets	lua\jit\bc.lua	/^local function bctargets(func)$/;"	f
bmenu_priority	vim82\menu.vim	/^  let bmenu_priority = 60$/;"	v
boolQuadGen	vim82\syntax\neomuttrc.vim	/^function! s:boolQuadGen(type, vars, deprecated)$/;"	f
bracket_type	vim82\indent\clojure.vim	/^	function! s:bracket_type(char)$/;"	f
bsub	vim82\ftplugin\cucumber.vim	/^function! s:bsub(target,pattern,replacement)$/;"	f
buf	vim82\optwin.vim	/^let buf = bufnr('option-window')$/;"	v
build_fun_lines	vim82\syntax\2html.vim	/^      let build_fun_lines += [$/;"	v
build_fun_lines	vim82\syntax\2html.vim	/^    let build_fun_lines += [$/;"	v
build_fun_lines	vim82\syntax\2html.vim	/^    let build_fun_lines = [$/;"	v
build_path	vim82\ftplugin\ruby.vim	/^function! s:build_path(path) abort$/;"	f
bundle.is_pinned	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:bundle.is_pinned()$/;"	f
bundle.path	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:bundle.path()$/;"	f
c	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap c j$/;"	m
c_comment_strings	vim82\defaults.vim	/^  let c_comment_strings=1$/;"	v
callback	vim82\autoload\context.vim	/^function! s:callback(path, job, status) abort$/;"	f
capitalize	vim82\ftplugin\changelog.vim	/^  function! s:capitalize(word)$/;"	f
ccomplete#Complete	vim82\autoload\ccomplete.vim	/^function! ccomplete#Complete(findstart, base)$/;"	f
changelogMenu	vim82\ftplugin\debchangelog.vim	/^augroup changelogMenu$/;"	a
char2nr_utf8	plugins\autofmt\autoload\autofmt\unicode.vim	/^  function s:char2nr_utf8(expr, utf8)$/;"	f
chars	vim82\syntax\xpm.vim	/^	 let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	vim82\syntax\xpm.vim	/^	 let chars = substitute(chars, '.$', '', '')$/;"	v
chars	vim82\syntax\xpm.vim	/^	 let chars = substitute(s, '"\\(.\\{'.cpp.'}\\s\\).*"', '\\1', '')$/;"	v
chars	vim82\syntax\xpm.vim	/^let chars  = ""$/;"	v
chars	vim82\syntax\xpm2.vim	/^	let chars = escape(chars, '\/\\*^$.~[]')$/;"	v
chars	vim82\syntax\xpm2.vim	/^	let chars = substitute(chars, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
chars	vim82\syntax\xpm2.vim	/^	let chars = substitute(chars, '\\\\s\\\\+$', '', '')$/;"	v
chars	vim82\syntax\xpm2.vim	/^	let chars = substitute(s, '\\(.\\{'.cpp.'}\\s\\+\\).*', '\\1', '')$/;"	v
chars	vim82\syntax\xpm2.vim	/^  let chars  = ""$/;"	v
check	lua\jit\bcsave.lua	/^local function check(ok, ...)$/;"	f
check	vim82\autoload\gzip.vim	/^fun s:check(cmd)$/;"	f
check_bundle_name	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^funct! s:check_bundle_name(bundle)$/;"	f
check_for_string	vim82\indent\clojure.vim	/^	function! s:check_for_string()$/;"	f
check_shell	vim82\tools\shtags.pl	/^sub check_shell$/;"	s
checkarg	lua\jit\bcsave.lua	/^local function checkarg(str, map, err)$/;"	f
checkmodname	lua\jit\bcsave.lua	/^local function checkmodname(str)$/;"	f
chill_minlines	vim82\syntax\chill.vim	/^  let chill_minlines = 15$/;"	v
choose	vim82\ftplugin\gitrebase.vim	/^function! s:choose(word) abort$/;"	f
clearprefixes	lua\jit\dis_x86.lua	/^local function clearprefixes(ctx)$/;"	f
clojure_check_for_string_worker	vim82\indent\clojure.vim	/^	function! s:clojure_check_for_string_worker()$/;"	f
clojure_indent_pos	vim82\indent\clojure.vim	/^	function! s:clojure_indent_pos()$/;"	f
clojure_is_method_special_case_worker	vim82\indent\clojure.vim	/^	function! s:clojure_is_method_special_case_worker(position)$/;"	f
clojurecomplete#Complete	vim82\autoload\clojurecomplete.vim	/^function! clojurecomplete#Complete(findstart, base)$/;"	f
close	plugins\vimproc\autoload\vimproc.vim	/^function! s:close() dict "{{{$/;"	f
close_all	plugins\vimproc\autoload\vimproc.vim	/^function! s:close_all(self) abort "{{{$/;"	f
closed_fdopen	plugins\vimproc\autoload\vimproc.vim	/^function! s:closed_fdopen(f_close, f_read, f_write) abort "{{{$/;"	f
cmd.close	plugins\vimproc\autoload\vimproc\cmd.vim	/^function! s:cmd.close() abort "{{{$/;"	f
cmd.open	plugins\vimproc\autoload\vimproc\cmd.vim	/^function! s:cmd.open() abort "{{{$/;"	f
cmd.system	plugins\vimproc\autoload\vimproc\cmd.vim	/^function! s:cmd.system(cmd) abort "{{{$/;"	f
col1	vim82\syntax\colortest.vim	/^  let col1 = substitute(expand("<cword>"), '\\(\\a\\+\\)_on_\\a\\+', '\\1', "")$/;"	v
col2	vim82\syntax\colortest.vim	/^  let col2 = substitute(expand("<cword>"), '\\a\\+_on_\\(\\a\\+\\)', '\\1', "")$/;"	v
color	vim82\syntax\xpm.vim	/^		     let color = ""$/;"	v
color	vim82\syntax\xpm.vim	/^		  let color = substitute(s, '".*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	vim82\syntax\xpm.vim	/^	       let color = substitute(s, '".*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	vim82\syntax\xpm.vim	/^	    let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	vim82\syntax\xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	vim82\syntax\xpm.vim	/^	    let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	vim82\syntax\xpm.vim	/^	    let color = substitute(s, '".*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	vim82\syntax\xpm.vim	/^	 let color = substitute(s, '".*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*"', '\\1', '')$/;"	v
color	vim82\syntax\xpm.vim	/^let color  = ""$/;"	v
color	vim82\syntax\xpm2.vim	/^		let color = ""$/;"	v
color	vim82\syntax\xpm2.vim	/^	      let color = substitute(s, '.*\\sm\\s\\+\\(.\\{-}\\)\\s*\\(s\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	vim82\syntax\xpm2.vim	/^	    let color = substitute(s, '.*\\sg4\\s\\+\\(.\\{-}\\)\\s*\\([ms]\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	vim82\syntax\xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\)\\(\\x\\)\\(\\x\\)', '0\\10\\20\\3', '')$/;"	v
color	vim82\syntax\xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x', '\\1', 'g')$/;"	v
color	vim82\syntax\xpm2.vim	/^	  let color = substitute(color, '\\(\\x\\x\\)\\x\\x', '\\1', 'g')$/;"	v
color	vim82\syntax\xpm2.vim	/^	  let color = substitute(s, '.*\\sg\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	vim82\syntax\xpm2.vim	/^	let color = substitute(s, '.*\\sc\\s\\+\\(.\\{-}\\)\\s*\\(\\(g4\\=\\|[ms]\\)\\s.*\\)*\\s*', '\\1', '')$/;"	v
color	vim82\syntax\xpm2.vim	/^  let color  = ""$/;"	v
colorize_ansi	lua\jit\dump.lua	/^local function colorize_ansi(s, t)$/;"	f
colorize_html	lua\jit\dump.lua	/^local function colorize_html(s, t)$/;"	f
colorize_text	lua\jit\dump.lua	/^local function colorize_text(s)$/;"	f
colors	vim82\syntax\xpm.vim	/^	 let colors = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
colors	vim82\syntax\xpm.vim	/^let colors = 0$/;"	v
colors	vim82\syntax\xpm2.vim	/^	let colors = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
colors	vim82\syntax\xpm2.vim	/^  let colors = 0$/;"	v
colors_name	vim82\colors\darkblue.vim	/^let colors_name = "darkblue"$/;"	v
colors_name	vim82\colors\default.vim	/^let colors_name = "default"$/;"	v
colors_name	vim82\colors\evening.vim	/^let colors_name = "evening"$/;"	v
colors_name	vim82\colors\industry.vim	/^let colors_name = "industry"$/;"	v
colors_name	vim82\colors\morning.vim	/^let colors_name = "morning"$/;"	v
colors_name	vim82\colors\peachpuff.vim	/^let colors_name = "peachpuff"$/;"	v
colors_name	vim82\colors\shine.vim	/^let colors_name = "shine"$/;"	v
colors_name	vim82\colors\slate.vim	/^let colors_name = "slate"$/;"	v
commProperty	vim82\tools\xcmdsrv_client.c	/^static Atom	commProperty = None;$/;"	v	file:
commWindow	vim82\tools\xcmdsrv_client.c	/^static Window	commWindow = None;$/;"	v	file:
comment_block_end	vim82\ftplugin\eiffel.vim	/^  let comment_block_end = '^\\s\\+--.*\\n\\%(\\s\\+--\\)\\@!'$/;"	v
comment_block_start	vim82\ftplugin\eiffel.vim	/^  let comment_block_start = '^\\%(\\s\\+--.*\\n\\)\\@<!\\s\\+--'$/;"	v
condfmt	lua\jit\dis_ppc.lua	/^local function condfmt(cond)$/;"	f
context#callback	vim82\autoload\context.vim	/^  function! context#callback(path, job, status)$/;"	f
context#close_cb	vim82\autoload\context.vim	/^  function! context#close_cb(channel)$/;"	f
context#command	vim82\autoload\context.vim	/^function! context#command()$/;"	f
context#job_status	vim82\autoload\context.vim	/^  function! context#job_status()$/;"	f
context#stop_jobs	vim82\autoload\context.vim	/^  function! context#stop_jobs()$/;"	f
context#typeset	vim82\autoload\context.vim	/^function! context#typeset(...) abort$/;"	f
context_echo	vim82\autoload\context.vim	/^function! s:context_echo(message, mode)$/;"	f
contextcomplete#Complete	vim82\autoload\contextcomplete.vim	/^function! contextcomplete#Complete(findstart, base)$/;"	f
convert_args	plugins\vimproc\autoload\vimproc.vim	/^function! s:convert_args(args) abort "{{{$/;"	f
count	vim82\indent\bst.vim	/^function! s:count(string,char)$/;"	f
count	vim82\indent\liquid.vim	/^function! s:count(string,pattern)$/;"	f
count_braces	vim82\indent\css.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	vim82\indent\ld.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	vim82\indent\tcl.vim	/^function s:count_braces(lnum, count_open)$/;"	f
count_braces	vim82\indent\xinetd.vim	/^function s:count_braces(lnum, count_open)$/;"	f
cpp	vim82\syntax\xpm.vim	/^	 let cpp = substitute(s, '"\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*"', '\\1', '')$/;"	v
cpp	vim82\syntax\xpm.vim	/^let cpp    = 0$/;"	v
cpp	vim82\syntax\xpm2.vim	/^	let cpp = substitute(s, '\\s*\\d\\+\\s\\+\\d\\+\\s\\+\\d\\+\\s\\+\\(\\d\\+\\).*', '\\1', '')$/;"	v
cpp	vim82\syntax\xpm2.vim	/^  let cpp    = 0$/;"	v
create	lua\jit\dis_arm.lua	/^local function create(code, addr, out)$/;"	f
create	lua\jit\dis_arm64.lua	/^local function create(code, addr, out)$/;"	f
create	lua\jit\dis_mips.lua	/^local function create(code, addr, out)$/;"	f
create	lua\jit\dis_ppc.lua	/^local function create(code, addr, out)$/;"	f
create	lua\jit\dis_x86.lua	/^local function create(code, addr, out)$/;"	f
create64	lua\jit\dis_x86.lua	/^local function create64(code, addr, out)$/;"	f
create_changelog	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! s:create_changelog() abort$/;"	f
create_el	lua\jit\dis_mips.lua	/^local function create_el(code, addr, out)$/;"	f
create_r6	lua\jit\dis_mips.lua	/^local function create_r6(code, addr, out)$/;"	f
create_r6_el	lua\jit\dis_mips.lua	/^local function create_r6_el(code, addr, out)$/;"	f
csc_minlines	vim82\syntax\csc.vim	/^	let csc_minlines = 50	" mostly for () constructs$/;"	v
csscomplete#CompleteCSS	vim82\autoload\csscomplete.vim	/^function! csscomplete#CompleteCSS(findstart, base)$/;"	f
ctlsub	lua\jit\bc.lua	/^local function ctlsub(c)$/;"	f
ctlsub	lua\jit\dump.lua	/^local function ctlsub(c)$/;"	f
current_char	vim82\indent\clojure.vim	/^	function! s:current_char()$/;"	f
current_compiler	vim82\compiler\ant.vim	/^let current_compiler = "ant"$/;"	v
current_compiler	vim82\compiler\bcc.vim	/^let current_compiler = "bcc"$/;"	v
current_compiler	vim82\compiler\bdf.vim	/^let current_compiler = "bdf"$/;"	v
current_compiler	vim82\compiler\cargo.vim	/^let current_compiler = "cargo"$/;"	v
current_compiler	vim82\compiler\checkstyle.vim	/^let current_compiler = "checkstyle"$/;"	v
current_compiler	vim82\compiler\context.vim	/^  let current_compiler = 'context'$/;"	v
current_compiler	vim82\compiler\context.vim	/^  let current_compiler = 'make'$/;"	v
current_compiler	vim82\compiler\cs.vim	/^let current_compiler = "cs"$/;"	v
current_compiler	vim82\compiler\csslint.vim	/^let current_compiler = "csslint"$/;"	v
current_compiler	vim82\compiler\cucumber.vim	/^let current_compiler = "cucumber"$/;"	v
current_compiler	vim82\compiler\decada.vim	/^let current_compiler = "decada"$/;"	v
current_compiler	vim82\compiler\dot.vim	/^let current_compiler = "dot"$/;"	v
current_compiler	vim82\compiler\erlang.vim	/^let current_compiler = "erlang"$/;"	v
current_compiler	vim82\compiler\eruby.vim	/^let current_compiler = "eruby"$/;"	v
current_compiler	vim82\compiler\eslint.vim	/^let current_compiler = "eslint"$/;"	v
current_compiler	vim82\compiler\fortran_F.vim	/^let current_compiler = "fortran_F"$/;"	v
current_compiler	vim82\compiler\fortran_cv.vim	/^let current_compiler = "fortran_cv"$/;"	v
current_compiler	vim82\compiler\fortran_elf90.vim	/^let current_compiler = "fortran_elf90"$/;"	v
current_compiler	vim82\compiler\fortran_g77.vim	/^let current_compiler = "fortran_g77"$/;"	v
current_compiler	vim82\compiler\fortran_lf95.vim	/^let current_compiler = "fortran_lf95"$/;"	v
current_compiler	vim82\compiler\fpc.vim	/^let current_compiler = "fpc"$/;"	v
current_compiler	vim82\compiler\g95.vim	/^let current_compiler = 'g95'$/;"	v
current_compiler	vim82\compiler\gcc.vim	/^let current_compiler = "gcc"$/;"	v
current_compiler	vim82\compiler\gfortran.vim	/^let current_compiler = 'gfortran'$/;"	v
current_compiler	vim82\compiler\ghc.vim	/^let current_compiler = "ghc"$/;"	v
current_compiler	vim82\compiler\gnat.vim	/^let current_compiler = "gnat"$/;"	v
current_compiler	vim82\compiler\go.vim	/^let current_compiler = 'go'$/;"	v
current_compiler	vim82\compiler\haml.vim	/^let current_compiler = "haml"$/;"	v
current_compiler	vim82\compiler\hp_acc.vim	/^let current_compiler = "hp_acc"$/;"	v
current_compiler	vim82\compiler\icc.vim	/^let current_compiler = "icc"$/;"	v
current_compiler	vim82\compiler\ifort.vim	/^let current_compiler = 'ifort'$/;"	v
current_compiler	vim82\compiler\intel.vim	/^let current_compiler = "intel"$/;"	v
current_compiler	vim82\compiler\irix5_c.vim	/^let current_compiler = "irix5_c"$/;"	v
current_compiler	vim82\compiler\irix5_cpp.vim	/^let current_compiler = "irix5_cpp"$/;"	v
current_compiler	vim82\compiler\javac.vim	/^let current_compiler = "javac"$/;"	v
current_compiler	vim82\compiler\jikes.vim	/^let current_compiler = "jikes"$/;"	v
current_compiler	vim82\compiler\mcs.vim	/^let current_compiler = "mcs"$/;"	v
current_compiler	vim82\compiler\mips_c.vim	/^let current_compiler = "mips_c"$/;"	v
current_compiler	vim82\compiler\mipspro_c89.vim	/^let current_compiler = "mipspro_c89"$/;"	v
current_compiler	vim82\compiler\mipspro_cpp.vim	/^let current_compiler = "mipspro_cpp"$/;"	v
current_compiler	vim82\compiler\modelsim_vcom.vim	/^let current_compiler = "modelsim_vcom"$/;"	v
current_compiler	vim82\compiler\msbuild.vim	/^let current_compiler = "msbuild"$/;"	v
current_compiler	vim82\compiler\msvc.vim	/^let current_compiler = "msvc"$/;"	v
current_compiler	vim82\compiler\neato.vim	/^let current_compiler = "neato"$/;"	v
current_compiler	vim82\compiler\ocaml.vim	/^let current_compiler = "ocaml"$/;"	v
current_compiler	vim82\compiler\onsgmls.vim	/^let current_compiler = "onsgmls"$/;"	v
current_compiler	vim82\compiler\pbx.vim	/^let current_compiler = "pbx"$/;"	v
current_compiler	vim82\compiler\perl.vim	/^let current_compiler = "perl"$/;"	v
current_compiler	vim82\compiler\php.vim	/^let current_compiler = "php"$/;"	v
current_compiler	vim82\compiler\pylint.vim	/^let current_compiler = "pylint"$/;"	v
current_compiler	vim82\compiler\pyunit.vim	/^let current_compiler = "pyunit"$/;"	v
current_compiler	vim82\compiler\rake.vim	/^let current_compiler = "rake"$/;"	v
current_compiler	vim82\compiler\rspec.vim	/^let current_compiler = "rspec"$/;"	v
current_compiler	vim82\compiler\rst.vim	/^let current_compiler = "rst"$/;"	v
current_compiler	vim82\compiler\ruby.vim	/^let current_compiler = "ruby"$/;"	v
current_compiler	vim82\compiler\rubyunit.vim	/^let current_compiler = "rubyunit"$/;"	v
current_compiler	vim82\compiler\rustc.vim	/^let current_compiler = "rustc"$/;"	v
current_compiler	vim82\compiler\sass.vim	/^let current_compiler = "sass"$/;"	v
current_compiler	vim82\compiler\se.vim	/^let current_compiler = "se"$/;"	v
current_compiler	vim82\compiler\splint.vim	/^let current_compiler = "splint"$/;"	v
current_compiler	vim82\compiler\stack.vim	/^let current_compiler = "stack"$/;"	v
current_compiler	vim82\compiler\standard.vim	/^let current_compiler = "standard"$/;"	v
current_compiler	vim82\compiler\tcl.vim	/^let current_compiler = "tcl"$/;"	v
current_compiler	vim82\compiler\tex.vim	/^		let current_compiler = "latex"$/;"	v
current_compiler	vim82\compiler\tex.vim	/^		let current_compiler = b:tex_flavor$/;"	v
current_compiler	vim82\compiler\tex.vim	/^		let current_compiler = g:tex_flavor$/;"	v
current_compiler	vim82\compiler\tex.vim	/^	let current_compiler = 'make'$/;"	v
current_compiler	vim82\compiler\tidy.vim	/^let current_compiler = "tidy"$/;"	v
current_compiler	vim82\compiler\xbuild.vim	/^let current_compiler = "xbuild"$/;"	v
current_compiler	vim82\compiler\xmllint.vim	/^let current_compiler = "xmllint"$/;"	v
current_compiler	vim82\compiler\xmlwf.vim	/^let current_compiler = "xmlwf"$/;"	v
current_word	vim82\indent\clojure.vim	/^	function! s:current_word()$/;"	f
cycle	vim82\ftplugin\gitrebase.vim	/^function! s:cycle(count) abort$/;"	f
d	vim82\macros\less.vim	/^noremap <script> d <C-D><SID>L$/;"	m
d	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap d e$/;"	m
decada#Make	vim82\autoload\decada.vim	/^function decada#Make () dict					     " {{{1$/;"	f
decada#New	vim82\autoload\decada.vim	/^function decada#New ()						     " }}}1$/;"	f
decada#Set_Session	vim82\autoload\decada.vim	/^function decada#Set_Session (...) dict				     " {{{1$/;"	f
decada#Unit_Name	vim82\autoload\decada.vim	/^function decada#Unit_Name () dict				     " {{{1$/;"	f
decode_imm13	lua\jit\dis_arm64.lua	/^local function decode_imm13(op)$/;"	f
decode_list	plugins\vimproc\autoload\vimproc.vim	/^function! s:decode_list(str) abort$/;"	f
decode_size	plugins\vimproc\autoload\vimproc.vim	/^function! s:decode_size(str, off) abort$/;"	f
decrease	vim82\ftplugin\cobol.vim	/^function! s:decrease(...)$/;"	f
def_comment	vim82\syntax\cdrtoc.vim	/^function s:def_comment(name, nextgroup)$/;"	f
def_keyword	vim82\syntax\cdrtoc.vim	/^function s:def_keyword(name, nextgroup, keyword)$/;"	f
def_keywords	vim82\syntax\cdrtoc.vim	/^function s:def_keywords(name, nextgroup, keywords)$/;"	f
def_match	vim82\syntax\cdrtoc.vim	/^function s:def_match(name, nextgroup, pattern)$/;"	f
def_region	vim82\syntax\cdrtoc.vim	/^function s:def_region(name, nextgroup, start, skip, end, matchgroup, contains)$/;"	f
define_signals	plugins\vimproc\autoload\vimproc.vim	/^function! s:define_signals() abort$/;"	f
deleted	vim82\spell\fixdup.vim	/^      let deleted += 1$/;"	v
deleted	vim82\spell\fixdup.vim	/^let deleted = 0$/;"	v
detectmodname	lua\jit\bcsave.lua	/^local function detectmodname(str)$/;"	f
detecttype	lua\jit\bcsave.lua	/^local function detecttype(str)$/;"	f
did_drchip_netrwlist_syntax	vim82\syntax\netrw.vim	/^ let did_drchip_netrwlist_syntax= 1$/;"	v
did_eighth_syntax_inits	vim82\syntax\8th.vim	/^    let did_eighth_syntax_inits=1$/;"	v
did_idl_syntax_inits	vim82\syntax\idl.vim	/^    let did_idl_syntax_inits = 1$/;"	v
did_indent_on	vim82\indent.vim	/^let did_indent_on = 1$/;"	v
did_install_default_menus	vim82\menu.vim	/^let did_install_default_menus = 1$/;"	v
did_install_syntax_menu	vim82\menu.vim	/^  let did_install_syntax_menu = 1$/;"	v
did_load_filetypes	vim82\filetype.vim	/^let did_load_filetypes = 1$/;"	v
did_load_ftplugin	vim82\ftplugin.vim	/^let did_load_ftplugin = 1$/;"	v
did_menu_trans	vim82\lang\menu_af_af.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_ca_es.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_chinese_gb.936.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_chinese_taiwan.950.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_cs_cz.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_czech_czech_republic.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_da.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_de_de.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_en_gb.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_eo.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_es_es.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_fi_fi.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_fr_fr.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_hu_hu.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_is_is.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_it_it.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_ja_jp.euc-jp.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_ja_jp.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_japanese_japan.932.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_ko_kr.euckr.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_ko_kr.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_nl_nl.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_no_no.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_pl_pl.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_polish_poland.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_pt_br.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_pt_pt.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_ru_ru.koi8-r.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_ru_ru.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sk_sk.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sl_si.cp1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sl_si.latin2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sl_si.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_slovak_slovak_republic.1250.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sr_rs.ascii.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sr_rs.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_sv_se.latin1.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_tr_tr.cp1254.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_tr_tr.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_uk_ua.cp1251.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_uk_ua.koi8-u.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_vi_vn.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_zh_cn.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_menu_trans	vim82\lang\menu_zh_tw.utf-8.vim	/^let did_menu_trans = 1$/;"	v
did_meson_syn_inits	vim82\syntax\meson.vim	/^    let did_meson_syn_inits = 1$/;"	v
did_mmp_syntax_inits	vim82\syntax\mmp.vim	/^  let did_mmp_syntax_inits=1$/;"	v
did_optwin_syntax_inits	vim82\optwin.vim	/^    let did_optwin_syntax_inits = 1$/;"	v
did_reva_syntax_inits	vim82\syntax\reva.vim	/^    let did_reva_syntax_inits=1$/;"	v
did_some	vim82\indent\testdir\runtest.vim	/^	let did_some = 1$/;"	v
did_some	vim82\indent\testdir\runtest.vim	/^    let did_some = 0$/;"	v
did_tapverboseoutput_syntax_inits	vim82\syntax\tap.vim	/^  let did_tapverboseoutput_syntax_inits = 1$/;"	v
did_toolbar_tmenu	vim82\menu.vim	/^  let did_toolbar_tmenu = 1$/;"	v
diffcomplete	vim82\ftplugin\gitcommit.vim	/^function! s:diffcomplete(A,L,P)$/;"	f
diffstyle	vim82\syntax\2html.vim	/^  let diffstyle =$/;"	v
dirname	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:dirname(path) abort$/;"	f
disass	lua\jit\dis_arm.lua	/^local function disass(code, addr, out)$/;"	f
disass	lua\jit\dis_arm64.lua	/^local function disass(code, addr, out)$/;"	f
disass	lua\jit\dis_mips.lua	/^local function disass(code, addr, out)$/;"	f
disass	lua\jit\dis_ppc.lua	/^local function disass(code, addr, out)$/;"	f
disass	lua\jit\dis_x86.lua	/^local function disass(code, addr, out)$/;"	f
disass64	lua\jit\dis_x86.lua	/^local function disass64(code, addr, out)$/;"	f
disass_block	lua\jit\dis_arm.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_block	lua\jit\dis_arm64.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_block	lua\jit\dis_mips.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_block	lua\jit\dis_ppc.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_block	lua\jit\dis_x86.lua	/^local function disass_block(ctx, ofs, len)$/;"	f
disass_el	lua\jit\dis_mips.lua	/^local function disass_el(code, addr, out)$/;"	f
disass_ins	lua\jit\dis_arm.lua	/^local function disass_ins(ctx)$/;"	f
disass_ins	lua\jit\dis_arm64.lua	/^local function disass_ins(ctx)$/;"	f
disass_ins	lua\jit\dis_mips.lua	/^local function disass_ins(ctx)$/;"	f
disass_ins	lua\jit\dis_ppc.lua	/^local function disass_ins(ctx)$/;"	f
disass_r6	lua\jit\dis_mips.lua	/^local function disass_r6(code, addr, out)$/;"	f
disass_r6_el	lua\jit\dis_mips.lua	/^local function disass_r6_el(code, addr, out)$/;"	f
dispatch	lua\jit\dis_x86.lua	/^local function dispatch(ctx, opat, patgrp)$/;"	f
dispatchmap	lua\jit\dis_x86.lua	/^local function dispatchmap(ctx, opcmap)$/;"	f
dist#ft#BindzoneCheck	vim82\autoload\dist\ft.vim	/^func dist#ft#BindzoneCheck(default)$/;"	f
dist#ft#CSH	vim82\autoload\dist\ft.vim	/^func dist#ft#CSH()$/;"	f
dist#ft#Check_inp	vim82\autoload\dist\ft.vim	/^func dist#ft#Check_inp()$/;"	f
dist#ft#DtraceCheck	vim82\autoload\dist\ft.vim	/^func dist#ft#DtraceCheck()$/;"	f
dist#ft#EuphoriaCheck	vim82\autoload\dist\ft.vim	/^func dist#ft#EuphoriaCheck()$/;"	f
dist#ft#FTRules	vim82\autoload\dist\ft.vim	/^func dist#ft#FTRules()$/;"	f
dist#ft#FTVB	vim82\autoload\dist\ft.vim	/^func dist#ft#FTVB(alt)$/;"	f
dist#ft#FTasm	vim82\autoload\dist\ft.vim	/^func dist#ft#FTasm()$/;"	f
dist#ft#FTasmsyntax	vim82\autoload\dist\ft.vim	/^func dist#ft#FTasmsyntax()$/;"	f
dist#ft#FTbtm	vim82\autoload\dist\ft.vim	/^func dist#ft#FTbtm()$/;"	f
dist#ft#FTchange	vim82\autoload\dist\ft.vim	/^func dist#ft#FTchange()$/;"	f
dist#ft#FTe	vim82\autoload\dist\ft.vim	/^func dist#ft#FTe()$/;"	f
dist#ft#FTent	vim82\autoload\dist\ft.vim	/^func dist#ft#FTent()$/;"	f
dist#ft#FTheader	vim82\autoload\dist\ft.vim	/^func dist#ft#FTheader()$/;"	f
dist#ft#FThtml	vim82\autoload\dist\ft.vim	/^func dist#ft#FThtml()$/;"	f
dist#ft#FTidl	vim82\autoload\dist\ft.vim	/^func dist#ft#FTidl()$/;"	f
dist#ft#FTinc	vim82\autoload\dist\ft.vim	/^func dist#ft#FTinc()$/;"	f
dist#ft#FTlpc	vim82\autoload\dist\ft.vim	/^func dist#ft#FTlpc()$/;"	f
dist#ft#FTm	vim82\autoload\dist\ft.vim	/^func dist#ft#FTm()$/;"	f
dist#ft#FTmm	vim82\autoload\dist\ft.vim	/^func dist#ft#FTmm()$/;"	f
dist#ft#FTmms	vim82\autoload\dist\ft.vim	/^func dist#ft#FTmms()$/;"	f
dist#ft#FTnroff	vim82\autoload\dist\ft.vim	/^func dist#ft#FTnroff()$/;"	f
dist#ft#FTperl	vim82\autoload\dist\ft.vim	/^func dist#ft#FTperl()$/;"	f
dist#ft#FTpl	vim82\autoload\dist\ft.vim	/^func dist#ft#FTpl()$/;"	f
dist#ft#FTprogress_asm	vim82\autoload\dist\ft.vim	/^func dist#ft#FTprogress_asm()$/;"	f
dist#ft#FTprogress_cweb	vim82\autoload\dist\ft.vim	/^func dist#ft#FTprogress_cweb()$/;"	f
dist#ft#FTprogress_pascal	vim82\autoload\dist\ft.vim	/^func dist#ft#FTprogress_pascal()$/;"	f
dist#ft#FTr	vim82\autoload\dist\ft.vim	/^func dist#ft#FTr()$/;"	f
dist#ft#FTtex	vim82\autoload\dist\ft.vim	/^func dist#ft#FTtex()$/;"	f
dist#ft#FTxml	vim82\autoload\dist\ft.vim	/^func dist#ft#FTxml()$/;"	f
dist#ft#FTy	vim82\autoload\dist\ft.vim	/^func dist#ft#FTy()$/;"	f
dist#ft#McSetf	vim82\autoload\dist\ft.vim	/^func dist#ft#McSetf()$/;"	f
dist#ft#ProtoCheck	vim82\autoload\dist\ft.vim	/^func dist#ft#ProtoCheck(default)$/;"	f
dist#ft#Redif	vim82\autoload\dist\ft.vim	/^func dist#ft#Redif()$/;"	f
dist#ft#SQL	vim82\autoload\dist\ft.vim	/^func dist#ft#SQL()$/;"	f
dist#ft#SetFileTypeSH	vim82\autoload\dist\ft.vim	/^func dist#ft#SetFileTypeSH(name)$/;"	f
dist#ft#SetFileTypeShell	vim82\autoload\dist\ft.vim	/^func dist#ft#SetFileTypeShell(name)$/;"	f
docmd	lua\jit\bcsave.lua	/^local function docmd(...)$/;"	f
dodigits	vim82\ftplugin\pdf.vim	/^function! s:dodigits(digits)$/;"	f
dolu	vim82\tutor\tutor.cs	/^  2. Dræ kl·vesu pro pohyb dolu (j), dokud se jejÌ funkce nezopakuje.$/;"	m
doobject	vim82\ftplugin\pdf.vim	/^function! s:doobject(string)$/;"	f
dosbatch_cmdextversion	vim82\syntax\dosbatch.vim	/^  let dosbatch_cmdextversion = 2$/;"	v
doxygengroup	vim82\syntax\doxygen.vim	/^    aug doxygengroup$/;"	a
dprint	vim82\autoload\rubycomplete.vim	/^function! s:dprint(msg)$/;"	f
dump_ir	lua\jit\dump.lua	/^local function dump_ir(tr, dumpsnap, dumpreg)$/;"	f
dump_mcode	lua\jit\dump.lua	/^local function dump_mcode(tr)$/;"	f
dump_record	lua\jit\dump.lua	/^local function dump_record(tr, func, pc, depth, callee)$/;"	f
dump_snap	lua\jit\dump.lua	/^local function dump_snap(tr)$/;"	f
dump_texit	lua\jit\dump.lua	/^local function dump_texit(tr, ex, ngpr, nfpr, ...)$/;"	f
dump_trace	lua\jit\dump.lua	/^local function dump_trace(what, tr, func, pc, otr, oex)$/;"	f
dump_trace	lua\jit\v.lua	/^local function dump_trace(what, tr, func, pc, otr, oex)$/;"	f
dumpcallargs	lua\jit\dump.lua	/^local function dumpcallargs(tr, ins)$/;"	f
dumpcallfunc	lua\jit\dump.lua	/^local function dumpcallfunc(tr, ins)$/;"	f
dumpoff	lua\jit\dump.lua	/^local function dumpoff()$/;"	f
dumpoff	lua\jit\v.lua	/^local function dumpoff()$/;"	f
dumpon	lua\jit\dump.lua	/^local function dumpon(opt, outfile)$/;"	f
dumpon	lua\jit\v.lua	/^local function dumpon(outfile)$/;"	f
dumpwrite	lua\jit\dump.lua	/^local function dumpwrite(s)$/;"	f
e	vim82\macros\hanoi\hanoi.vim	/^map e "fy2l$/;"	m
e	vim82\macros\less.vim	/^map e <CR>$/;"	m
e	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap e .$/;"	m
echogets	vim82\tools\ccfilter.c	/^char *echogets(char *s, int echo)$/;"	f
elseif tn 	lua\jit\dump.lua	/^  elseif tn == "function" then$/;"	f
emms 	lua\jit\dis_x86.lua	/^  emms = function(ctx, name, pat)$/;"	f
encode_list	plugins\vimproc\autoload\vimproc.vim	/^function! s:encode_list(arr) abort$/;"	f
encode_size	plugins\vimproc\autoload\vimproc.vim	/^function! s:encode_size(n) abort$/;"	f
encoding	vim82\keymap\hebrew.vim	/^	let encoding = 'cp1255'$/;"	v
encoding	vim82\keymap\hebrew.vim	/^	let encoding = 'iso-8859-8'$/;"	v
encoding	vim82\keymap\hebrew.vim	/^let encoding = &enc$/;"	v
encoding	vim82\keymap\hebrewp.vim	/^	let encoding = 'cp1255'$/;"	v
encoding	vim82\keymap\hebrewp.vim	/^	let encoding = 'iso-8859-8'$/;"	v
encoding	vim82\keymap\hebrewp.vim	/^let encoding = &enc$/;"	v
encoding	vim82\keymap\persian.vim	/^	let encoding = 'utf-8'$/;"	v
encoding	vim82\keymap\persian.vim	/^let encoding = &enc$/;"	v
encoding	vim82\keymap\polish-slash.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	vim82\keymap\polish-slash.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	vim82\keymap\polish-slash.vim	/^let encoding = &enc$/;"	v
encoding	vim82\keymap\serbian.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	vim82\keymap\serbian.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	vim82\keymap\serbian.vim	/^let encoding = &enc$/;"	v
encoding	vim82\keymap\slovak.vim	/^	let encoding = 'cp1250'$/;"	v
encoding	vim82\keymap\slovak.vim	/^	let encoding = 'iso-8859-2'$/;"	v
encoding	vim82\keymap\slovak.vim	/^let encoding = &enc$/;"	v
end	vim82\indent\testdir\runtest.vim	/^      let end = search('\\<END_INDENT\\>')$/;"	v
end	vim82\indent\testdir\runtest.vim	/^    let end = 1$/;"	v
end_block	vim82\indent\sh.vim	/^function! s:end_block(line)$/;"	f
ends_with_backslash	vim82\indent\tcl.vim	/^function s:ends_with_backslash(lnum)$/;"	f
escape	vim82\autoload\gzip.vim	/^fun s:escape(name)$/;"	f
escape	vim82\indent\sh.vim	/^function! s:escape(pattern)$/;"	f
escapesConditionals	vim82\syntax\neomuttrc.vim	/^function! s:escapesConditionals(baseName, sequence, padding, conditional)$/;"	f
esctext	vim82\doc\vim2html.pl	/^sub esctext$/;"	s
escurl	vim82\doc\vim2html.pl	/^sub escurl$/;"	s
expand_path	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:expand_path(path) abort$/;"	f
f	vim82\macros\less.vim	/^map f <Space>$/;"	m
f	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap f u$/;"	m
f16	lua\jit\bcsave.lua	/^    function f16(x) return bit.rshift(bit.bswap(x), 16) end$/;"	f
f32	lua\jit\bcsave.lua	/^  local function f32(x) return x end$/;"	f
failed	vim82\indent\testdir\runtest.vim	/^	      let failed = 1$/;"	v
failed	vim82\indent\testdir\runtest.vim	/^	    let failed = 1$/;"	v
failed	vim82\indent\testdir\runtest.vim	/^	  let failed = 1$/;"	v
failed	vim82\indent\testdir\runtest.vim	/^	let failed = 1$/;"	v
failed	vim82\indent\testdir\runtest.vim	/^    let failed = 0$/;"	v
failed_count	vim82\indent\testdir\runtest.vim	/^      let failed_count += 1$/;"	v
failed_count	vim82\indent\testdir\runtest.vim	/^let failed_count = 0$/;"	v
fdopen	plugins\vimproc\autoload\vimproc.vim	/^function! s:fdopen(fd, f_close, f_read, f_write) abort "{{{$/;"	f
fdopen_pgroup	plugins\vimproc\autoload\vimproc.vim	/^function! s:fdopen_pgroup(proc, fd, f_close, f_read, f_write) abort "{{{$/;"	f
fdopen_pipes	plugins\vimproc\autoload\vimproc.vim	/^function! s:fdopen_pipes(fd, f_close, f_read, f_write) abort "{{{$/;"	f
fdopen_pty	plugins\vimproc\autoload\vimproc.vim	/^function! s:fdopen_pty(fd_stdin, fd_stdout, f_close, f_read, f_write) abort "{{{$/;"	f
fetch_scripts	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! s:fetch_scripts(to)$/;"	f
filename	vim82\indent\sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	vim82\indent\sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	vim82\indent\sql.vim	/^let filename = 'sqlanywhere'$/;"	v
filename	vim82\syntax\sql.vim	/^        let filename = b:sql_type_override$/;"	v
filename	vim82\syntax\sql.vim	/^        let filename = g:sql_type_default$/;"	v
filename	vim82\syntax\sql.vim	/^let filename = 'sqloracle'$/;"	v
filetypedetect	vim82\filetype.vim	/^augroup filetypedetect$/;"	a
filetypeindent	vim82\indent.vim	/^augroup filetypeindent$/;"	a
filetypeplugin	vim82\ftplugin.vim	/^augroup filetypeplugin$/;"	a
fillsymtab	lua\jit\dump.lua	/^local function fillsymtab(tr, nexit)$/;"	f
fillsymtab_tr	lua\jit\dump.lua	/^local function fillsymtab_tr(tr, nexit)$/;"	f
finalize	plugins\vimproc\autoload\vimproc.vim	/^function! s:finalize() abort$/;"	f
find_continued_lnum	vim82\indent\sh.vim	/^function! s:find_continued_lnum(lnum)$/;"	f
find_start_block	vim82\indent\sh.vim	/^function! s:find_start_block(lnum)$/;"	f
find_tag1	vim82\doc\makehtml.awk	/^function find_tag1() {$/;"	f
find_tag2	vim82\doc\makehtml.awk	/^function find_tag2() {$/;"	f
find_tag3	vim82\doc\makehtml.awk	/^function find_tag3() {$/;"	f
first_line	vim82\ftplugin\changelog.vim	/^  function! s:first_line(string)$/;"	f
fix_beginfigs	vim82\ftplugin\mp.vim	/^  function! s:fix_beginfigs()$/;"	f
flush 	lua\jit\zone.lua	/^  flush = function(t)$/;"	f
fmt_hex32	lua\jit\dis_arm64.lua	/^local function fmt_hex32(x)$/;"	f
fmterr	lua\jit\dump.lua	/^local function fmterr(err, info)$/;"	f
fmterr	lua\jit\v.lua	/^local function fmterr(err, info)$/;"	f
fmtfunc	lua\jit\dump.lua	/^local function fmtfunc(func, pc)$/;"	f
fmtfunc	lua\jit\v.lua	/^local function fmtfunc(func, pc)$/;"	f
fmtload	lua\jit\dis_arm.lua	/^local function fmtload(ctx, op, pos)$/;"	f
fmtvload	lua\jit\dis_arm.lua	/^local function fmtvload(ctx, op, pos)$/;"	f
fmtvr	lua\jit\dis_arm.lua	/^local function fmtvr(op, vr, sh0, sh1)$/;"	f
fofs	lua\jit\bcsave.lua	/^      function fofs(x) return bit.bswap(x)*two32 end$/;"	f
foldable	vim82\syntax\ruby.vim	/^function! s:foldable(...) abort$/;"	f
formatk	lua\jit\dump.lua	/^local function formatk(tr, idx, sn)$/;"	f
fortran_free_source	vim82\syntax\sinda.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	vim82\syntax\tak.vim	/^let fortran_free_source=1$/;"	v
fortran_free_source	vim82\syntax\trasys.vim	/^let fortran_free_source=1$/;"	v
fp 	lua\jit\dis_x86.lua	/^  fp = function(ctx, name, pat)$/;"	f
funcref	plugins\vimproc\autoload\vimproc.vim	/^function! s:funcref(funcname) abort$/;"	f
g	vim82\macros\hanoi\hanoi.vim	/^map g IL$/;"	m
g	vim82\macros\less.vim	/^noremap <script> g gg<SID>L$/;"	m
g	vim82\macros\life\life.vim	/^map g IR$/;"	m
g	vim82\macros\urm\urm.vim	/^map g 1G\/^[(as;.]$/;"	m
g	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap g i$/;"	m
g%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^nmap <silent> g% <Plug>(MatchitNormalBackward)$/;"	m
g%	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^omap <silent> g% <Plug>(MatchitOperationBackward)$/;"	m
g:GetLatestVimScripts_allowautoinstall	vim82\autoload\getscript.vim	/^ let g:GetLatestVimScripts_allowautoinstall= 1$/;"	v
g:GetLatestVimScripts_mv	vim82\autoload\getscript.vim	/^   let g:GetLatestVimScripts_mv= "mv"$/;"	v
g:GetLatestVimScripts_mv	vim82\autoload\getscript.vim	/^   let g:GetLatestVimScripts_mv= "ren"$/;"	v
g:GetLatestVimScripts_options	vim82\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options = ""$/;"	v
g:GetLatestVimScripts_options	vim82\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= ""$/;"	v
g:GetLatestVimScripts_options	vim82\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= "-q -O"$/;"	v
g:GetLatestVimScripts_options	vim82\autoload\getscript.vim	/^  let g:GetLatestVimScripts_options= "-s -O"$/;"	v
g:GetLatestVimScripts_scriptaddr	vim82\autoload\getscript.vim	/^ let g:GetLatestVimScripts_scriptaddr = 'http:\/\/vim.sourceforge.net\/script.php?script_id='$/;"	v
g:GetLatestVimScripts_wget	vim82\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget    = 'echo "GetLatestVimScripts needs wget or curl"'$/;"	v
g:GetLatestVimScripts_wget	vim82\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget= "curl"$/;"	v
g:GetLatestVimScripts_wget	vim82\autoload\getscript.vim	/^  let g:GetLatestVimScripts_wget= "wget"$/;"	v
g:__vimrc	plugins\autofmt\test\unix.vim	/^let g:__vimrc = expand("<sfile>:p")$/;"	v
g:ada#Comment	vim82\autoload\ada.vim	/^let g:ada#Comment	   = "\\\\v^(\\"[^\\"]*\\"|'.'|[^\\"']){-}\\\\zs\\\\s*--.*"$/;"	v
g:ada#Ctags_Kinds	vim82\autoload\ada.vim	/^let g:ada#Ctags_Kinds = {$/;"	v
g:ada#DotWordRegex	vim82\autoload\ada.vim	/^let g:ada#DotWordRegex	   = '\\a\\w*\\(\\_s*\\.\\_s*\\a\\w*\\)*'$/;"	v
g:ada#Keywords	vim82\autoload\ada.vim	/^	let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	vim82\autoload\ada.vim	/^       let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	vim82\autoload\ada.vim	/^    let g:ada#Keywords += [{$/;"	v
g:ada#Keywords	vim82\autoload\ada.vim	/^let g:ada#Keywords	   = []$/;"	v
g:ada#WordRegex	vim82\autoload\ada.vim	/^let g:ada#WordRegex	   = '\\a\\w*'$/;"	v
g:ada_default_compiler	vim82\ftplugin\ada.vim	/^      let g:ada_default_compiler = 'decada'$/;"	v
g:ada_default_compiler	vim82\ftplugin\ada.vim	/^      let g:ada_default_compiler = 'gnat'$/;"	v
g:autodate_format	plugins\kaoriya\plugin\autodate.vim	/^  let g:autodate_format = '%d-%3m-%Y'$/;"	v
g:autodate_keyword_post	plugins\kaoriya\plugin\autodate.vim	/^  let g:autodate_keyword_post = '\\.'$/;"	v
g:autodate_keyword_pre	plugins\kaoriya\plugin\autodate.vim	/^  let g:autodate_keyword_pre = '\\cLast Change:'$/;"	v
g:autodate_lines	plugins\kaoriya\plugin\autodate.vim	/^  let g:autodate_lines = 50$/;"	v
g:autodate_start_line	plugins\kaoriya\plugin\autodate.vim	/^  let g:autodate_start_line = 1$/;"	v
g:bmenu_max_pathlen	vim82\menu.vim	/^  let g:bmenu_max_pathlen = 35$/;"	v
g:changelog_date_end_entry_search	vim82\ftplugin\changelog.vim	/^    let g:changelog_date_end_entry_search = '^\\s*$'$/;"	v
g:changelog_date_entry_search	vim82\ftplugin\changelog.vim	/^    let g:changelog_date_entry_search = '^\\s*%d\\_s*%u'$/;"	v
g:changelog_dateformat	vim82\ftplugin\changelog.vim	/^      let g:changelog_dateformat = "%Y-%m-%d"$/;"	v
g:changelog_dateformat	vim82\ftplugin\changelog.vim	/^      let g:changelog_dateformat = g:changelog_timeformat$/;"	v
g:changelog_new_date_format	vim82\ftplugin\changelog.vim	/^    let g:changelog_new_date_format = "%d  %u\\n\\n\\t* %p%c\\n\\n"$/;"	v
g:changelog_new_entry_format	vim82\ftplugin\changelog.vim	/^    let g:changelog_new_entry_format = "\\t* %p%c"$/;"	v
g:clojure_align_multiline_strings	vim82\indent\clojure.vim	/^		let g:clojure_align_multiline_strings = 0$/;"	v
g:clojure_align_subforms	vim82\indent\clojure.vim	/^		let g:clojure_align_subforms = 0$/;"	v
g:clojure_fuzzy_indent	vim82\indent\clojure.vim	/^		let g:clojure_fuzzy_indent = 1$/;"	v
g:clojure_fuzzy_indent_blacklist	vim82\indent\clojure.vim	/^		let g:clojure_fuzzy_indent_blacklist = ['-fn$', '\\v^with-%(meta|out-str|loading-context)$']$/;"	v
g:clojure_fuzzy_indent_patterns	vim82\indent\clojure.vim	/^		let g:clojure_fuzzy_indent_patterns = ['^with', '^def', '^let']$/;"	v
g:clojure_maxlines	vim82\indent\clojure.vim	/^		let g:clojure_maxlines = 100$/;"	v
g:clojure_special_indent_words	vim82\indent\clojure.vim	/^		let g:clojure_special_indent_words = 'deftype,defrecord,reify,proxy,extend-type,extend-protocol,letfn'$/;"	v
g:cobol_inline_comment	vim82\syntax\cobol.vim	/^   let g:cobol_inline_comment=0$/;"	v
g:colors_name	vim82\colors\blue.vim	/^let g:colors_name = "blue"$/;"	v
g:colors_name	vim82\colors\delek.vim	/^let g:colors_name = "delek"$/;"	v
g:colors_name	vim82\colors\desert.vim	/^let g:colors_name="desert"$/;"	v
g:colors_name	vim82\colors\elflord.vim	/^let g:colors_name = "elflord"$/;"	v
g:colors_name	vim82\colors\koehler.vim	/^let g:colors_name = "koehler"$/;"	v
g:colors_name	vim82\colors\murphy.vim	/^let g:colors_name = "murphy"$/;"	v
g:colors_name	vim82\colors\pablo.vim	/^let g:colors_name = "pablo"$/;"	v
g:colors_name	vim82\colors\ron.vim	/^let g:colors_name = "ron"$/;"	v
g:colors_name	vim82\colors\torte.vim	/^let g:colors_name = "torte"$/;"	v
g:colors_name	vim82\colors\zellner.vim	/^let g:colors_name = "zellner"$/;"	v
g:context_jobs	vim82\autoload\context.vim	/^  let g:context_jobs = []$/;"	v
g:context_metapost	vim82\syntax\context.vim	/^  let g:context_metapost = (index(s:context_include, 'mp') != -1)$/;"	v
g:ctags_command	vim82\menu.vim	/^    let g:ctags_command = "ctags -R ."$/;"	v
g:ctags_command	vim82\menu.vim	/^    let g:ctags_command = "mc vim:ctags *.*"$/;"	v
g:cucumber_languages	vim82\syntax\cucumber.vim	/^let g:cucumber_languages = {$/;"	v
g:debchangelog_listbugs_severities	vim82\ftplugin\debchangelog.vim	/^  let g:debchangelog_listbugs_severities = 'critical,grave,serious,important,normal,minor,wishlist'$/;"	v
g:decada	vim82\compiler\decada.vim	/^   let g:decada = decada#New ()$/;"	v
g:did_changelog_ftplugin	vim82\ftplugin\debchangelog.vim	/^let g:did_changelog_ftplugin = 1$/;"	v
g:did_cobol_ftplugin_functions	vim82\ftplugin\cobol.vim	/^let g:did_cobol_ftplugin_functions = 1$/;"	v
g:did_ocaml_switch	vim82\ftplugin\ocaml.vim	/^  let g:did_ocaml_switch = 1$/;"	v
g:did_ruby_ftplugin_functions	vim82\ftplugin\ruby.vim	/^let g:did_ruby_ftplugin_functions = 1$/;"	v
g:doxygen_end_punctuation	vim82\syntax\doxygen.vim	/^      let g:doxygen_end_punctuation='[.]'$/;"	v
g:erlang_folding	vim82\ftplugin\erlang.vim	/^	let g:erlang_folding = 0$/;"	v
g:erlang_indent_searchpair_timeout	vim82\indent\erlang.vim	/^let g:erlang_indent_searchpair_timeout = 2000$/;"	v
g:erlang_keywordprg	vim82\ftplugin\erlang.vim	/^	let g:erlang_keywordprg = 'erl -man'$/;"	v
g:erlang_unexpected_token_indent	vim82\indent\erlang.vim	/^  let g:erlang_unexpected_token_indent = -1$/;"	v
g:eruby_default_subtype	vim82\ftplugin\eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:eruby_default_subtype	vim82\syntax\eruby.vim	/^  let g:eruby_default_subtype = "html"$/;"	v
g:ft_ignore_pat	vim82\filetype.vim	/^  let g:ft_ignore_pat = '\\.\\(Z\\|gz\\|bz2\\|zip\\|tgz\\)$'$/;"	v
g:ftplugin_sql_objects	vim82\ftplugin\sql.vim	/^    let g:ftplugin_sql_objects = 'function,procedure,event,' .$/;"	v
g:ftplugin_sql_omni_key	vim82\ftplugin\sql.vim	/^    let g:ftplugin_sql_omni_key = '<C-C>'$/;"	v
g:ftplugin_sql_omni_key_left	vim82\ftplugin\sql.vim	/^    let g:ftplugin_sql_omni_key_left = '<Left>'$/;"	v
g:ftplugin_sql_omni_key_right	vim82\ftplugin\sql.vim	/^    let g:ftplugin_sql_omni_key_right = '<Right>'$/;"	v
g:ftplugin_sql_statements	vim82\ftplugin\sql.vim	/^    let g:ftplugin_sql_statements = 'create'$/;"	v
g:fullDefMatcher	vim82\indent\scala.vim	/^let g:fullDefMatcher = '^\\s*' . s:defMatcher . '\\s\\+' . s:funcNameMatcher . '\\s*' . s:typeSpecMatcher . '\\?\\s*' . s:defArgMatcher . '\\?\\s*' . s:returnTypeMatcher . '\\?\\s*[={]'$/;"	v
g:getscript_cygwin	vim82\autoload\getscript.vim	/^   let g:getscript_cygwin= 0$/;"	v
g:getscript_cygwin	vim82\autoload\getscript.vim	/^   let g:getscript_cygwin= 1$/;"	v
g:getscript_cygwin	vim82\autoload\getscript.vim	/^  let g:getscript_cygwin= 0$/;"	v
g:gnat	vim82\compiler\gnat.vim	/^   let g:gnat = gnat#New ()$/;"	v
g:go_fmt_commands	plugins\golang\ftplugin\go\fmt.vim	/^    let g:go_fmt_commands = 1$/;"	v
g:go_godoc_commands	plugins\golang\plugin\go\godoc.vim	/^  let g:go_godoc_commands = 1$/;"	v
g:go_highlight_array_whitespace_error	vim82\syntax\go.vim	/^  let g:go_highlight_array_whitespace_error = 1$/;"	v
g:go_highlight_chan_whitespace_error	vim82\syntax\go.vim	/^  let g:go_highlight_chan_whitespace_error = 1$/;"	v
g:go_highlight_extra_types	vim82\syntax\go.vim	/^  let g:go_highlight_extra_types = 1$/;"	v
g:go_highlight_space_tab_error	vim82\syntax\go.vim	/^  let g:go_highlight_space_tab_error = 1$/;"	v
g:go_highlight_trailing_whitespace_error	vim82\syntax\go.vim	/^  let g:go_highlight_trailing_whitespace_error = 1$/;"	v
g:go_import_commands	plugins\golang\ftplugin\go\import.vim	/^    let g:go_import_commands = 1$/;"	v
g:gofmt_command	plugins\golang\ftplugin\go\fmt.vim	/^    let g:gofmt_command = "gofmt"$/;"	v
g:haml_self_closing_tags	vim82\indent\haml.vim	/^  let g:haml_self_closing_tags = 'base|link|meta|br|hr|img|input'$/;"	v
g:is_kornshell	vim82\syntax\sh.vim	/^   let g:is_kornshell= g:is_posix$/;"	v
g:j_indent_definitions	vim82\indent\j.vim	/^  let g:j_indent_definitions = 0$/;"	v
g:kaoriya_switch	plugins\kaoriya\autoload\kaoriya\switch.vim	/^  let g:kaoriya_switch[fnamemodify(path, ':t:r')] = 1$/;"	v
g:kaoriya_switch	plugins\kaoriya\autoload\kaoriya\switch.vim	/^let g:kaoriya_switch = {}$/;"	v
g:liquid_default_subtype	vim82\ftplugin\liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_default_subtype	vim82\syntax\liquid.vim	/^  let g:liquid_default_subtype = 'html'$/;"	v
g:liquid_highlight_types	vim82\syntax\liquid.vim	/^  let g:liquid_highlight_types = []$/;"	v
g:loaded_2html_plugin	vim82\plugin\tohtml.vim	/^let g:loaded_2html_plugin = 'vim8.1_v2'$/;"	v
g:loaded_dvorak_plugin	vim82\pack\dist\opt\dvorak\plugin\dvorak.vim	/^let g:loaded_dvorak_plugin = 1$/;"	v
g:loaded_getscript	vim82\autoload\getscript.vim	/^let g:loaded_getscript= "v36"$/;"	v
g:loaded_getscriptPlugin	vim82\plugin\getscriptPlugin.vim	/^let g:loaded_getscriptPlugin = "v36"$/;"	v
g:loaded_godoc	plugins\golang\plugin\go\godoc.vim	/^let g:loaded_godoc = 1$/;"	v
g:loaded_logiPat	vim82\plugin\logiPat.vim	/^let g:loaded_logiPat = "v4"$/;"	v
g:loaded_matchit	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^let g:loaded_matchit = 1$/;"	v
g:loaded_matchparen	vim82\plugin\matchparen.vim	/^let g:loaded_matchparen = 1$/;"	v
g:loaded_netrw	vim82\autoload\netrw.vim	/^let g:loaded_netrw = "v168"$/;"	v
g:loaded_netrwFileHandlers	vim82\autoload\netrwFileHandlers.vim	/^let g:loaded_netrwFileHandlers= "v11b"$/;"	v
g:loaded_netrwPlugin	vim82\plugin\netrwPlugin.vim	/^let g:loaded_netrwPlugin = "v168"$/;"	v
g:loaded_netrwSettings	vim82\autoload\netrwSettings.vim	/^let g:loaded_netrwSettings = "v16"$/;"	v
g:loaded_sql_completion	vim82\autoload\sqlcomplete.vim	/^let g:loaded_sql_completion = 160$/;"	v
g:loaded_syntax_completion	vim82\autoload\syntaxcomplete.vim	/^let g:loaded_syntax_completion = 130$/;"	v
g:loaded_tar	vim82\autoload\tar.vim	/^let g:loaded_tar= "v32"$/;"	v
g:loaded_tarPlugin	vim82\plugin\tarPlugin.vim	/^let g:loaded_tarPlugin = "v32"$/;"	v
g:loaded_vimball	vim82\autoload\vimball.vim	/^let g:loaded_vimball = "v37"$/;"	v
g:loaded_vimballPlugin	vim82\plugin\vimballPlugin.vim	/^let g:loaded_vimballPlugin = "v37"$/;"	v
g:loaded_vimproc	plugins\vimproc\plugin\vimproc.vim	/^let g:loaded_vimproc = 1$/;"	v
g:loaded_xmlformat	vim82\autoload\xmlformat.vim	/^let g:loaded_xmlformat = 1$/;"	v
g:loaded_zip	vim82\autoload\zip.vim	/^let g:loaded_zip= "v30"$/;"	v
g:loaded_zipPlugin	vim82\plugin\zipPlugin.vim	/^let g:loaded_zipPlugin = "v30"$/;"	v
g:markdown_fenced_languages	vim82\syntax\markdown.vim	/^  let g:markdown_fenced_languages = []$/;"	v
g:markdown_fenced_languages	vim82\syntax\rmd.vim	/^    let g:markdown_fenced_languages = []$/;"	v
g:markdown_minlines	vim82\syntax\markdown.vim	/^  let g:markdown_minlines = 50$/;"	v
g:matchparen_insert_timeout	vim82\plugin\matchparen.vim	/^  let g:matchparen_insert_timeout = 60$/;"	v
g:matchparen_timeout	vim82\plugin\matchparen.vim	/^  let g:matchparen_timeout = 300$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n»°œ˚(&C)"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Annuller"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_eo.utf-8.vim	/^let g:menutrans_fileformat_choices = " &Unikso \\n &Dos \\n &Mak \\n &Rezigni "$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_fileformat_choices = " &Unix \\n &Dos \\n &Mac \\n &Peru "$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_fileformat_choices = " &Unix \\n &Dos \\n &Mac \\n &Annuler "$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_it_it.latin1.vim	/^let g:menutrans_fileformat_choices = " &Unix \\n &Dos \\n &Mac \\n &Annullare "$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n•≠•„•Û•ª•Î(&C)"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n„Ç≠„É£„É≥„Çª„É´(&C)"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nÉLÉÉÉìÉZÉã(&C)"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_polish_poland.1250.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Anuluj"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nÔ&‘Õ≈Œ¡"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n–û&—Ç–º–µ–Ω–∞"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&PrekliËi"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_sl_si.latin2.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&PrekliËi"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Prekliƒçi"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Otkazi"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&Otkaæi"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&æ‚⁄–÷ÿ"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&–û—Ç–∫–∞–∂–∏"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n›&ptal"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n›&ptal"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nƒ∞&ptal"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_vi_vn.vim	/^let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\n&H·ªßy b·ªè"$/;"	v
g:menutrans_fileformat_choices	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_fileformat_choices = "&Unix\\n&Dos\\n&Mac\\nÂèñÊ∂à(&C)"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_ca_es.latin1.vim	/^let g:menutrans_fileformat_dialog = "Seleccioneu el format per escriure el fitxer."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_fileformat_dialog = "—°‘ÒŒƒº˛µƒ±£¥Ê∏Ò Ω:"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Vyberte typ konce ¯·dk˘"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_cs_cz.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Vyberte typ konce ≈ô√°dk≈Ø"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_czech_czech_republic.1250.vim	/^let g:menutrans_fileformat_dialog = "Vyberte typ konce ¯·dk˘"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let g:menutrans_fileformat_dialog = "Vyberte typ konce radku"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_fileformat_dialog = "V√¶lg format til skrivning af filen"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_de_de.latin1.vim	/^let g:menutrans_fileformat_dialog = "W‰hlen Sie ein Datei-Format aus"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_eo.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Elektu la formaton de la skribonta dosiero."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_es_es.latin1.vim	/^let g:menutrans_fileformat_dialog = "Seleccione el formato para escribir el archivo"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_fileformat_dialog = "Anaa tiedoston kirjoitusmuoto."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_fileformat_dialog = "Choisissez le format dans lequel Ècrire le fichier."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "V·laszd ki a f·jl form·tum·t"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_fileformat_dialog = "V√°laszd ki a f√°jl form√°tum√°t"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_is_is.latin1.vim	/^let g:menutrans_fileformat_dialog =                 "Velji Skr·arsni"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_it_it.latin1.vim	/^let g:menutrans_fileformat_dialog = "Scegli formato con cui scrivere il file"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_fileformat_dialog = "•’•°•§•ÎΩ–Œœ§Œ∫›§Œ≤˛π‘µ≠πÊ§Œ∑¡º∞§Ú¡™§Û§«§Ø§¿§µ§§."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_fileformat_dialog = "„Éï„Ç°„Ç§„É´Âá∫Âäõ„ÅÆÈöõ„ÅÆÊîπË°åË®òÂè∑„ÅÆÂΩ¢Âºè„ÇíÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_fileformat_dialog = "ÉtÉ@ÉCÉãèoóÕÇÃç€ÇÃâ¸çsãLçÜÇÃå`éÆÇëIÇÒÇ≈Ç≠ÇæÇ≥Ç¢."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_fileformat_dialog = "Selecteer formaat voor het schrijven van het bestand"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_no_no.latin1.vim	/^	let g:menutrans_fileformat_dialog = "Velg filformat som filen skal lagres med"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w ktÛrym ten plik ma byÊ zapisany"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w kt√≥rym ten plik ma byƒá zapisany"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_polish_poland.1250.vim	/^let g:menutrans_fileformat_dialog = "Wybierz format w ktÛrym ten plik ma byÊ zapisany"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_pt_br.vim	/^let g:menutrans_fileformat_dialog = "Selecione o formato para gravar o arquivo"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_pt_pt.vim	/^let g:menutrans_fileformat_dialog = "Selecione o formato para gravar o arquivo"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_fileformat_dialog = "˜Ÿ¬≈“…‘≈ ∆œ“Õ¡‘ ∆¡ Ã¡."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_fileformat_dialog = "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sl_si.latin2.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Izberite format datoteke"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_fileformat_dialog = "Izaberite format zapisa datoteke"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_fileformat_dialog = "Izaberite format zapisa datoteke"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_fileformat_dialog = "∏◊–—’‡ÿ‚’ ‰ﬁ‡‹–‚ ◊–ﬂÿ·– ‘–‚ﬁ‚’⁄’"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_fileformat_dialog = "–ò–∑–∞–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Å–∞ —Ñ–∞—ò–ª–∞"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_sv_se.latin1.vim	/^let g:menutrans_fileformat_dialog = "V‰lj filformat som filen ska sparas med"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_fileformat_dialog = "Dosya biÁimi seÁin"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_fileformat_dialog = "Dosya biÁimi seÁin"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_fileformat_dialog = "Dosya bi√ßimi se√ßin"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_fileformat_dialog = "¬Ë·Â≥Ú¸ ÙÓÏ‡Ú Ù‡ÈÎÛ"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_fileformat_dialog = "˜…¬≈“¶‘ÿ ∆œ“Õ¡‘ ∆¡ Ã’"$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_vi_vn.vim	/^let g:menutrans_fileformat_dialog = "H√£y ch·ªçn ƒë·ªãnh d·∫°ng t·∫≠p tin."$/;"	v
g:menutrans_fileformat_dialog	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_fileformat_dialog = "ÈÄâÊã©Êñá‰ª∂ÁöÑ‰øùÂ≠òÊ†ºÂºè:"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_ca_es.latin1.vim	/^let g:menutrans_help_dialog = "IntroduÔu el terme sobre el qual necessiteu ajuda.\\n\\nUseu el prefix i_ per ordres d'entrada (p.ex.: i_CTRL-X)\\nUseu el prefix c_ per ordres de la lÌnia d'ordres (p.ex.: c_<Del>)\\nUseu el prefix ' per noms d'opcions (p.ex.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_help_dialog = " ‰»Î√¸¡ÓªÚµ•¥ “‘ªÒµ√∞Ô÷˙:\\n\\n«∞◊∫ i_ ±Ì æ ‰»Îƒ£ Ωœ¬µƒ√¸¡Ó(»Á: i_CTRL-X)\\n«∞◊∫ c_ ±Ì æ√¸¡Ó––œ¬µƒ±‡º≠√¸¡Ó(»Á: c_<Del>)\\n«∞◊∫ ' ±Ì æ—°œÓ√˚(»Á: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let g:menutrans_help_dialog = "Zadejte hledan˝ p¯Ìkaz nebo slovo:\\n\\n\\tP¯idejte i_ pro p¯Ìkazy vkl·dacÌho reæimu (nap¯. i_CTRL-X)\\n\\tP¯idejte c_ pro p¯Ìkazy p¯ÌkazovÈ ¯·dky (nap¯. c_<Del>)\\n\\tP¯idejte ' pro jmÈno volby (nap¯. 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_cs_cz.utf-8.vim	/^let g:menutrans_help_dialog = "Zadejte hledan√Ω p≈ô√≠kaz nebo slovo:\\n\\n\\tP≈ôidejte i_ pro p≈ô√≠kazy vkl√°dac√≠ho re≈æimu (nap≈ô. i_CTRL-X)\\n\\tP≈ôidejte c_ pro p≈ô√≠kazy p≈ô√≠kazov√© ≈ô√°dky (nap≈ô. c_<Del>)\\n\\tP≈ôidejte ' pro jm√©no volby (nap≈ô. 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_czech_czech_republic.1250.vim	/^let g:menutrans_help_dialog = "Zadejte hledan˝ p¯Ìkaz nebo slovo:\\n\\n\\tP¯idejte i_ pro p¯Ìkazy vkl·dacÌho reûimu (nap¯. i_CTRL-X)\\n\\tP¯idejte c_ pro p¯Ìkazy p¯ÌkazovÈ ¯·dky (nap¯. c_<Del>)\\n\\tP¯idejte ' pro jmÈno volby (nap¯. 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let g:menutrans_help_dialog = "Zadejte hledany prikaz nebo slovo:\\n\\n\\tPridejte i_ pro prikazy vkladaciho rezimu (napr. i_CTRL-X)\\n\\tPridejte c_ pro prikazy prikazove radky (napr. c_<Del>)\\n\\tPridejte ' pro jmeno volby (napr. 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_help_dialog = "Indtast en kommando eller ord for at finde hj√¶lp om:\\n\\nStart med i_ for kommandoer til inputtilstand (f.eks.: i_CTRL-X)\\nStart med c_ for kommandoer til redigering af kommandolinje (f.eks.: c_<Del>)\\nStart med ' for et tilvalgsnavn (f.eks.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_de_de.latin1.vim	/^let g:menutrans_help_dialog = "Geben Sie einen Befehl oder ein Wort ein, f¸r das Sie Hilfe benˆtigen:\\n\\nVerwenden Sie i_ f¸r Eingabe ('input') Befehle (z.B.: i_CTRL-X)\\nVerwenden Sie c_ f¸r Befehls-Zeilen ('command-line') Befehle (z.B.: c_<Del>)\\nVerwenden Sie ' f¸r Options-Namen (z.B.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_eo.utf-8.vim	/^let g:menutrans_help_dialog = "Tajpu komandon a≈≠ serƒâendan vorton en la helparo.\\n\\nAldonu i_ por la komandoj de la enmeta reƒùimo (ekz: i_CTRL-X)\\nAldonu c_ por redakto de la komanda linio (ekz: c_<Del>)\\nƒàirka≈≠i la opciojn per apostrofoj (ekz: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_es_es.latin1.vim	/^let g:menutrans_help_dialog = "Introduzca un nombre de comando o palabra para obtener ayuda;\\n\\nAnteponga i_ para comandos de entrada (e.g.: i_CTRL-X)\\nAnteponga c_ para comandos de la lÌnea de comandos (e.g.: c_<Del>)\\nAnteponga ` para un nombre de opciÛn (e.g.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_help_dialog = "Anna komento tai sana, jota haetaan ohjeesta.\\n\\nAloita i_:ll‰ syˆttˆtilan komentoja varten (esim. i_CTRL-X)\\nAloita c_:ll‰ komentorivi‰ varten (esim. c_<Del>)\\nKirjoita asetukset puolilainausmerkkeijin (esim. 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_help_dialog = "Entrez une commande ou un mot ‡ rechercher dans l'aide.\\n\\nAjoutez i_ pour les commandes du mode Insertion (ex: i_CTRL-X)\\nAjoutez c_ pour l'Èdition de la ligne de commande (ex: c_<Del>)\\nEntourez les options avec des apostrophes (ex: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_is_is.latin1.vim	/^let g:menutrans_help_dialog =                       "Sl·i inn skipun ea ora til a leita uppl˝singa um:\\n\\nForskeyti i_ fyrir Ìlagshamsskipanir (t.d. i_CTRL-X)\\nForskeyti c_ fyrir skipanalÌnuskipanir (t.d. c_<Del>)\\nForskeyti ' fyrir nafn · valmˆguleika (t.d. 'shiftbreidd')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_it_it.latin1.vim	/^let g:menutrans_help_dialog = "Batti un comando o una parola per cercare aiuto:\\n\\nPremetti i_ per comandi in modo Input (ad.es.: i_CTRL-X)\\nPremetti c_ per comandi che editano la linea-comandi (ad.es.: c_<Del>)\\nPremetti ' per un nome di opzione (ad.es.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_help_dialog = "•ÿ•Î•◊§Ú∏°∫˜§∑§ø§§•≥•ﬁ•Û•…§‚§∑§Ø§œ√±∏Ï§Ú∆˛Œœ§∑§∆§Ø§¿§µ§§:\\n\\n¡ﬁ∆˛•‚°º•…§Œ•≥•ﬁ•Û•…§À§œ i_ §Ú¿Ë∆¨§À…’≤√§∑§ﬁ§π. (Œ„: i_CTRL-X)\\n•≥•ﬁ•Û•…•È•§•Û ‘Ω∏•≥•ﬁ•Û•…§À§œ c_ §Ú¿Ë∆¨§À…’≤√§∑§ﬁ§π. (Œ„: c_<Del>)\\n•™•◊•∑•Á•Û§ŒÃæ¡∞§À§œ ' §Ú…’≤√§∑§ﬁ§π. (Œ„: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_help_dialog = "„Éò„É´„Éó„ÇíÊ§úÁ¥¢„Åó„Åü„ÅÑ„Ç≥„Éû„É≥„Éâ„ÇÇ„Åó„Åè„ÅØÂçòË™û„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\\n\\nÊåøÂÖ•„É¢„Éº„Éâ„ÅÆ„Ç≥„Éû„É≥„Éâ„Å´„ÅØ i_ „ÇíÂÖàÈ†≠„Å´‰ªòÂä†„Åó„Åæ„Åô. (‰æã: i_CTRL-X)\\n„Ç≥„Éû„É≥„Éâ„É©„Ç§„É≥Á∑®ÈõÜ„Ç≥„Éû„É≥„Éâ„Å´„ÅØ c_ „ÇíÂÖàÈ†≠„Å´‰ªòÂä†„Åó„Åæ„Åô. (‰æã: c_<Del>)\\n„Ç™„Éó„Ç∑„Éß„É≥„ÅÆÂêçÂâç„Å´„ÅØ ' „Çí‰ªòÂä†„Åó„Åæ„Åô. (‰æã: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_help_dialog = "ÉwÉãÉvÇåüçıÇµÇΩÇ¢ÉRÉ}ÉìÉhÇ‡ÇµÇ≠ÇÕíPåÍÇì¸óÕÇµÇƒÇ≠ÇæÇ≥Ç¢:\\n\\në}ì¸ÉÇÅ[ÉhÇÃÉRÉ}ÉìÉhÇ…ÇÕ i_ ÇêÊì™Ç…ïtâ¡ÇµÇ‹Ç∑. (ó·: i_CTRL-X)\\nÉRÉ}ÉìÉhÉâÉCÉìï“èWÉRÉ}ÉìÉhÇ…ÇÕ c_ ÇêÊì™Ç…ïtâ¡ÇµÇ‹Ç∑. (ó·: c_<Del>)\\nÉIÉvÉVÉáÉìÇÃñºëOÇ…ÇÕ ' Çïtâ¡ÇµÇ‹Ç∑. (ó·: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_no_no.latin1.vim	/^	let g:menutrans_help_dialog = "Skriv en kommando eller ord du vil ha hjelp om:\\n\\nLegg til i_ i begynnelsen for inndatametoder (f.eks.: i_CTRL-X)\\nLegg til c_ i begynnelsen for kommandoer som redigerer kommandolinjen (f.eks.: c_<Del>)\\nLegg til ' i begynnelsen for et valgnavn (f.eks.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_pt_br.vim	/^let g:menutrans_help_dialog = "Digite um comando ou palavra para obter ajuda;\\n\\nAnteponha i_ para comandos de entrada (ex.: i_CTRL-X)\\nAnteponha c_ para comandos da linha de comandos (ex.: c_<Del>)\\nAnteponha ` para um nome de opÁ„o (ex.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_pt_pt.vim	/^let g:menutrans_help_dialog = "Digite um comando ou palavra para obter ajuda;\\n\\nAnteponha i_ para comandos de entrada (ex.: i_CTRL-X)\\nAnteponha c_ para comandos da linha de comandos (ex.: c_<Del>)\\nAnteponha ` para um nome de opÁ„o (ex.: `shiftwidth`)"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_help_dialog = "˜◊≈ƒ…‘≈ ÀœÕ¡Œƒ’ …Ã… ”Ãœ◊œ ƒÃ— –œ…”À¡:\\n\\n‰œ¬¡◊ÿ‘≈ i_ ƒÃ— –œ…”À¡ ÀœÕ¡Œƒ “≈÷…Õ¡ ˜”‘¡◊À… (Œ¡–“…Õ≈“, i_CTRL-X)\\n‰œ¬¡◊ÿ‘≈ c_ ƒÃ— –œ…”À¡ ÀœÕ¡Œƒ Ô¬ŸﬁŒœ«œ “≈÷…Õ¡ (Œ¡–“…Õ≈“, ”_<Del>)\\n‰œ¬¡◊ÿ‘≈ ' ƒÃ— –œ…”À¡ ”–“¡◊À… –œ œ–√…… (Œ¡–“…Õ≈“, 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_help_dialog = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:\\n\\n–î–æ–±–∞–≤—å—Ç–µ i_ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ —Ä–µ–∂–∏–º–∞ –í—Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, i_CTRL-X)\\n–î–æ–±–∞–≤—å—Ç–µ c_ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –û–±—ã—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å_<Del>)\\n–î–æ–±–∞–≤—å—Ç–µ ' –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –æ–ø—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero ûelite pomoË:\\n\\nUporabite predpono i_ za ukaze v naËinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_sl_si.latin2.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero æelite pomoË:\\n\\nUporabite predpono i_ za ukaze v naËinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_help_dialog = "Vnesite ukaz ali besedo, za katero ≈æelite pomoƒç:\\n\\nUporabite predpono i_ za ukaze v naƒçinu za pisanje (npr.: i_CTRL-X)\\nUporabite predpono c_ za ukaze v ukazni vrstici (command-line) (npr.: c_<Del>)\\nUporabite predpono ' za imena opcij (npr.: 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_help_dialog = "Yard˝m iÁin komut veya sˆzc¸k girin:\\n\\nEkleme Kipi komutlar˝n˝ aramak iÁin i_ ekleyin (ˆrnein i_CTRL-X)\\nNormal Kip komutlar˝n˝ aramak iÁin _c ekleyin (ˆrnein c_<Del>)\\nSeÁenekler hakk˝nda yard˝m almak iÁin ' ekleyin (ˆrnein 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_help_dialog = "Yard˝m iÁin komut veya sˆzc¸k girin:\\n\\nEkleme Kipi komutlar˝n˝ aramak iÁin i_ ekleyin (ˆrnein i_CTRL-X)\\nNormal Kip komutlar˝n˝ aramak iÁin _c ekleyin (ˆrnein c_<Del>)\\nSeÁenekler hakk˝nda yard˝m almak iÁin ' ekleyin (ˆrnein 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_help_dialog = "Yardƒ±m i√ßin komut veya s√∂zc√ºk girin:\\n\\nEkleme Kipi komutlarƒ±nƒ± aramak i√ßin i_ ekleyin (√∂rneƒüin i_CTRL-X)\\nNormal Kip komutlarƒ±nƒ± aramak i√ßin _c ekleyin (√∂rneƒüin c_<Del>)\\nSe√ßenekler hakkƒ±nda yardƒ±m almak i√ßin ' ekleyin (√∂rneƒüin 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_vi_vn.vim	/^let g:menutrans_help_dialog = "H√£y nh·∫≠p c√¢u l·ªánh ho·∫∑c t·ª´ kh√≥a t√¨m ki·∫øm:\\n\\nTh√™m i_ ƒë·ªÉ t√¨m ki·∫øm c√¢u l·ªánh c·ªßa ch·∫ø ƒë·ªô Nh·∫≠p Input (V√≠ d·ª•, i_CTRL-X)\\nTh√™m c_ ƒë·ªÉ t√¨m ki·∫øm c√¢u l·ªánh c·ªßa ch·∫ø ƒë·ªô so·∫°n th·∫£o d√≤ng l·ªánh (V√≠ d·ª•, —Å_<Del>)\\nTh√™m ' ƒë·ªÉ t√¨m ki·∫øm tr·ª£ gi√∫p cho m·ªôt t√πy ch·ªçn (v√≠ d·ª•, 'shiftwidth')"$/;"	v
g:menutrans_help_dialog	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_help_dialog = "ËæìÂÖ•ÂëΩ‰ª§ÊàñÂçïËØç‰ª•Ëé∑ÂæóÂ∏ÆÂä©:\\n\\nÂâçÁºÄ i_ Ë°®Á§∫ËæìÂÖ•Ê®°Âºè‰∏ãÁöÑÂëΩ‰ª§(Â¶Ç: i_CTRL-X)\\nÂâçÁºÄ c_ Ë°®Á§∫ÂëΩ‰ª§Ë°å‰∏ãÁöÑÁºñËæëÂëΩ‰ª§(Â¶Ç: c_<Del>)\\nÂâçÁºÄ ' Ë°®Á§∫ÈÄâÈ°πÂêç(Â¶Ç: 'shiftwidth')"$/;"	v
g:menutrans_no_file	vim82\lang\menu_ca_es.latin1.vim	/^let g:menutrans_no_file = "[Cap fitxer]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_no_file = "[ŒﬁŒƒº˛]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let g:menutrans_no_file = "[Æ·dn˝ soubor]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_cs_cz.utf-8.vim	/^let g:menutrans_no_file = "[≈Ω√°dn√Ω soubor]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_czech_czech_republic.1250.vim	/^let g:menutrans_no_file = "[é·dn˝ soubor]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let g:menutrans_no_file = "[Zadny soubor]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_no_file = "[Ingen fil]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_de_de.latin1.vim	/^let g:menutrans_no_file = "[Keine Datei]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_eo.utf-8.vim	/^let g:menutrans_no_file = "[Neniu dosiero]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_es_es.latin1.vim	/^let g:menutrans_no_file = "[Sin archivo]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_no_file = "[Ei tiedostoja]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_no_file = "[Aucun fichier]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_is_is.latin1.vim	/^let g:menutrans_no_file =                           "[Engin Skr·]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_it_it.latin1.vim	/^let g:menutrans_no_file = "[Senza nome]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_no_file = "[ÃµÃæ]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_no_file = "[ÁÑ°Âêç]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_no_file = "[ñ≥ñº]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_no_no.latin1.vim	/^	let g:menutrans_no_file = "[Uten navn]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_pt_br.vim	/^let g:menutrans_no_file = "[Sem arquivos]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_pt_pt.vim	/^let g:menutrans_no_file = "[Sem arquivos]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_sl_si.latin2.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_no_file = "[Brez datoteke]"$/;"	v
g:menutrans_no_file	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_no_file = "[Êó†Êñá‰ª∂]"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_ca_es.latin1.vim	/^let g:menutrans_path_dialog = "IntroduÔu les ubicacions on cercar fitxers.\\nSepareu els noms dels directoris amb una coma."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_path_dialog = " ‰»ÎÀ—À˜¬∑æ∂°£\\n”√∂∫∫≈∑÷∏Ùƒø¬º√˚°£"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Zadejte cesty pro vyhled·v·nÌ soubor˘. JednotlivÈ cesty oddÏlte Ë·rkou"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_cs_cz.utf-8.vim	/^let g:menutrans_path_dialog = "Zadejte cesty pro vyhled√°v√°n√≠ soubor≈Ø. Jednotliv√© cesty oddƒõlte ƒç√°rkou"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_czech_czech_republic.1250.vim	/^let g:menutrans_path_dialog = "Zadejte cesty pro vyhled·v·nÌ soubor˘. JednotlivÈ cesty oddÏlte Ë·rkou"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let g:menutrans_path_dialog = "Zadejte cesty pro vyhledavani souboru. Jednotlive cesty oddelte carkou"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_path_dialog = "Indtast s√∏gesti til filer.\\nSeparer mappenavne med et komma."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_de_de.latin1.vim	/^let g:menutrans_path_dialog = "Geben Sie Such-Pfade f¸r Dateien ein.\\nTrennen Sie die Verzeichnis-Namen durch Kommata."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_eo.utf-8.vim	/^let g:menutrans_path_dialog = "Tajpu la vojon de serƒâo de dosieroj.\\nDisigu la dosierujojn per komoj."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_es_es.latin1.vim	/^let g:menutrans_path_dialog = "Introduzca la ruta de b˙squeda para los archivos.\\nSepare los nombres de los directorios con una coma."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_path_dialog = "Anna tiedostojen hakupolku.\\nErota hakemistot pilkuin."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_path_dialog = "Entrez le chemin de recherche des fichiers.\\nSÈparez les rÈpertoires par des virgules."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Õrd be a keresett f·jl lehetsÈges elÈrÈsi ˙tjait, vesszıvel elv·lasztva"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_path_dialog = "√çrd be a keresett f√°jl lehets√©ges el√©r√©si √∫tjait, vessz≈ëvel elv√°lasztva"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_is_is.latin1.vim	/^let g:menutrans_path_dialog =                       "Sl·i inn leitarslÛ fyrir skr·r.\\nAskilji mˆppur me kommu"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_it_it.latin1.vim	/^let g:menutrans_path_dialog = "Batti percorso di ricerca per i file.\\nSepara fra loro i nomi di directory con una virgola."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_path_dialog = "•’•°•§•Î§Œ∏°∫˜•—•π§Ú∆˛Œœ§∑§∆§Ø§¿§µ§§:\\n•«•£•Ï•Ø•»•ÍÃæ§œ•´•Û•ﬁ ( , ) §«∂Ë¿⁄§√§∆§Ø§¿§µ§§."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_path_dialog = "„Éï„Ç°„Ç§„É´„ÅÆÊ§úÁ¥¢„Éë„Çπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\\n„Éá„Ç£„É¨„ÇØ„Éà„É™Âêç„ÅØ„Ç´„É≥„Éû ( , ) „ÅßÂå∫Âàá„Å£„Å¶„Åè„Å†„Åï„ÅÑ."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_path_dialog = "ÉtÉ@ÉCÉãÇÃåüçıÉpÉXÇì¸óÕÇµÇƒÇ≠ÇæÇ≥Ç¢:\\nÉfÉBÉåÉNÉgÉäñºÇÕÉJÉìÉ} ( , ) Ç≈ãÊêÿÇ¡ÇƒÇ≠ÇæÇ≥Ç¢."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_path_dialog = "Typ het zoekpad voor bestanden.\\nGebruik commas tussen de padnamen."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_no_no.latin1.vim	/^	let g:menutrans_path_dialog = "Skriv s¯kesti for filer.\\nSkill katalognavn med komma."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Wprowadº ∂cieøkÍ poszukiwania plikÛw.\\nProszÍ rozdzielaÊ nazwy katalogÛw przecinkiem."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_path_dialog = "Wprowad≈∫ ≈õcie≈ºkƒô poszukiwania plik√≥w.\\nProszƒô rozdzielaƒá nazwy katalog√≥w przecinkiem."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_polish_poland.1250.vim	/^let g:menutrans_path_dialog = "Wprowadü úcieøkÍ poszukiwania plikÛw.\\nProszÍ rozdzielaÊ nazwy katalogÛw przecinkiem."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_pt_br.vim	/^let g:menutrans_path_dialog = "Indique um caminho de procura para os arquivos.\\nSepare os nomes dos diretÛrios com uma vÌrgula."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_pt_pt.vim	/^let g:menutrans_path_dialog = "Indique um caminho de procura para os arquivos.\\nSepare os nomes dos diretÛrios com uma vÌrgula."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_path_dialog = "ıÀ¡÷…‘≈ –’‘ÿ ƒÃ— –œ…”À¡ ∆¡ Ãœ◊.\\nÈÕ≈Œ¡ À¡‘¡Ãœ«œ◊ “¡⁄ƒ≈Ã—¿‘”— ⁄¡–—‘ŸÕ…."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_path_dialog = "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤.\\n–ò–º–µ–Ω–∞ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ —Ä–∞–∑–¥–µ–ª—è—é—Ç—Å—è –∑–∞–ø—è—Ç—ã–º–∏."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loËite z vejico."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sl_si.latin2.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loËite z vejico."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_path_dialog = "Vnesite poti za iskanje datotek.\\nImena direktorijev loƒçite z vejico."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_path_dialog = "Unesite put pretrage za datoteke\\nRazdvojite zarezima imena direktorijuma."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_path_dialog = "Unesite put pretrage za datoteke\\nRazdvojite zarezima imena direktorijuma."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_path_dialog = "√›’·ÿ‚’ ﬂ„‚ ﬂ‡’‚‡–”’ ◊– ‘–‚ﬁ‚’⁄’\\n¿–◊‘“ﬁ¯ÿ‚’ ◊–‡’◊ÿ‹– ÿ‹’›– ‘ÿ‡’⁄‚ﬁ‡ÿ¯„‹–."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_path_dialog = "–£–Ω–µ—Å–∏—Ç–µ –ø—É—Ç–∞—ö—É –ø—Ä–µ—Ç—Ä–∞–≥–µ –∑–∞ —Ñ–∞—ò–ª–æ–≤–µ\\n–†–∞–∑–¥–≤–æ—ò–∏—Ç–µ –∑–∞—Ä–µ–∑–∏–º–∞ –∏–º–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—ò—É–º–∞."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_sv_se.latin1.vim	/^let g:menutrans_path_dialog = "Skriv in sˆkv‰g fˆr filer.\\nSeparera katalognamn med komma"$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_path_dialog = "Dosya aramas˝ iÁin yol belirtin.\\nDizin adlar˝ virg¸llerle ayr˝l˝r."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_path_dialog = "Dosya aramas˝ iÁin yol belirtin.\\nDizin adlar˝ virg¸llerle ayr˝l˝r."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_path_dialog = "Dosya aramasƒ± i√ßin yol belirtin.\\nDizin adlarƒ± virg√ºllerle ayrƒ±lƒ±r."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_path_dialog = "¬Í‡Ê≥Ú¸ ¯Îˇı ÔÓ¯ÛÍÛ Ù‡ÈÎ≥‚\n–ÓÁ‰≥ÎˇÈÚÂ Ì‡Á‚Ë ‰ËÂÍÚÓ≥È ÍÓÏ‡ÏË."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_path_dialog = "˜À¡÷¶‘ÿ €Ã—» –œ€’À’ ∆¡ Ã¶◊\\nÚœ⁄ƒ¶Ã— ‘≈ Œ¡⁄◊… ƒ…“≈À‘œ“¶  ÀœÕ¡Õ…."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_vi_vn.vim	/^let g:menutrans_path_dialog = "H√£y ch·ªâ ra ƒë∆∞·ªùng d·∫´n ƒë·ªÉ t√¨m ki·∫øm t·∫≠p tin.\\nT√™n c·ªßa th∆∞ m·ª•c ph√¢n c√°ch nhau b·ªüi d·∫•u ph·∫©y."$/;"	v
g:menutrans_path_dialog	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_path_dialog = "ËæìÂÖ•ÊêúÁ¥¢Ë∑ØÂæÑ„ÄÇ\nÁî®ÈÄóÂè∑ÂàÜÈöîÁõÆÂΩïÂêç„ÄÇ"$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_set_lang_to = "…Ë÷√”Ô—‘Œ™"$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^   let g:menutrans_set_lang_to = "Nastavit jazyk na"$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_cs_cz.utf-8.vim	/^   let g:menutrans_set_lang_to = "Nastavit jazyk na"$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_czech_czech_republic.1250.vim	/^   let g:menutrans_set_lang_to = "Nastavit jazyk na"$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_czech_czech_republic.ascii.vim	/^   let g:menutrans_set_lang_to = "Nastavit jazyk na"$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_set_lang_to = "S√¶t sprog til"$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_set_lang_to =				'ı”‘¡Œœ◊…‘ÿ —⁄ŸÀ'$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_set_lang_to =				'–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —è–∑—ã–∫'$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_set_lang_to =		'Dil Y¸kle'$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_set_lang_to =		'Dil Y¸kle'$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_set_lang_to =		'Dil Y√ºkle'$/;"	v
g:menutrans_set_lang_to	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_set_lang_to = "ËÆæÁΩÆËØ≠Ë®Ä‰∏∫"$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_spell_add_ARG_to_word_list = 'Ω´\\ "%s"\\ ÃÌº”µΩ¥ µ‰'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_spell_add_ARG_to_word_list = 'Tilf√∏j\\ "%s"\\ til\\ ordliste'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_spell_add_ARG_to_word_list = '"%s"\\ §Ú√±∏Ï•Í•π•»§Àƒ…≤√'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_spell_add_ARG_to_word_list = '"%s"\\ „ÇíÂçòË™û„É™„Çπ„Éà„Å´ËøΩÂä†'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_spell_add_ARG_to_word_list = '"%s"\\ ÇíPåÍÉäÉXÉgÇ…í«â¡'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_spell_add_ARG_to_word_list =		'–î–æ–±–∞–≤–∏—Ç—å\ "%s"\\ –≤\\ —Å–ª–æ–≤–∞—Ä—å'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_spell_add_ARG_to_word_list =	'"%s"\\ sˆzc¸¸n¸\ sˆzl¸e\\ ekle'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_spell_add_ARG_to_word_list =	'"%s"\\ sˆzc¸¸n¸\ sˆzl¸e\\ ekle'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_spell_add_ARG_to_word_list =	'"%s"\\ s√∂zc√ºƒü√ºn√º\\ s√∂zl√ºƒüe\\ ekle'$/;"	v
g:menutrans_spell_add_ARG_to_word_list	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_spell_add_ARG_to_word_list = 'Â∞Ü\ "%s"\\ Ê∑ªÂä†Âà∞ËØçÂÖ∏'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_spell_change_ARG_to = 'Ω´\\ "%s"\\ ∏¸∏ƒŒ™'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_spell_change_ARG_to = '√Ündr\\ "%s"\\ til'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_spell_change_ARG_to = '"%s"\\ §Ú —ππ'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_spell_change_ARG_to = '"%s"\\ „ÇíÂ§âÊõ¥'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_spell_change_ARG_to = '"%s"\\ ÇïœçX'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_spell_change_ARG_to =			'–ò—Å–ø—Ä–∞–≤–∏—Ç—å\ "%s"\\ –Ω–∞'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_spell_change_ARG_to =		'D¸zeltilecek:\\ "%s"\\ ->'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_spell_change_ARG_to =		'D¸zeltilecek:\\ "%s"\\ ->'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_spell_change_ARG_to =		'D√ºzeltilecek:\\ "%s"\\ ->'$/;"	v
g:menutrans_spell_change_ARG_to	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_spell_change_ARG_to = 'Â∞Ü\ "%s"\\ Êõ¥Êîπ‰∏∫'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_spell_ignore_ARG = '∫ˆ¬‘\\ "%s"'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_spell_ignore_ARG = 'Ignorer "%s"'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_spell_ignore_ARG = '"%s"\\ §ÚÃµªÎ'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_spell_ignore_ARG = '"%s"\\ „ÇíÁÑ°Ë¶ñ'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_spell_ignore_ARG = '"%s"\\ Çñ≥éã'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_spell_ignore_ARG =			'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å\ "%s"'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_spell_ignore_ARG =		'"%s"\\ sˆzc¸¸n¸\ yoksay'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_spell_ignore_ARG =		'"%s"\\ sˆzc¸¸n¸\ yoksay'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_spell_ignore_ARG =		'"%s"\\ s√∂zc√ºƒü√ºn√º\\ yoksay'$/;"	v
g:menutrans_spell_ignore_ARG	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_spell_ignore_ARG = 'ÂøΩÁï•\\ "%s"'$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_ca_es.latin1.vim	/^let g:menutrans_tags_dialog = "IntroduÔu els noms dels fitxers d'etiquetes.\\nSepareu els noms amb una coma."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_tags_dialog = " ‰»Î±Íº«Œƒº˛(Tags)√˚≥∆°£\\n”√∂∫∫≈∑÷∏ÙŒƒº˛√˚°£"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Zadejte jmÈna soubor˘ s tagy. JmÈna oddÏlte Ë·rkami."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_cs_cz.utf-8.vim	/^let g:menutrans_tags_dialog = "Zadejte jm√©na soubor≈Ø s tagy. Jm√©na oddƒõlte ƒç√°rkami."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_czech_czech_republic.1250.vim	/^let g:menutrans_tags_dialog = "Zadejte jmÈna soubor˘ s tagy. JmÈna oddÏlte Ë·rkami."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let g:menutrans_tags_dialog = "Zadejte jmena souboru s tagy. Jmena oddelte carkami."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_tags_dialog = "Indtast navne p√• tag-filer.\\nSeparer navnene med et komma."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_de_de.latin1.vim	/^let g:menutrans_tags_dialog = "Geben Sie die Namen der 'tag'-Dateien ein.\\nTrennen Sie die Namen durch Kommata."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_eo.utf-8.vim	/^let g:menutrans_tags_dialog = "Tajpu la nomojn de dosieroj de etikedoj.\\nDisigu la nomojn per komoj."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_es_es.latin1.vim	/^let g:menutrans_tags_dialog = "Introduzca los nombres de los archivos de tags.\\nSepare los nombres con una coma."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_tags_dialog = "Anna t‰gitiedostojen nimet.\\nErota tidostot pilkuin."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_tags_dialog = "Entrez les noms des fichiers d'Ètiquettes.\\nSÈparez les noms par des virgules."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Õrd be a tag f·jl lehetsÈges elÈrÈsi ˙tjait, vesszıvel elv·lasztva"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_tags_dialog = "√çrd be a tag f√°jl lehets√©ges el√©r√©si √∫tjait, vessz≈ëvel elv√°lasztva"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_is_is.latin1.vim	/^let g:menutrans_tags_dialog =                       "Sl·i inn nafn Merkjaskr·a.\\nAskilji nˆfnin me kommu"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_it_it.latin1.vim	/^let g:menutrans_tags_dialog = "Batti nome dei file di tag.\\nSepara fra loro i nomi di directory con una virgola."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_tags_dialog = "•ø•∞•’•°•§•Î§ŒÃæ¡∞§Ú∆˛Œœ§∑§∆§Ø§¿§µ§§:\\nÃæ¡∞§œ•´•Û•ﬁ ( , ) §«∂Ë¿⁄§√§∆§Ø§¿§µ§§."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_tags_dialog = "„Çø„Ç∞„Éï„Ç°„Ç§„É´„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\\nÂêçÂâç„ÅØ„Ç´„É≥„Éû ( , ) „ÅßÂå∫Âàá„Å£„Å¶„Åè„Å†„Åï„ÅÑ."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_tags_dialog = "É^ÉOÉtÉ@ÉCÉãÇÃñºëOÇì¸óÕÇµÇƒÇ≠ÇæÇ≥Ç¢:\\nñºëOÇÕÉJÉìÉ} ( , ) Ç≈ãÊêÿÇ¡ÇƒÇ≠ÇæÇ≥Ç¢."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_tags_dialog = "Typ namen van tag bestanden.\\nGebruik commas tussen de namen."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_no_no.latin1.vim	/^	let g:menutrans_tags_dialog = "Skriv navn pÂ tagfiler.\\nSkill navnene med komma."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plikÛw tagÛw.\\nProszÍ rozdzielaÊ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plik√≥w tag√≥w.\\nProszƒô rozdzielaƒá nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_polish_poland.1250.vim	/^let g:menutrans_tags_dialog = "Podaj nazwy plikÛw tagÛw.\\nProszÍ rozdzielaÊ nazwy przecinkiem."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_pt_br.vim	/^let g:menutrans_tags_dialog = "Indique os nomes dos arquivos de tags.\\nSepare os nomes com uma vÌrgula."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_pt_pt.vim	/^let g:menutrans_tags_dialog = "Indique os nomes dos arquivos de tags.\\nSepare os nomes com uma vÌrgula."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_tags_dialog = "˜◊≈ƒ…‘≈ …Õ≈Œ¡ ∆¡ Ãœ◊ Õ≈‘œÀ (ﬁ≈“≈⁄ ⁄¡–—‘’¿).\\n"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_tags_dialog = "–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –º–µ—Ç–æ–∫ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é).\\n"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaËkami ('tag').\\nImana loËite z vejicami."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sl_si.latin2.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaËkami ('tag').\\nImana loËite z vejicami."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_tags_dialog = "Vnesite imena datotek z znaƒçkami ('tag').\\nImana loƒçite z vejicami."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_tags_dialog = "Unesite imena datoteka sa oznakama\\nRazdvojite zarezima imena."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_tags_dialog = "Unesite imena datoteka sa oznakama\\nRazdvojite zarezima imena."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_tags_dialog = "√›’·ÿ‚’ ÿ‹’›– ‘–‚ﬁ‚’⁄– ·– ﬁ◊›–⁄–‹–\\n¿–◊‘“ﬁ¯ÿ‚’ ◊–‡’◊ÿ‹– ÿ‹’›–."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_tags_dialog = "–£–Ω–µ—Å–∏—Ç–µ –∏–º–µ–Ω–∞ —Ñ–∞—ò–ª–æ–≤–∞ —Å–∞ –æ–∑–Ω–∞–∫–∞–º–∞\\n–†–∞–∑–¥–≤–æ—ò–∏—Ç–µ –∑–∞—Ä–µ–∑–∏–º–∞ –∏–º–µ–Ω–∞."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_sv_se.latin1.vim	/^let g:menutrans_tags_dialog = "Skriv in namn pÂ taggfiler.\\nSeparera namn med komma."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_tags_dialog = "Etiket dosyas˝ adlar˝ belirtin (virg¸lle ay˝rarak).\\n"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_tags_dialog = "Etiket dosyas˝ adlar˝ belirtin (virg¸lle ay˝rarak).\\n"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_tags_dialog = "Etiket dosyasƒ± adlarƒ± belirtin (virg√ºlle ayƒ±rarak).\\n"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_tags_dialog = "¬Í‡Ê≥Ú¸ Ì‡Á‚Ë Ù‡ÈÎ≥‚ ÔÓÏ≥ÚÓÍ\n–ÓÁ‰≥ÎˇÈÚÂ Ì‡Á‚Ë ÍÓÏ‡ÏË."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_tags_dialog = "˜À¡÷¶‘ÿ Œ¡⁄◊… ∆¡ Ã¶◊ –œÕ¶‘œÀ\\nÚœ⁄ƒ¶Ã— ‘≈ Œ¡⁄◊… ÀœÕ¡Õ…."$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_vi_vn.vim	/^let g:menutrans_tags_dialog = "Nh·∫≠p t√™n t·∫≠p tin th·∫ª ghi (ph√¢n c√°ch b·ªüi d·∫•u ph·∫©y).\\n"$/;"	v
g:menutrans_tags_dialog	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_tags_dialog = "ËæìÂÖ•Ê†áËÆ∞Êñá‰ª∂(Tags)ÂêçÁß∞„ÄÇ\nÁî®ÈÄóÂè∑ÂàÜÈöîÊñá‰ª∂Âêç„ÄÇ"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_ca_es.latin1.vim	/^let g:menutrans_textwidth_dialog = "IntroduÔu la nova amplada del text (0 per infinit): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_chinese_gb.936.vim	/^  let g:menutrans_textwidth_dialog = " ‰»ÎŒƒ±æøÌ∂»(√ø––◊Ó¥Û◊÷∑˚ ˝£¨0 ±Ì æΩ˚”√):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Zadejte dÈlku ¯·dku (0 pro zak·z·nÌ form·tov·nÌ):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_cs_cz.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Zadejte d√©lku ≈ô√°dku (0 pro zak√°z√°n√≠ form√°tov√°n√≠):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_czech_czech_republic.1250.vim	/^let g:menutrans_textwidth_dialog = "Zadejte dÈlku ¯·dku (0 pro zak·z·nÌ form·tov·nÌ):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let g:menutrans_textwidth_dialog = "Zadejte delku radku (0 pro zakazani formatovani):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_da.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Indtast ny tekstbredde (0 for at deaktivere formatering): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_de_de.latin1.vim	/^let g:menutrans_textwidth_dialog = "Geben Sie eine neue Text-Breite ein (oder 0, um die Formatierung abzuschalten)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_eo.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Tajpu la novan larƒùon de teksto\\n(0 por mal≈ùalti formatigon)."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_es_es.latin1.vim	/^let g:menutrans_textwidth_dialog = "Introduzca el nuevo ancho del texto (0 para desactivar el quiebre de lÌnea): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_fi_fi.latin1.vim	/^let g:menutrans_textwidth_dialog = "Anna uusi tekstin leveys\\n(0 poistaa k‰ytˆst‰)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_fr_fr.latin1.vim	/^let g:menutrans_textwidth_dialog = "Entrez la nouvelle largeur du texte\\n(0 pour dÈsactiver le formatage)."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Õrd be a szˆveg szÈlessÈgÈt (0 = form·z·s kikapcsolva)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_hu_hu.utf-8.vim	/^let g:menutrans_textwidth_dialog = "√çrd be a sz√∂veg sz√©less√©g√©t (0 = form√°z√°s kikapcsolva)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_is_is.latin1.vim	/^let g:menutrans_textwidth_dialog =                  "Sl·i inn n˝ja textabreidd (0 til a Ûvirkja snim·tun): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_it_it.latin1.vim	/^let g:menutrans_textwidth_dialog = "Batti nuova lunghezza linea (0 per inibire la formattazione): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_ja_jp.euc-jp.vim	/^let g:menutrans_textwidth_dialog = "•∆•≠•π•»§Œ…˝('textwidth')§Ú¿ﬂƒÍ§∑§∆§Ø§¿§µ§§ (0§«¿∞∑¡§ÚÃµ∏˙≤Ω):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_ja_jp.utf-8.vim	/^let g:menutrans_textwidth_dialog = "„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂπÖ('textwidth')„ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ (0„ÅßÊï¥ÂΩ¢„ÇíÁÑ°ÂäπÂåñ):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_japanese_japan.932.vim	/^let g:menutrans_textwidth_dialog = "ÉeÉLÉXÉgÇÃïù('textwidth')Çê›íËÇµÇƒÇ≠ÇæÇ≥Ç¢ (0Ç≈êÆå`Çñ≥å¯âª):"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_nl_nl.latin1.vim	/^let g:menutrans_textwidth_dialog = "Typ de nieuwe tekst breedte (0 om formatteren uit the schakelen): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_no_no.latin1.vim	/^	let g:menutrans_textwidth_dialog = "Velg ny tekstbredde (0 for Â forhindre formatering): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Wprowadº now± szeroko∂Ê tekstu (0 wy≥±cza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_pl_pl.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Wprowad≈∫ nowƒÖ szeroko≈õƒá tekstu (0 wy≈ÇƒÖcza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_polish_poland.1250.vim	/^let g:menutrans_textwidth_dialog = "Wprowadü nowπ szerokoúÊ tekstu (0 wy≥πcza przewijanie): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_pt_br.vim	/^let g:menutrans_textwidth_dialog = "Digite a nova largura do texto (0 para desativar a formataÁ„o): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_pt_pt.vim	/^let g:menutrans_textwidth_dialog = "Digite a nova largura do texto (0 para desativar a formataÁ„o): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_ru_ru.koi8-r.vim	/^let g:menutrans_textwidth_dialog = "˜◊≈ƒ…‘≈ €…“…Œ’ ‘≈À”‘¡ ƒÃ— ∆œ“Õ¡‘…“œ◊¡Œ…—.\\n‰Ã— œ‘Õ≈ŒŸ ∆œ“Õ¡‘…“œ◊¡Œ…— ◊◊≈ƒ…‘≈ 0."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_ru_ru.vim	/^let g:menutrans_textwidth_dialog = "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\\n–î–ª—è –æ—Ç–º–µ–Ω—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 0."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sl_si.cp1250.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo öirino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sl_si.latin2.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo πirino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sl_si.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Vnesite novo ≈°irino besedila (ali 0 za izklop formatiranja): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sr_rs.ascii.vim	/^let g:menutrans_textwidth_dialog = "Unesite novu sirinu teksta (0 sprecava prelom)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let g:menutrans_textwidth_dialog = "Unesite novu πirinu teksta (0 spreËava prelom)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let g:menutrans_textwidth_dialog = "√›’·ÿ‚’ ›ﬁ“„ Ëÿ‡ÿ›„ ‚’⁄·‚– (0 ·ﬂ‡’Á–“– ﬂ‡’€ﬁ‹)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sr_rs.utf-8.vim	/^let g:menutrans_textwidth_dialog = "–£–Ω–µ—Å–∏—Ç–µ –Ω–æ–≤—É —à–∏—Ä–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ (0 —Å–ø—Ä–µ—á–∞–≤–∞ –ø—Ä–µ–ª–æ–º)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_sv_se.latin1.vim	/^let g:menutrans_textwidth_dialog = "V‰lj ny textbredd (0 fˆr att fˆrhindra formatering): "$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_tr_tr.cp1254.vim	/^let g:menutrans_textwidth_dialog = "BiÁimlendirme iÁin metin geni˛liini belirtin.\\nBiÁimlendirme iptali iÁin 0 girin."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let g:menutrans_textwidth_dialog = "BiÁimlendirme iÁin metin geni˛liini belirtin.\\nBiÁimlendirme iptali iÁin 0 girin."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_tr_tr.utf-8.vim	/^let g:menutrans_textwidth_dialog = "Bi√ßimlendirme i√ßin metin geni≈üliƒüini belirtin.\\nBi√ßimlendirme iptali i√ßin 0 girin."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_uk_ua.cp1251.vim	/^let g:menutrans_textwidth_dialog = "¬Í‡Ê≥Ú¸ ÌÓ‚Û ¯ËËÌÛ ÚÂÍÒÚÛ (0 ‰Îˇ ‚≥‰Ï≥ÌË ÙÓÏ‡ÚÛ‚‡ÌÌˇ)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_uk_ua.koi8-u.vim	/^let g:menutrans_textwidth_dialog = "˜À¡÷¶‘ÿ Œœ◊’ €…“…Œ’ ‘≈À”‘’ (0 ƒÃ— ◊¶ƒÕ¶Œ… ∆œÕ¡‘’◊¡ŒŒ—)"$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_vi_vn.vim	/^let g:menutrans_textwidth_dialog = "H√£y nh·∫≠p chi·ªÅu r·ªông vƒÉn b·∫£n m·ªõi.\\nNh·∫≠p 0 ƒë·ªÉ h·ªßy b·ªè."$/;"	v
g:menutrans_textwidth_dialog	vim82\lang\menu_zh_cn.utf-8.vim	/^  let g:menutrans_textwidth_dialog = "ËæìÂÖ•ÊñáÊú¨ÂÆΩÂ∫¶(ÊØèË°åÊúÄÂ§ßÂ≠óÁ¨¶Êï∞Ôºå0 Ë°®Á§∫Á¶ÅÁî®):"$/;"	v
g:mp_close_tag	vim82\indent\mp.vim	/^let g:mp_close_tag = ''$/;"	v
g:mp_open_tag	vim82\indent\mp.vim	/^let g:mp_open_tag = ''$/;"	v
g:mp_statement	vim82\indent\mp.vim	/^let g:mp_statement = ''$/;"	v
g:netrw_cursor	vim82\autoload\netrw.vim	/^ let g:netrw_cursor= g:netrw_cursorline$/;"	v
g:netrw_cygwin	vim82\autoload\netrw.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	vim82\autoload\netrw.vim	/^   let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	vim82\autoload\netrw.vim	/^  let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	vim82\autoload\tar.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	vim82\autoload\tar.vim	/^   let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	vim82\autoload\tar.vim	/^  let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	vim82\autoload\vimball.vim	/^    let g:netrw_cygwin= 0$/;"	v
g:netrw_cygwin	vim82\autoload\vimball.vim	/^    let g:netrw_cygwin= 1$/;"	v
g:netrw_cygwin	vim82\autoload\vimball.vim	/^   let g:netrw_cygwin= 0$/;"	v
g:netrw_dav_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_dav_cmd	= "cadaver"$/;"	v
g:netrw_dav_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_dav_cmd	= "curl"$/;"	v
g:netrw_dav_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_dav_cmd   = ""$/;"	v
g:netrw_fetch_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_fetch_cmd	= ""$/;"	v
g:netrw_fetch_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_fetch_cmd	= "fetch -o"$/;"	v
g:netrw_ftp_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_ftp_cmd	= "ftp"$/;"	v
g:netrw_ftp_list_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_ftp_list_cmd     = "dir"$/;"	v
g:netrw_ftp_list_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_ftp_list_cmd     = "ls -lF"$/;"	v
g:netrw_ftp_options	vim82\autoload\netrw.vim	/^ let g:netrw_ftp_options= "-i -n"$/;"	v
g:netrw_ftp_sizelist_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "dir"$/;"	v
g:netrw_ftp_sizelist_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_ftp_sizelist_cmd = "ls -slF"$/;"	v
g:netrw_ftp_timelist_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "dir"$/;"	v
g:netrw_ftp_timelist_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_ftp_timelist_cmd = "ls -tlF"$/;"	v
g:netrw_http_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_http_cmd	= ""$/;"	v
g:netrw_http_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_http_cmd	= "curl"$/;"	v
g:netrw_http_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_http_cmd	= "fetch"$/;"	v
g:netrw_http_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_http_cmd	= "wget"$/;"	v
g:netrw_http_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_http_cmd = "elinks"$/;"	v
g:netrw_http_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_http_cmd = "links"$/;"	v
g:netrw_ignorenetrc	vim82\autoload\netrw.vim	/^  let g:netrw_ignorenetrc= 0$/;"	v
g:netrw_ignorenetrc	vim82\autoload\netrw.vim	/^  let g:netrw_ignorenetrc= 1$/;"	v
g:netrw_keepj	vim82\autoload\netrw.vim	/^ let g:netrw_keepj= ""$/;"	v
g:netrw_list_cmd	vim82\autoload\netrw.vim	/^   let g:netrw_list_cmd= g:netrw_scp_cmd." -ls USEPORT HOSTNAME: ".g:netrw_list_cmd_options$/;"	v
g:netrw_list_cmd	vim82\autoload\netrw.vim	/^   let g:netrw_list_cmd= g:netrw_scp_cmd." -ls USEPORT HOSTNAME:"$/;"	v
g:netrw_list_cmd	vim82\autoload\netrw.vim	/^   let g:netrw_list_cmd= g:netrw_ssh_cmd." USEPORT HOSTNAME ls -FLa ".g:netrw_list_cmd_options$/;"	v
g:netrw_list_cmd	vim82\autoload\netrw.vim	/^   let g:netrw_list_cmd= g:netrw_ssh_cmd." USEPORT HOSTNAME ls -FLa"$/;"	v
g:netrw_list_cmd	vim82\autoload\netrw.vim	/^  let g:netrw_list_cmd= ""$/;"	v
g:netrw_list_cmd	vim82\autoload\netrw.vim	/^ let g:netrw_list_cmd= g:netrw_list_cmd." -l"$/;"	v
g:netrw_liststyle	vim82\autoload\netrw.vim	/^ let g:netrw_liststyle= s:THINLIST$/;"	v
g:netrw_localcmdshell	vim82\autoload\netrw.vim	/^ let g:netrw_localcmdshell= ""$/;"	v
g:netrw_localcopycmd	vim82\autoload\netrw.vim	/^   let g:netrw_localcopycmd   = expand("$COMSPEC")$/;"	v
g:netrw_localcopycmd	vim82\autoload\netrw.vim	/^   let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmd	vim82\autoload\netrw.vim	/^  let g:netrw_localcopycmd= ""$/;"	v
g:netrw_localcopycmd	vim82\autoload\netrw.vim	/^  let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmd	vim82\autoload\netrw.vim	/^ let g:netrw_localcopycmd= g:netrw_local_copycmd$/;"	v
g:netrw_localcopycmd	vim82\autoload\tar.vim	/^    let g:netrw_localcopycmd= "copy"$/;"	v
g:netrw_localcopycmd	vim82\autoload\tar.vim	/^    let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmd	vim82\autoload\tar.vim	/^   let g:netrw_localcopycmd= ""$/;"	v
g:netrw_localcopycmd	vim82\autoload\tar.vim	/^   let g:netrw_localcopycmd= "cp"$/;"	v
g:netrw_localcopycmdopt	vim82\autoload\netrw.vim	/^   let g:netrw_localcopycmdopt= " \/c copy"$/;"	v
g:netrw_localcopycmdopt	vim82\autoload\netrw.vim	/^let g:netrw_localcopycmdopt    = ""$/;"	v
g:netrw_localcopydircmd	vim82\autoload\netrw.vim	/^   let g:netrw_localcopydircmd   = "cp"$/;"	v
g:netrw_localcopydircmd	vim82\autoload\netrw.vim	/^   let g:netrw_localcopydircmd   = expand("$COMSPEC")$/;"	v
g:netrw_localcopydircmd	vim82\autoload\netrw.vim	/^  let g:netrw_localcopydircmd   = "cp"$/;"	v
g:netrw_localcopydircmd	vim82\autoload\netrw.vim	/^  let g:netrw_localcopydircmd= ""$/;"	v
g:netrw_localcopydircmdopt	vim82\autoload\netrw.vim	/^   let g:netrw_localcopydircmdopt= " -R"$/;"	v
g:netrw_localcopydircmdopt	vim82\autoload\netrw.vim	/^   let g:netrw_localcopydircmdopt= " \/c xcopy \/e \/c \/h \/i \/k"$/;"	v
g:netrw_localcopydircmdopt	vim82\autoload\netrw.vim	/^  let g:netrw_localcopydircmdopt= " -R"$/;"	v
g:netrw_localcopydircmdopt	vim82\autoload\netrw.vim	/^let g:netrw_localcopydircmdopt = ""$/;"	v
g:netrw_localmkdir	vim82\autoload\netrw.vim	/^   let g:netrw_localmkdir   = expand("$COMSPEC")$/;"	v
g:netrw_localmkdir	vim82\autoload\netrw.vim	/^ let g:netrw_localmkdir= g:netrw_local_mkdir$/;"	v
g:netrw_localmkdiropt	vim82\autoload\netrw.vim	/^   let g:netrw_localmkdiropt= " \/c mkdir"$/;"	v
g:netrw_localmkdiropt	vim82\autoload\netrw.vim	/^let g:netrw_localmkdiropt      = ""$/;"	v
g:netrw_localmovecmd	vim82\autoload\netrw.vim	/^   let g:netrw_localmovecmd   = expand("$COMSPEC")$/;"	v
g:netrw_localmovecmd	vim82\autoload\netrw.vim	/^   let g:netrw_localmovecmd= "mv"$/;"	v
g:netrw_localmovecmd	vim82\autoload\netrw.vim	/^  let g:netrw_localmovecmd= ""$/;"	v
g:netrw_localmovecmd	vim82\autoload\netrw.vim	/^  let g:netrw_localmovecmd= "mv"$/;"	v
g:netrw_localmovecmd	vim82\autoload\netrw.vim	/^ let g:netrw_localmovecmd= g:netrw_local_movecmd$/;"	v
g:netrw_localmovecmdopt	vim82\autoload\netrw.vim	/^   let g:netrw_localmovecmdopt= " \/c move"$/;"	v
g:netrw_localmovecmdopt	vim82\autoload\netrw.vim	/^let g:netrw_localmovecmdopt    = ""$/;"	v
g:netrw_localrmdiropt	vim82\autoload\netrw.vim	/^let g:netrw_localrmdiropt      = ""$/;"	v
g:netrw_scp_cmd	vim82\autoload\netrw.vim	/^   let g:netrw_scp_cmd ="pscp -i C:\\\\private.ppk"$/;"	v
g:netrw_sort_sequence	vim82\autoload\netrw.vim	/^  let g:netrw_sort_sequence= '[\\\/]$,\\.h$,\\.c$,\\.cpp$,*,\\.o$,\\.obj$,\\.info$,\\.swp$,\\.bak$,\\~$'$/;"	v
g:netrw_sort_sequence	vim82\autoload\netrw.vim	/^  let g:netrw_sort_sequence= '[\\\/]$,\\<core\\%(\\.\\d\\+\\)\\=\\>,\\.h$,\\.c$,\\.cpp$,\\~\\=\\*$,*,\\.o$,\\.obj$,\\.info$,\\.swp$,\\.bak$,\\~$'$/;"	v
g:netrw_xstrlen	vim82\autoload\netrw.vim	/^  let g:netrw_xstrlen= 0$/;"	v
g:netrw_xstrlen	vim82\autoload\netrw.vim	/^  let g:netrw_xstrlen= 1$/;"	v
g:netrw_xstrlen	vim82\autoload\netrw.vim	/^  let g:netrw_xstrlen= g:Align_xstrlen$/;"	v
g:netrw_xstrlen	vim82\autoload\netrw.vim	/^  let g:netrw_xstrlen= g:drawit_xstrlen$/;"	v
g:omni_sql_default_compl_type	vim82\autoload\sqlcomplete.vim	/^    let g:omni_sql_default_compl_type = 'table'$/;"	v
g:omni_sql_ignorecase	vim82\autoload\sqlcomplete.vim	/^    let g:omni_sql_ignorecase = &ignorecase$/;"	v
g:omni_sql_include_owner	vim82\autoload\sqlcomplete.vim	/^            let g:omni_sql_include_owner = 1$/;"	v
g:omni_sql_include_owner	vim82\autoload\sqlcomplete.vim	/^    let g:omni_sql_include_owner = 0$/;"	v
g:omni_sql_precache_syntax_groups	vim82\autoload\sqlcomplete.vim	/^    let g:omni_sql_precache_syntax_groups = [$/;"	v
g:omni_sql_use_tbl_alias	vim82\autoload\sqlcomplete.vim	/^    let g:omni_sql_use_tbl_alias = 'a'$/;"	v
g:omni_syntax_group_exclude_context	vim82\ftplugin\context.vim	/^  let g:omni_syntax_group_exclude_context = 'mfTodoComment'$/;"	v
g:omni_syntax_group_exclude_lifelines	vim82\syntax\lifelines.vim	/^		let g:omni_syntax_group_exclude_lifelines = 'lifelinesError'$/;"	v
g:omni_syntax_group_exclude_mf	vim82\ftplugin\mf.vim	/^let g:omni_syntax_group_exclude_mf = 'mfTodoComment'$/;"	v
g:omni_syntax_group_exclude_mp	vim82\ftplugin\mp.vim	/^let g:omni_syntax_group_exclude_mp = 'mfTodoComment'$/;"	v
g:omni_syntax_group_exclude_sql	vim82\autoload\sqlcomplete.vim	/^    let g:omni_syntax_group_exclude_sql = ''$/;"	v
g:omni_syntax_group_include_context	vim82\ftplugin\context.vim	/^  let g:omni_syntax_group_include_context = 'mf\\w\\+,mp\\w\\+'$/;"	v
g:omni_syntax_group_include_mf	vim82\ftplugin\mf.vim	/^let g:omni_syntax_group_include_mf = 'mf\\w\\+'$/;"	v
g:omni_syntax_group_include_mp	vim82\ftplugin\mp.vim	/^let g:omni_syntax_group_include_mp = 'mf\\w\\+,mp\\w\\+'$/;"	v
g:omni_syntax_group_include_sql	vim82\autoload\sqlcomplete.vim	/^    let g:omni_syntax_group_include_sql = ''$/;"	v
g:omni_syntax_ignorecase	vim82\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_ignorecase = &ignorecase$/;"	v
g:omni_syntax_minimum_length	vim82\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_minimum_length = 0$/;"	v
g:omni_syntax_use_iskeyword	vim82\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_use_iskeyword = 1$/;"	v
g:omni_syntax_use_iskeyword_numeric	vim82\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_use_iskeyword_numeric = 1$/;"	v
g:omni_syntax_use_single_byte	vim82\autoload\syntaxcomplete.vim	/^    let g:omni_syntax_use_single_byte = 1$/;"	v
g:other_mf_macros	vim82\syntax\mp.vim	/^  let g:other_mf_macros = s:other_mf_macros$/;"	v
g:other_mf_macros	vim82\syntax\mp.vim	/^let g:other_mf_macros = 0 " cmbase.mf, logo.mf, ... neither$/;"	v
g:pandoc#syntax#codeblocks#embeds#langs	vim82\syntax\rmd.vim	/^let g:pandoc#syntax#codeblocks#embeds#langs = get(g:, 'pandoc#syntax#codeblocks#embeds#langs', ['r'])$/;"	v
g:php_sync_method	vim82\indent\php.vim	/^let g:php_sync_method = 0$/;"	v
g:phpcomplete_cache_taglists	vim82\autoload\phpcomplete.vim	/^	let g:phpcomplete_cache_taglists = 1$/;"	v
g:phpcomplete_complete_for_unknown_classes	vim82\autoload\phpcomplete.vim	/^	let g:phpcomplete_complete_for_unknown_classes = 0$/;"	v
g:phpcomplete_min_num_of_chars_for_namespace_completion	vim82\autoload\phpcomplete.vim	/^	let g:phpcomplete_min_num_of_chars_for_namespace_completion = 1$/;"	v
g:phpcomplete_parse_docblock_comments	vim82\autoload\phpcomplete.vim	/^	let g:phpcomplete_parse_docblock_comments = 0$/;"	v
g:phpcomplete_relax_static_constraint	vim82\autoload\phpcomplete.vim	/^	let g:phpcomplete_relax_static_constraint = 0$/;"	v
g:phpcomplete_search_tags_for_variables	vim82\autoload\phpcomplete.vim	/^	let g:phpcomplete_search_tags_for_variables = 0$/;"	v
g:plain_mf_macros	vim82\syntax\mp.vim	/^  let g:plain_mf_macros = s:plain_mf_macros$/;"	v
g:plain_mf_macros	vim82\syntax\mp.vim	/^let g:plain_mf_macros = 0 " plain.mf has no special meaning for MetaPost$/;"	v
g:plain_mf_modes	vim82\syntax\mp.vim	/^  let g:plain_mf_modes = s:plain_mf_modes$/;"	v
g:plain_mf_modes	vim82\syntax\mp.vim	/^let g:plain_mf_modes  = 0 " No METAFONT modes$/;"	v
g:pydoc_executable	vim82\ftplugin\python.vim	/^        let g:pydoc_executable = 0$/;"	v
g:pydoc_executable	vim82\ftplugin\python.vim	/^        let g:pydoc_executable = 1$/;"	v
g:r_indent_align_args	vim82\indent\r.vim	/^let g:r_indent_align_args     = get(g:, 'r_indent_align_args',      1)$/;"	v
g:r_indent_comment_column	vim82\indent\r.vim	/^let g:r_indent_comment_column = get(g:, 'r_indent_comment_column', 40)$/;"	v
g:r_indent_ess_comments	vim82\indent\r.vim	/^let g:r_indent_ess_comments   = get(g:, 'r_indent_ess_comments',    0)$/;"	v
g:r_indent_ess_compatible	vim82\indent\r.vim	/^let g:r_indent_ess_compatible = get(g:, 'r_indent_ess_compatible',  0)$/;"	v
g:r_indent_op_pattern	vim82\indent\r.vim	/^let g:r_indent_op_pattern     = get(g:, 'r_indent_op_pattern',$/;"	v
g:r_syntax_fun_pattern	vim82\syntax\r.vim	/^    let g:r_syntax_fun_pattern = 0$/;"	v
g:r_syntax_fun_pattern	vim82\syntax\r.vim	/^    let g:r_syntax_fun_pattern = 1$/;"	v
g:r_syntax_hl_roxygen	vim82\syntax\r.vim	/^  let g:r_syntax_hl_roxygen = g:r_hl_roxygen$/;"	v
g:r_syntax_hl_roxygen	vim82\syntax\r.vim	/^let g:r_syntax_hl_roxygen = get(g:, 'r_syntax_hl_roxygen', 1)$/;"	v
g:r_syntax_minlines	vim82\syntax\r.vim	/^  let g:r_syntax_minlines = g:r_syn_minlines$/;"	v
g:rmd_fenced_languages	vim82\syntax\rmd.vim	/^    let g:rmd_fenced_languages = deepcopy(g:markdown_fenced_languages)$/;"	v
g:rmd_fenced_languages	vim82\syntax\rmd.vim	/^  let g:rmd_fenced_languages = ['r']$/;"	v
g:rmd_syn_hl_chunk	vim82\syntax\rmd.vim	/^let g:rmd_syn_hl_chunk = get(g:, 'g:rmd_syn_hl_chunk', 0)$/;"	v
g:rmd_syn_hl_citations	vim82\syntax\rmd.vim	/^let g:rmd_syn_hl_citations = get(g:, 'rmd_syn_hl_citations', 1)$/;"	v
g:rmd_syn_hl_yaml	vim82\syntax\rmd.vim	/^let g:rmd_syn_hl_yaml = get(g:, 'rmd_syn_hl_yaml', 1)$/;"	v
g:rst_fold_enabled	vim82\ftplugin\rst.vim	/^  let g:rst_fold_enabled = 0$/;"	v
g:rst_syntax_code_list	vim82\syntax\rst.vim	/^        let g:rst_syntax_code_list[s:elem] = [s:elem]$/;"	v
g:rst_syntax_code_list	vim82\syntax\rst.vim	/^    let g:rst_syntax_code_list = {$/;"	v
g:rst_syntax_code_list	vim82\syntax\rst.vim	/^    let g:rst_syntax_code_list = {}$/;"	v
g:ruby_default_path	vim82\ftplugin\ruby.vim	/^      let g:ruby_default_path = map(split($RUBYLIB,':'), 'v:val ==# "." ? "" : v:val')$/;"	v
g:ruby_default_path	vim82\ftplugin\ruby.vim	/^      let g:ruby_default_path = s:query_path($HOME)$/;"	v
g:ruby_indent_access_modifier_style	vim82\indent\ruby.vim	/^  let g:ruby_indent_access_modifier_style = 'normal'$/;"	v
g:ruby_indent_assignment_style	vim82\indent\ruby.vim	/^  let g:ruby_indent_assignment_style = 'hanging'$/;"	v
g:ruby_indent_block_style	vim82\indent\ruby.vim	/^  let g:ruby_indent_block_style = 'expression'$/;"	v
g:ruby_version_paths	vim82\ftplugin\ruby.vim	/^      let g:ruby_version_paths[b:ruby_version] = s:query_path(fnamemodify(s:version_file, ':p:h'))$/;"	v
g:ruby_version_paths	vim82\ftplugin\ruby.vim	/^  let g:ruby_version_paths = {}$/;"	v
g:rubycomplete_buffer_loading	vim82\autoload\rubycomplete.vim	/^    let g:rubycomplete_buffer_loading = 0$/;"	v
g:rubycomplete_classes_in_global	vim82\autoload\rubycomplete.vim	/^    let g:rubycomplete_classes_in_global = 0$/;"	v
g:rubycomplete_include_object	vim82\autoload\rubycomplete.vim	/^    let g:rubycomplete_include_object = 0$/;"	v
g:rubycomplete_include_objectspace	vim82\autoload\rubycomplete.vim	/^    let g:rubycomplete_include_objectspace = 0$/;"	v
g:rubycomplete_rails	vim82\autoload\rubycomplete.vim	/^    let g:rubycomplete_rails = 0$/;"	v
g:rustfmt_autosave	vim82\autoload\rustfmt.vim	/^	let g:rustfmt_autosave = 0$/;"	v
g:rustfmt_command	vim82\autoload\rustfmt.vim	/^	let g:rustfmt_command = "rustfmt"$/;"	v
g:rustfmt_fail_silently	vim82\autoload\rustfmt.vim	/^	let g:rustfmt_fail_silently = 0$/;"	v
g:rustfmt_options	vim82\autoload\rustfmt.vim	/^	let g:rustfmt_options = ""$/;"	v
g:sh_fold_enabled	vim82\syntax\sh.vim	/^ let g:sh_fold_enabled= 0$/;"	v
g:spell_clean_limit	vim82\spell\cleanadd.vim	/^  let g:spell_clean_limit = 1$/;"	v
g:spellfile_URL	vim82\autoload\spellfile.vim	/^  let g:spellfile_URL = 'https:\/\/ftp.nluug.nl\/pub\/vim\/runtime\/spell'$/;"	v
g:tar_browseoptions	vim82\autoload\tar.vim	/^ let g:tar_browseoptions= "Ptf"$/;"	v
g:tar_cmd	vim82\autoload\tar.vim	/^ let g:tar_cmd= "tar"$/;"	v
g:tar_copycmd	vim82\autoload\tar.vim	/^ let g:tar_copycmd= g:netrw_localcopycmd$/;"	v
g:tar_delfile	vim82\autoload\tar.vim	/^ let g:tar_delfile="--delete -f"$/;"	v
g:tar_extractcmd	vim82\autoload\tar.vim	/^ let g:tar_extractcmd= "tar -xf"$/;"	v
g:tar_readoptions	vim82\autoload\tar.vim	/^ let g:tar_readoptions= "OPxf"$/;"	v
g:tar_shq	vim82\autoload\tar.vim	/^   let g:tar_shq= "'"$/;"	v
g:tar_shq	vim82\autoload\tar.vim	/^   let g:tar_shq= '"'$/;"	v
g:tar_shq	vim82\autoload\tar.vim	/^  let g:tar_shq= "'"$/;"	v
g:tar_shq	vim82\autoload\tar.vim	/^  let g:tar_shq= &shq$/;"	v
g:tar_writeoptions	vim82\autoload\tar.vim	/^ let g:tar_writeoptions= "uf"$/;"	v
g:termdebugger	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^  let g:termdebugger = 'gdb'$/;"	v
g:tex_indent_brace	vim82\indent\tex.vim	/^    let g:tex_indent_brace = 1$/;"	v
g:tex_indent_items	vim82\indent\tex.vim	/^    let g:tex_indent_items = 1$/;"	v
g:tex_itemize_env	vim82\indent\tex.vim	/^        let g:tex_itemize_env = 'itemize\\|description\\|enumerate\\|thebibliography'$/;"	v
g:tex_items	vim82\indent\tex.vim	/^        let g:tex_items = '\\\\bibitem\\|\\\\item'$/;"	v
g:tex_items	vim82\indent\tex.vim	/^    let g:tex_items = ''$/;"	v
g:tex_items	vim82\indent\tex.vim	/^let g:tex_items = '^\\s*' . substitute(g:tex_items, '^\\(\\^\\\\s\\*\\)*', '', '')$/;"	v
g:tex_max_scan_line	vim82\indent\tex.vim	/^    let g:tex_max_scan_line = 60$/;"	v
g:tex_noindent_env	vim82\indent\tex.vim	/^    let g:tex_noindent_env = 'document\\|verbatim\\|lstlisting'$/;"	v
g:tohtml#charset_to_encoding	vim82\autoload\tohtml.vim	/^let g:tohtml#charset_to_encoding = {$/;"	v
g:tohtml#encoding_to_charset	vim82\autoload\tohtml.vim	/^let g:tohtml#encoding_to_charset = {$/;"	v
g:unloaded_tohtml_plugin	vim82\syntax\2html.vim	/^	let g:unloaded_tohtml_plugin = "unknown"$/;"	v
g:unloaded_tohtml_plugin	vim82\syntax\2html.vim	/^	let g:unloaded_tohtml_plugin = substitute(s:lines[0], '.*loaded_2html_plugin = \\([''"]\\)\\(\\%(\\1\\@!.\\)\\+\\)\\1', '\\2', '')$/;"	v
g:unloaded_tohtml_plugin	vim82\syntax\2html.vim	/^      let g:unloaded_tohtml_plugin = "unknown"$/;"	v
g:vhdl_indent_genportmap	vim82\indent\vhdl.vim	/^  let g:vhdl_indent_genportmap = 1$/;"	v
g:vhdl_indent_rhsassign	vim82\indent\vhdl.vim	/^  let g:vhdl_indent_rhsassign = 1$/;"	v
g:vimball_mkdir	vim82\autoload\vimball.vim	/^   let g:vimball_mkdir= "makedir"$/;"	v
g:vimball_mkdir	vim82\autoload\vimball.vim	/^   let g:vimball_mkdir= "mkdir"$/;"	v
g:vimball_mkdir	vim82\autoload\vimball.vim	/^   let g:vimball_mkdir= g:netrw_local_mkdir$/;"	v
g:vimproc#dll_path	plugins\vimproc\autoload\vimproc.vim	/^let g:vimproc#dll_path =$/;"	v
g:vimproc#lexer#token_type	plugins\vimproc\autoload\vimproc\lexer.vim	/^let g:vimproc#lexer#token_type = {$/;"	v
g:vimproc_password_pattern	plugins\vimproc\autoload\vimproc.vim	/^let g:vimproc_password_pattern = g:vimproc#password_pattern$/;"	v
g:vimsyn_embed	vim82\syntax\vim.vim	/^ let g:vimsyn_embed= "lmpPr"$/;"	v
g:vimsyn_maxlines	vim82\syntax\vim.vim	/^ let g:vimsyn_maxlines= g:vim_maxlines$/;"	v
g:vimsyn_minlines	vim82\syntax\vim.vim	/^ let g:vimsyn_minlines= g:vim_minlines$/;"	v
g:vimsyn_noerror	vim82\syntax\vim.vim	/^ let g:vimsyn_noerror= g:vimsyntax_noerror$/;"	v
g:xmldata_html32	vim82\autoload\xml\html32.vim	/^let g:xmldata_html32 = {$/;"	v
g:xmldata_html401s	vim82\autoload\xml\html401s.vim	/^let g:xmldata_html401s = {$/;"	v
g:xmldata_html401t	vim82\autoload\xml\html401f.vim	/^let g:xmldata_html401t = {$/;"	v
g:xmldata_html401t	vim82\autoload\xml\html401t.vim	/^let g:xmldata_html401t = {$/;"	v
g:xmldata_html40s	vim82\autoload\xml\html40s.vim	/^let g:xmldata_html40s = {$/;"	v
g:xmldata_html40t	vim82\autoload\xml\html40f.vim	/^let g:xmldata_html40t = {$/;"	v
g:xmldata_html40t	vim82\autoload\xml\html40t.vim	/^let g:xmldata_html40t = {$/;"	v
g:xmldata_xhtml10f	vim82\autoload\xml\xhtml10f.vim	/^let g:xmldata_xhtml10f = {$/;"	v
g:xmldata_xhtml10s	vim82\autoload\xml\xhtml10s.vim	/^let g:xmldata_xhtml10s = {$/;"	v
g:xmldata_xhtml10t	vim82\autoload\xml\xhtml10t.vim	/^let g:xmldata_xhtml10t = {$/;"	v
g:xmldata_xhtml11	vim82\autoload\xml\xhtml11.vim	/^let g:xmldata_xhtml11 = {$/;"	v
g:xmldata_xsd	vim82\autoload\xml\xsd.vim	/^let g:xmldata_xsd = {$/;"	v
g:xmldata_xsl	vim82\autoload\xml\xsl.vim	/^let g:xmldata_xsl = {$/;"	v
g:zipPlugin_ext	vim82\plugin\zipPlugin.vim	/^ let g:zipPlugin_ext='*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'$/;"	v
g:zip_extractcmd	vim82\autoload\zip.vim	/^ let g:zip_extractcmd= g:zip_unzipcmd$/;"	v
g:zip_shq	vim82\autoload\zip.vim	/^  let g:zip_shq= "'"$/;"	v
g:zip_shq	vim82\autoload\zip.vim	/^  let g:zip_shq= &shq$/;"	v
g:zip_shq	vim82\autoload\zip.vim	/^  let g:zip_shq= '"'$/;"	v
g:zip_unzipcmd	vim82\autoload\zip.vim	/^ let g:zip_unzipcmd= "unzip"$/;"	v
g:zip_zipcmd	vim82\autoload\zip.vim	/^ let g:zip_zipcmd= "zip"$/;"	v
g<C-]>	vim82\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#Jump_Tag ('','stjump')<cr>$/;"	m
g<C-]>	vim82\ftplugin\ada.vim	/^	 nnoremap <unique> <buffer> g<C-]>   :call ada#List_Tag ()<cr>$/;"	m
g<LeftMouse>	<C-RightMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 g<LeftMouse>	<C-RightMouse>$/;"	m
g<RightMouse>	<C-LeftMouse>	vim82\pack\dist\opt\swapmouse\plugin\swapmouse.vim	/^noremap	 g<RightMouse>	<C-LeftMouse>$/;"	m
gHA	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gHA <C-\\><C-N>:call <SID>HzjaConvertVisual('han_ascii')<CR>$/;"	m
gHH	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gHH <C-\\><C-N>:call <SID>HzjaConvertVisual('han_ascii')<CR>$/;"	m
gHJ	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gHJ <C-\\><C-N>:call <SID>HzjaConvertVisual('han_kana')<CR>$/;"	m
gHL	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gHL <C-\\><C-N>:call <SID>HzjaConvertVisual('han_all')<CR>$/;"	m
gHM	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gHM <C-\\><C-N>:call <SID>HzjaConvertVisual('han_kigou')<CR>$/;"	m
gHW	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gHW <C-\\><C-N>:call <SID>HzjaConvertVisual('han_eisu')<CR>$/;"	m
gZA	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gZA <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_ascii')<CR>$/;"	m
gZJ	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gZJ <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_kana')<CR>$/;"	m
gZL	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gZL <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_all')<CR>$/;"	m
gZM	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gZM <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_kigou')<CR>$/;"	m
gZW	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gZW <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_eisu')<CR>$/;"	m
gZZ	plugins\kaoriya\plugin\hz_ja.vim	/^vnoremap <silent> gZZ <C-\\><C-N>:call <SID>HzjaConvertVisual('zen_kana')<CR>$/;"	m
garbage_collect	plugins\vimproc\autoload\vimproc.vim	/^function! s:garbage_collect(is_force) abort "{{{$/;"	f
gdb_minlines	vim82\syntax\gdb.vim	/^  let gdb_minlines = 10$/;"	v
gdzie	vim82\tutor\tutor.pl	/^  gdzie:$/;"	l
gecos_name	vim82\ftplugin\changelog.vim	/^  function! s:gecos_name(login)$/;"	f
genFunctions	vim82\syntax\neomuttrc.vim	/^function! s:genFunctions(functions)$/;"	f
generate_suffix_groups	vim82\syntax\hostconf.vim	/^function s:generate_suffix_groups(list_of_order_of_orders, context, trailing_context)$/;"	f
get 	lua\jit\zone.lua	/^  get = function(t)$/;"	f
getAuthor	vim82\ftplugin\debchangelog.vim	/^function! s:getAuthor(zonestart, zoneend)$/;"	f
getField	vim82\ftplugin\debcontrol.vim	/^function! s:getField(f, lnum)$/;"	f
getNextCharWithPos	vim82\autoload\phpcomplete.vim	/^function! s:getNextCharWithPos(filelines, current_pos) " {{{$/;"	f
get_256color	vim82\syntax\dircolors.vim	/^function! s:get_256color(colors) abort$/;"	f
get_be	lua\jit\dis_mips.lua	/^local function get_be(ctx)$/;"	f
get_current_origin_url	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:get_current_origin_url(bundle) abort$/;"	f
get_current_sha	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:get_current_sha(bundle)$/;"	f
get_hi_str	vim82\syntax\dircolors.vim	/^function! s:get_hi_str(color, place) abort$/;"	f
get_le	lua\jit\dis_mips.lua	/^local function get_le(ctx)$/;"	f
get_line_trimmed	vim82\indent\rust.vim	/^function! s:get_line_trimmed(lnum)$/;"	f
get_paragraph_start	vim82\indent\rst.vim	/^function! s:get_paragraph_start()$/;"	f
get_tag	vim82\indent\html.vim	/^func! s:get_tag(tagname)$/;"	f
get_winwidth	plugins\vimproc\autoload\vimproc.vim	/^function! s:get_winwidth() abort$/;"	f
getimm	lua\jit\dis_x86.lua	/^local function getimm(ctx, pos, n)$/;"	f
getmrm	lua\jit\dis_x86.lua	/^local function getmrm(ctx)$/;"	f
getscript#GetLatestVimScripts	vim82\autoload\getscript.vim	/^fun! getscript#GetLatestVimScripts()$/;"	f
gitdiffcached	vim82\ftplugin\gitcommit.vim	/^function! s:gitdiffcached(bang,gitdir,...)$/;"	f
gnat#Find	vim82\autoload\gnat.vim	/^function gnat#Find () dict					     " {{{1$/;"	f
gnat#Get_Command	vim82\autoload\gnat.vim	/^function gnat#Get_Command (Command) dict			     " {{{1$/;"	f
gnat#Insert_Tags_Header	vim82\autoload\gnat.vim	/^function gnat#Insert_Tags_Header ()				  " {{{1$/;"	f
gnat#Make	vim82\autoload\gnat.vim	/^function gnat#Make () dict					     " {{{1$/;"	f
gnat#New	vim82\autoload\gnat.vim	/^function gnat#New ()						     " {{{1$/;"	f
gnat#Pretty	vim82\autoload\gnat.vim	/^function gnat#Pretty () dict					     " {{{1$/;"	f
gnat#Set_Project_File	vim82\autoload\gnat.vim	/^function gnat#Set_Project_File (...) dict			     " {{{1$/;"	f
gnat#Set_Session	vim82\autoload\gnat.vim	/^function gnat#Set_Session (...) dict				     " {{{1$/;"	f
gnat#Tags	vim82\autoload\gnat.vim	/^function gnat#Tags () dict					     " {{{1$/;"	f
go#complete#Package	plugins\golang\autoload\go\complete.vim	/^function! go#complete#Package(ArgLead, CmdLine, CursorPos)$/;"	f
go#complete#PackageMembers	plugins\golang\autoload\go\complete.vim	/^function! go#complete#PackageMembers(package, member)$/;"	f
go#env#cache_clear	plugins\golang\autoload\go\env.vim	/^function! go#env#cache_clear(key)$/;"	f
go#env#root	plugins\golang\autoload\go\env.vim	/^function! go#env#root()$/;"	f
got_x_error	vim82\tools\xcmdsrv_client.c	/^static int	got_x_error = FALSE;$/;"	v	file:
groovy_minlines	vim82\syntax\groovy.vim	/^  let groovy_minlines = 10$/;"	v
gx	vim82\plugin\netrwPlugin.vim	/^   nmap <unique> gx <Plug>NetrwBrowseX$/;"	m
gx	vim82\plugin\netrwPlugin.vim	/^   vmap <unique> gx <Plug>NetrwBrowseXVis$/;"	m
gzip	vim82\plugin\gzip.vim	/^augroup gzip$/;"	a
gzip#appre	vim82\autoload\gzip.vim	/^fun gzip#appre(cmd)$/;"	f
gzip#read	vim82\autoload\gzip.vim	/^fun gzip#read(cmd)$/;"	f
gzip#write	vim82\autoload\gzip.vim	/^fun gzip#write(cmd)$/;"	f
h	vim82\macros\less.vim	/^noremap h :call <SID>Help()<CR>$/;"	m
h	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap h d$/;"	m
h_list	lua\jit\bc.lua	/^local function h_list(func)$/;"	f
handle	vim82\tools\demoserver.py	/^    def handle(self):$/;"	m	class:ThreadedTCPRequestHandler
has_doc	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:has_doc(rtp) abort$/;"	f
has_webapi	vim82\autoload\rust.vim	/^function! s:has_webapi()$/;"	f
haskellcomplete#Complete	vim82\autoload\haskellcomplete.vim	/^function! haskellcomplete#Complete(findstart, base)$/;"	f
hd2list	plugins\vimproc\autoload\vimproc.vim	/^function! s:hd2list(hd) abort$/;"	f
hd2str	plugins\vimproc\autoload\vimproc.vim	/^function! s:hd2str(hd) abort$/;"	f
hd2str_lua	plugins\vimproc\autoload\vimproc.vim	/^function! s:hd2str_lua(hd) abort$/;"	f
helptags	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:helptags(rtp) abort$/;"	f
highlight_types	vim82\syntax\spup.vim	/^    let highlight_types = 1$/;"	v
hog_minlines	vim82\syntax\hog.vim	/^    let hog_minlines = 100$/;"	v
hostname	vim82\ftplugin\changelog.vim	/^  function! s:hostname()$/;"	f
html_no_rendering	vim82\syntax\spyce.vim	/^let html_no_rendering = 1    " do not render <b>,<i>, etc...$/;"	v
htmlcomplete#CheckDoctype	vim82\autoload\htmlcomplete.vim	/^function! htmlcomplete#CheckDoctype() " {{{$/;"	f
htmlcomplete#CompleteTags	vim82\autoload\htmlcomplete.vim	/^function! htmlcomplete#CompleteTags(findstart, base)$/;"	f
htmlcomplete#DetectOmniFlavor	vim82\autoload\htmlcomplete.vim	/^function! htmlcomplete#DetectOmniFlavor()$/;"	f
htmlcomplete#LoadData	vim82\autoload\htmlcomplete.vim	/^function! htmlcomplete#LoadData() " {{{$/;"	f
http	vim82\tutor\tutor.pl	/^	http:\/\/helion.pl\/ksiazki\/viedyt.htm$/;"	l
http	vim82\tutor\tutor.pl	/^	http:\/\/helion.pl\/ksiazki\/vilek.htm$/;"	l
hw_subversion	vim82\syntax\hollywood.vim	/^  let hw_subversion = 0$/;"	v
hw_version	vim82\syntax\hollywood.vim	/^  let hw_version = 8$/;"	v
i	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap i c$/;"	m
i	vim82\syntax\xpm.vim	/^   let i = i + 1$/;"	v
i	vim82\syntax\xpm.vim	/^let i      = 1$/;"	v
i	vim82\syntax\xpm2.vim	/^    let i = i + 1$/;"	v
i	vim82\syntax\xpm2.vim	/^  let i      = 1$/;"	v
i$	vim82\ftplugin\context.vim	/^  onoremap <silent><buffer> i$ :<c-u>normal! T$vt$<cr>$/;"	m
i$	vim82\ftplugin\context.vim	/^  vnoremap <buffer> i$ T$ot\$$/;"	m
iM	vim82\ftplugin\ruby.vim	/^    onoremap <silent> <buffer> iM :<C-U>call <SID>wrap_i('[[','][')<CR>$/;"	m
icon_minlines	vim82\syntax\icon.vim	/^  let icon_minlines = 15$/;"	v
if type(info) 	lua\jit\dump.lua	/^    if type(info) == "function" then info = fmtfunc(info) end$/;"	f
if type(info) 	lua\jit\v.lua	/^    if type(info) == "function" then info = fmtfunc(info) end$/;"	f
if type(input) 	lua\jit\bcsave.lua	/^  if type(input) == "function" then return input end$/;"	f
if_already	vim82\doc\makehtml.awk	/^function if_already() {$/;"	f
ignored_region	vim82\indent\clojure.vim	/^	function! s:ignored_region()$/;"	f
im	vim82\ftplugin\ruby.vim	/^    onoremap <silent> <buffer> im :<C-U>call <SID>wrap_i('[m',']M')<CR>$/;"	m
in_time	vim82\indent\testdir\runtest.vim	/^  let in_time = getftime(fname)$/;"	v
incomplete	lua\jit\dis_x86.lua	/^local function incomplete(ctx)$/;"	f
increase	vim82\ftplugin\cobol.vim	/^function! s:increase(...)$/;"	f
indent_at	vim82\indent\testdir\runtest.vim	/^	  let indent_at = search('\\<INDENT_\\(AT\\|NEXT\\|PREV\\)\\>')$/;"	v
indent_to_innermost_parentheses	vim82\indent\dtd.vim	/^function s:indent_to_innermost_parentheses(line, end)$/;"	f
indent_value	vim82\indent\sh.vim	/^function! s:indent_value(option)$/;"	f
init	plugins\~\.vim\bundle\Vundle.vim\test\files\test.erl	/^init(_) ->$/;"	f	module:mmc_logmon_sup
install_extras	plugins\golang\plugin\go\extra.vim	/^function! s:install_extras()$/;"	f
is_absolute	plugins\vimproc\autoload\vimproc\filepath.vim	/^  function! s:is_absolute(path) abort$/;"	f
is_array	vim82\indent\sh.vim	/^function! s:is_array(line)$/;"	f
is_bash	vim82\indent\sh.vim	/^function! s:is_bash()$/;"	f
is_bash	vim82\syntax\initng.vim	/^let is_bash = 1$/;"	v
is_bash	vim82\syntax\upstart.vim	/^let is_bash = 1$/;"	v
is_case	vim82\indent\sh.vim	/^function! s:is_case(line)$/;"	f
is_case_break	vim82\indent\sh.vim	/^function! s:is_case_break(line)$/;"	f
is_case_empty	vim82\indent\sh.vim	/^function! s:is_case_empty(line)$/;"	f
is_case_ended	vim82\indent\sh.vim	/^function! s:is_case_ended(line)$/;"	f
is_case_label	vim82\indent\sh.vim	/^function! s:is_case_label(line, pnum)$/;"	f
is_case_tolerant	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:is_case_tolerant() abort$/;"	f
is_comment	vim82\indent\sh.vim	/^function! s:is_comment(line)$/;"	f
is_continuation_line	vim82\indent\sh.vim	/^function! s:is_continuation_line(line)$/;"	f
is_empty	vim82\indent\sh.vim	/^function! s:is_empty(line)$/;"	f
is_end_expression	vim82\indent\sh.vim	/^function! s:is_end_expression(line)$/;"	f
is_function_definition	vim82\indent\sh.vim	/^function! s:is_function_definition(line)$/;"	f
is_here_doc	vim82\indent\sh.vim	/^function! s:is_here_doc(line)$/;"	f
is_method_special_case	vim82\indent\clojure.vim	/^	function! s:is_method_special_case(position)$/;"	f
is_null_device	plugins\vimproc\autoload\vimproc.vim	/^function! s:is_null_device(filename) abort$/;"	f
is_paren	vim82\indent\clojure.vim	/^	function! s:is_paren()$/;"	f
is_pseudo_device	plugins\vimproc\autoload\vimproc.vim	/^function! s:is_pseudo_device(filename) abort "{{{$/;"	f
is_reader_conditional_special_case	vim82\indent\clojure.vim	/^	function! s:is_reader_conditional_special_case(position)$/;"	f
is_string_comment	vim82\indent\rust.vim	/^function! s:is_string_comment(lnum, col)$/;"	f
j	vim82\ftplugin\flexwiki.vim	/^  nmap <buffer> j      gj$/;"	m
j	vim82\ftplugin\flexwiki.vim	/^  vmap <buffer> j      gj$/;"	m
j	vim82\macros\less.vim	/^map j <CR>$/;"	m
j	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap j h$/;"	m
java_highlight_all	vim82\syntax\java.vim	/^  let java_highlight_all=1$/;"	v
java_minlines	vim82\syntax\java.vim	/^  let java_minlines = 10$/;"	v
javascriptcomplete#CompleteJS	vim82\autoload\javascriptcomplete.vim	/^function! javascriptcomplete#CompleteJS(findstart, base)$/;"	f
join	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:join(...) abort$/;"	f
jproperties_lines	vim82\syntax\jproperties.vim	/^	let jproperties_lines = 256$/;"	v
jproperties_show_messages	vim82\syntax\jproperties.vim	/^	let jproperties_show_messages = 0$/;"	v
jproperties_strict_syntax	vim82\syntax\jproperties.vim	/^	let jproperties_strict_syntax = 0$/;"	v
json	vim82\tools\demoserver.py	/^import json$/;"	i
jump	vim82\ftplugin\cucumber.vim	/^function! s:jump(command,count)$/;"	f
k	vim82\ftplugin\flexwiki.vim	/^  nmap <buffer> k      gk$/;"	m
k	vim82\ftplugin\flexwiki.vim	/^  vmap <buffer> k      gk$/;"	m
k	vim82\macros\less.vim	/^noremap <script> k <C-Y><SID>L$/;"	m
k	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap k t$/;"	m
kaoriya#switch#enabled	plugins\kaoriya\autoload\kaoriya\switch.vim	/^function! kaoriya#switch#enabled(name)$/;"	f
key_stack 	lua\jit\p.lua	/^    key_stack = key_stack:gsub("%[builtin#(%d+)%]", function(x)$/;"	f
l	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap l n$/;"	m
lang	vim82\spell\check_locales.vim	/^  let lang = substitute(item.text, '.*LANG=\\(\\S\\+\\).*', '\\1', '')$/;"	v
langonly	vim82\menu.vim	/^	let langonly = substitute(s:lang, '_.*', "", "")$/;"	v
leveladjust	vim82\syntax\2html.vim	/^	    let leveladjust += 1$/;"	v
leveladjust	vim82\syntax\2html.vim	/^    let leveladjust -= 1$/;"	v
leveladjust	vim82\syntax\2html.vim	/^  let leveladjust = 0$/;"	v
lex	vim82\indent\dtd.vim	/^function s:lex(input, start, ...)$/;"	f
lex1	vim82\indent\dtd.vim	/^function s:lex1(input, start, ...)$/;"	f
lexer.advance	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! s:lexer.advance() abort$/;"	f
lexer.lex_digit	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! s:lexer.lex_digit() abort$/;"	f
lexer.skip_spaces	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! s:lexer.skip_spaces() abort$/;"	f
lexer.token	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! s:lexer.token() abort$/;"	f
lexer.value	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! s:lexer.value() abort$/;"	f
lib.check_boundary	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.check_boundary(lst, i)$/;"	f
lib.check_boundary	plugins\autofmt\autoload\autofmt\japanese.vim	/^function! s:lib.check_boundary(lst, i)$/;"	f
lib.check_boundary	plugins\autofmt\autoload\autofmt\uax14.vim	/^function! s:lib.check_boundary(lst, i)$/;"	f
lib.comp_indent	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.comp_indent(lnum)$/;"	f
lib.comp_textwidth	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.comp_textwidth(ff)$/;"	f
lib.copy_indent	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.copy_indent(line1, line2)$/;"	f
lib.find_boundary	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.find_boundary(line)$/;"	f
lib.find_three_piece_comments	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.find_three_piece_comments(comments, flags, str)$/;"	f
lib.format_insert_mode	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.format_insert_mode(char)$/;"	f
lib.format_lines	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.format_lines(lnum, count)$/;"	f
lib.format_normal_mode	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.format_normal_mode(lnum, count)$/;"	f
lib.formatexpr	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.formatexpr()$/;"	f
lib.get_opt	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.get_opt(name)$/;"	f
lib.get_paragraph	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.get_paragraph(lines)$/;"	f
lib.get_paragraph	plugins\autofmt\autoload\autofmt\japanese.vim	/^function! s:lib.get_paragraph(lines)$/;"	f
lib.get_second_line_leader	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.get_second_line_leader(lines)$/;"	f
lib.has_format_options	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.has_format_options(x)$/;"	f
lib.has_sign	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.has_sign()$/;"	f
lib.is_cmdwin	plugins\autofmt\autoload\autofmt\compat.vim	/^  function s:lib.is_cmdwin()$/;"	f
lib.is_comment	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.is_comment(line)$/;"	f
lib.is_comment_enabled	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.is_comment_enabled()$/;"	f
lib.join_line	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.join_line(line1, line2)$/;"	f
lib.join_line	plugins\autofmt\autoload\autofmt\japanese.vim	/^function! s:lib.join_line(line1, line2)$/;"	f
lib.join_lines	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.join_lines(lines)$/;"	f
lib.line2list	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.line2list(line)$/;"	f
lib.list2line	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.list2line(lst)$/;"	f
lib.make_comment_leader	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.make_comment_leader(line)$/;"	f
lib.make_leader	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.make_leader(lnum, no_leader)$/;"	f
lib.parse_leader	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.parse_leader(line)$/;"	f
lib.parse_opt_comments	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.parse_opt_comments(comments)$/;"	f
lib.prop_bsearch	plugins\autofmt\autoload\autofmt\unicode.vim	/^function s:lib.prop_bsearch(ucs4, table)$/;"	f
lib.prop_line_break	plugins\autofmt\autoload\autofmt\unicode.vim	/^function s:lib.prop_line_break(char)$/;"	f
lib.prop_search	plugins\autofmt\autoload\autofmt\unicode.vim	/^function s:lib.prop_search(ucs4, default, table, cache)$/;"	f
lib.retab	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.retab(line, ...)$/;"	f
lib.skip_leader	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.skip_leader(line)$/;"	f
lib.skip_space	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.skip_space(lst, i)$/;"	f
lib.skip_word	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.skip_word(lst, i)$/;"	f
lib.smartindent	plugins\autofmt\autoload\autofmt\compat.vim	/^function s:lib.smartindent(lnum)$/;"	f
lib.to_ucs4	plugins\autofmt\autoload\autofmt\unicode.vim	/^function s:lib.to_ucs4(c)$/;"	f
lib.uax14_pair_table	plugins\autofmt\autoload\autofmt\unicode.vim	/^function s:lib.uax14_pair_table(before, after)$/;"	f
libcall	plugins\vimproc\autoload\vimproc.vim	/^function! s:libcall(func, args) abort "{{{$/;"	f
libcall_raw_read	plugins\vimproc\autoload\vimproc.vim	/^function! s:libcall_raw_read(func, args) abort "{{{$/;"	f
libcall_raw_write	plugins\vimproc\autoload\vimproc.vim	/^function! s:libcall_raw_write(func, args) abort "{{{$/;"	f
line	vim82\macros\maze\mazeclean.c	/^char *M, A, Z, E = 40, line[80], T[3];$/;"	v
list2hd	plugins\vimproc\autoload\vimproc.vim	/^function! s:list2hd(lis) abort$/;"	f
list2str	plugins\vimproc\autoload\vimproc.vim	/^function! s:list2str(lis) abort$/;"	f
lnum	vim82\ftplugin\ocaml.vim	/^let lnum = search('^\\s*(\\*:o\\?caml:', 'n')$/;"	v
lnum	vim82\indent\testdir\runtest.vim	/^	    let lnum = indent_at$/;"	v
lnum	vim82\indent\testdir\runtest.vim	/^	    let lnum = lnum_exe$/;"	v
lnum	vim82\indent\testdir\runtest.vim	/^	  let lnum = search(pattern)$/;"	v
lnum	vim82\indent\testdir\runtest.vim	/^	let lnum = start$/;"	v
lnum	vim82\spell\fixdup.vim	/^  let lnum += 1$/;"	v
lnum	vim82\spell\fixdup.vim	/^let lnum = 2$/;"	v
lnum_exe	vim82\indent\testdir\runtest.vim	/^	  let lnum_exe = search('\\<INDENT_EXE\\>')$/;"	v
load_scripts	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! s:load_scripts(bang)$/;"	f
loaded_cfilter	vim82\pack\dist\opt\cfilter\plugin\cfilter.vim	/^let loaded_cfilter = 1$/;"	v
loaded_gzip	vim82\plugin\gzip.vim	/^let loaded_gzip = 1$/;"	v
loaded_less	vim82\macros\less.vim	/^let loaded_less = 1$/;"	v
loaded_rrhelper	vim82\plugin\rrhelper.vim	/^let loaded_rrhelper = 1$/;"	v
loaded_spellfile_plugin	vim82\plugin\spellfile.vim	/^let loaded_spellfile_plugin = 1$/;"	v
log	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:log(str, ...) abort$/;"	f
login	vim82\ftplugin\changelog.vim	/^  function! s:login()$/;"	f
lua_subversion	vim82\syntax\lua.vim	/^  let lua_subversion = 0$/;"	v
lua_subversion	vim82\syntax\lua.vim	/^  let lua_subversion = 2$/;"	v
lua_version	vim82\syntax\lua.vim	/^  let lua_version = 5$/;"	v
m	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap m m$/;"	m
main	plugins\autofmt\tools\unicode.vim	/^function! s:main()$/;"	f
main	vim82\doc\doctags.c	/^main(int argc, char **argv)$/;"	f
main	vim82\macros\maze\maze.c	/^char*M,A,Z,E=40,J[40],T[40];main(C){for(*J=A=scanf(M="%d",&C);$/;"	f
main	vim82\macros\maze\mazeansi.c	/^char*M,A,Z,E=40,J[80],T[3];main(C){for(M=J+E,*J=A=scanf("%d",&$/;"	f
main	vim82\macros\maze\mazeclean.c	/^main (C)$/;"	f
main	vim82\tools\blink.c	/^main(void)$/;"	f
main	vim82\tools\ccfilter.c	/^int main( int argc, char *argv[] )$/;"	f
main	vim82\tools\xcmdsrv_client.c	/^main(int argc, char **argv)$/;"	f
main_syntax	vim82\syntax\aptconf.vim	/^  let main_syntax = 'aptconf'$/;"	v
main_syntax	vim82\syntax\aspperl.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	vim82\syntax\aspvbs.vim	/^  let main_syntax = 'aspvbs'$/;"	v
main_syntax	vim82\syntax\css.vim	/^  let main_syntax = 'css'$/;"	v
main_syntax	vim82\syntax\eruby.vim	/^  let main_syntax = 'eruby'$/;"	v
main_syntax	vim82\syntax\fvwm2m4.vim	/^  let main_syntax = 'fvwm2m4'$/;"	v
main_syntax	vim82\syntax\groovy.vim	/^  let main_syntax='groovy'$/;"	v
main_syntax	vim82\syntax\gsp.vim	/^  let main_syntax = 'gsp'$/;"	v
main_syntax	vim82\syntax\haml.vim	/^  let main_syntax = 'haml'$/;"	v
main_syntax	vim82\syntax\html.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	vim82\syntax\htmlcheetah.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	vim82\syntax\htmldjango.vim	/^  let main_syntax = 'html'$/;"	v
main_syntax	vim82\syntax\htmlm4.vim	/^  let main_syntax='htmlm4'$/;"	v
main_syntax	vim82\syntax\htmlos.vim	/^  let main_syntax = 'htmlos'$/;"	v
main_syntax	vim82\syntax\java.vim	/^  let main_syntax='java'$/;"	v
main_syntax	vim82\syntax\javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
main_syntax	vim82\syntax\json.vim	/^  let main_syntax = 'json'$/;"	v
main_syntax	vim82\syntax\jsp.vim	/^  let main_syntax = 'jsp'$/;"	v
main_syntax	vim82\syntax\liquid.vim	/^  let main_syntax = 'liquid'$/;"	v
main_syntax	vim82\syntax\lite.vim	/^  let main_syntax = 'lite'$/;"	v
main_syntax	vim82\syntax\m4.vim	/^  let main_syntax='m4'$/;"	v
main_syntax	vim82\syntax\markdown.vim	/^  let main_syntax = 'markdown'$/;"	v
main_syntax	vim82\syntax\mason.vim	/^	let main_syntax = 'mason'$/;"	v
main_syntax	vim82\syntax\msql.vim	/^  let main_syntax = 'msql'$/;"	v
main_syntax	vim82\syntax\ora.vim	/^  let main_syntax = 'ora'$/;"	v
main_syntax	vim82\syntax\pdf.vim	/^    let main_syntax = 'pdf'$/;"	v
main_syntax	vim82\syntax\php.vim	/^  let main_syntax = 'php'$/;"	v
main_syntax	vim82\syntax\plp.vim	/^  let main_syntax = 'perlscript'$/;"	v
main_syntax	vim82\syntax\scala.vim	/^  let main_syntax = 'scala'$/;"	v
main_syntax	vim82\syntax\smarty.vim	/^  let main_syntax = 'smarty'$/;"	v
main_syntax	vim82\syntax\smil.vim	/^  let main_syntax = 'smil'$/;"	v
main_syntax	vim82\syntax\spyce.vim	/^  let main_syntax='spyce'$/;"	v
main_syntax	vim82\syntax\texinfo.vim	/^  let main_syntax = 'texinfo'$/;"	v
main_syntax	vim82\syntax\tf.vim	/^  let main_syntax = 'tf'$/;"	v
main_syntax	vim82\syntax\tpp.vim	/^  let main_syntax = 'tpp'$/;"	v
main_syntax	vim82\syntax\typescript.vim	/^  let main_syntax = 'typescript'$/;"	v
main_syntax	vim82\syntax\typescriptreact.vim	/^  let main_syntax = 'typescriptreact'$/;"	v
main_syntax	vim82\syntax\uc.vim	/^  let main_syntax='uc'$/;"	v
main_syntax	vim82\syntax\webmacro.vim	/^  let main_syntax = 'webmacro'$/;"	v
main_syntax	vim82\syntax\wml.vim	/^  let main_syntax = 'wml'$/;"	v
make_sync_command	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:make_sync_command(bang, bundle) abort$/;"	f
map	vim82\ftplugin\ruby.vim	/^function! s:map(mode, flags, map) abort$/;"	f
maplink	vim82\doc\vim2html.pl	/^sub maplink$/;"	s
maprs_popS	lua\jit\dis_mips.lua	/^local function maprs_popS(rs, rt)$/;"	f
maprs_popST	lua\jit\dis_mips.lua	/^local function maprs_popST(rs, rt)$/;"	f
maprs_popTS	lua\jit\dis_mips.lua	/^local function maprs_popTS(rs, rt)$/;"	f
match_one	vim82\indent\clojure.vim	/^	function! s:match_one(patterns, string)$/;"	f
match_pairs	vim82\indent\clojure.vim	/^	function! s:match_pairs(open, close, stopat)$/;"	f
match_reg	lua\jit\dis_arm64.lua	/^local function match_reg(p, pat, regnum)$/;"	f
matchit#Match_debug	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! matchit#Match_debug()$/;"	f
matchit#Match_wrapper	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^function matchit#Match_wrapper(word, forward, mode) range$/;"	f
matchit#MultiMatch	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^fun! matchit#MultiMatch(spflag, mode)$/;"	f
matchparen	vim82\plugin\matchparen.vim	/^augroup matchparen$/;"	a
mel_minlines	vim82\syntax\mel.vim	/^  let mel_minlines=15$/;"	v
menutrans_help_dialog	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let menutrans_help_dialog = "Õrd be a kÌv·nt szÛt vagy parancsot:\\n\\n A szˆvegbeviteli parancsok elÈ Ìrj i_-t (pl.: i_CTRL-X)\\nA sorszerkeszı parancsok elÈ c_-t (pl.: c_<Del>)\\nA v·ltozÛkat a ' jellel vedd kˆr¸l (pl.: 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_hu_hu.utf-8.vim	/^let menutrans_help_dialog = "√çrd be a k√≠v√°nt sz√≥t vagy parancsot:\\n\\n A sz√∂vegbeviteli parancsok el√© √≠rj i_-t (pl.: i_CTRL-X)\\nA sorszerkesz≈ë parancsok el√© c_-t (pl.: c_<Del>)\\nA v√°ltoz√≥kat a ' jellel vedd k√∂r√ºl (pl.: 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_nl_nl.latin1.vim	/^let menutrans_help_dialog = "Typ een commando of woord om help voor te vinden:\\n\\nVoeg i_ in voor Input mode commandos (bijv. i_CTRL-X)\\nVoeg c_ in voor een commando-regel edit commando (bijv. c_<Del>)\\nVoeg ' in \\voor een optie naam (bijv. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let menutrans_help_dialog = "Wprowadº komendÍ lub s≥owo, aby otrzymaÊ pomoc o:\\n\\nPrzedrostek i_ oznacza komendÍ trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendÍ edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwÍ opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_pl_pl.utf-8.vim	/^let menutrans_help_dialog = "Wprowad≈∫ komendƒô lub s≈Çowo, aby otrzymaƒá pomoc o:\\n\\nPrzedrostek i_ oznacza komendƒô trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendƒô edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwƒô opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_polish_poland.1250.vim	/^let menutrans_help_dialog = "Wprowadü komendÍ lub s≥owo, aby otrzymaÊ pomoc o:\\n\\nPrzedrostek i_ oznacza komendÍ trybu Wprowadzania (np. i_CTRL-X)\\nPrzedrostek c_ oznacza komendÍ edycji wiersza komend (np. c_<Del>)\\nPrzedrostek ' oznacza nazwÍ opcji (np. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_sr_rs.ascii.vim	/^let menutrans_help_dialog = "Unesite naredbu ili rec cije pojasnjenje trazite:\\n\\nDodajte i_ za naredbe unosa (npr. i_CTRL-X)\\nDodajte c_ za naredbe komandnog rezima (npr. s_<Del>)\\nDodajte ' za imena opcija (npr. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let menutrans_help_dialog = "Unesite naredbu ili reË Ëije pojaπnjenje traæite:\\n\\nDodajte i_ za naredbe unosa (npr. i_CTRL-X)\\nDodajte c_ za naredbe komandnog reæima (npr. s_<Del>)\\nDodajte ' za imena opcija (npr. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let menutrans_help_dialog = "√›’·ÿ‚’ ›–‡’‘—„ ÿ€ÿ ‡’Á Áÿ¯’ ﬂﬁ¯–Ë˙’˙’ ‚‡–÷ÿ‚’:\\n\\n¥ﬁ‘–¯‚’ i_ ◊– ›–‡’‘—’ „›ﬁ·– (›ﬂ‡. i_CTRL-X)\\n¥ﬁ‘–¯‚’ c_ ◊– ›–‡’‘—’ ⁄ﬁ‹–›‘›ﬁ” ‡’÷ÿ‹– (›ﬂ‡. ·_<Del>)\\n¥ﬁ‘–¯‚’ ' ◊– ÿ‹’›– ﬁﬂÊÿ¯– (›ﬂ‡. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_sr_rs.utf-8.vim	/^let menutrans_help_dialog = "–£–Ω–µ—Å–∏—Ç–µ –Ω–∞—Ä–µ–¥–±—É –∏–ª–∏ —Ä–µ—á —á–∏—ò–µ –ø–æ—ò–∞—à—ö–µ—ö–µ —Ç—Ä–∞–∂–∏—Ç–µ:\\n\\n–î–æ–¥–∞—ò—Ç–µ i_ –∑–∞ –Ω–∞—Ä–µ–¥–±–µ —É–Ω–æ—Å–∞ (–Ω–ø—Ä. i_CTRL-X)\\n–î–æ–¥–∞—ò—Ç–µ c_ –∑–∞ –Ω–∞—Ä–µ–¥–±–µ –∫–æ–º–∞–Ω–¥–Ω–æ–≥ —Ä–µ–∂–∏–º–∞ (–Ω–ø—Ä. —Å_<Del>)\\n–î–æ–¥–∞—ò—Ç–µ ' –∑–∞ –∏–º–µ–Ω–∞ –æ–ø—Ü–∏—ò–∞ (–Ω–ø—Ä. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_sv_se.latin1.vim	/^let menutrans_help_dialog = "Skriv in ett kommando eller ord som du vill sˆka hj‰lp pÂ:\\n\\nBˆrja med i_ fˆr infogningl‰geskommandon (t.ex. i_CTRL-X)\\nBˆrja med c_ fˆr kommandoradredigeringskommandon (t.ex. c_<Del>)\\nBˆrja med ' fˆr ett inst‰llningsnamn (t.ex. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_uk_ua.cp1251.vim	/^let menutrans_help_dialog = "¬Í‡Ê≥Ú¸ ÍÓÏ‡Ì‰Û ‡·Ó ÒÎÓ‚Ó ‰Îˇ ÔÓ¯ÛÍÛ:\\n\\nƒÓ‰‡ÈÚÂ i_ ‰Îˇ ÍÓÏ‡Ì‰ ÂÊËÏÛ ‚ÒÚ‡‚ÍË (Ì‡Ô. i_CTRL-X)\\nƒÓ‰‡ÈÚÂ i_ ‰Îˇ ÍÓÏ‡Ì‰ÌÓ„Ó ÂÊËÏÛ (Ì‡Ô. Ò_<Del>)\\nƒÓ‰‡ÈÚÂ ' ‰Îˇ ÔÓÁÌ‡˜ÂÌÌˇ Ì‡Á‚Ë ÓÔˆ≥ø (Ì‡Ô. 'shiftwidth')"$/;"	v
menutrans_help_dialog	vim82\lang\menu_uk_ua.koi8-u.vim	/^let menutrans_help_dialog = "˜À¡÷¶‘ÿ ÀœÕ¡Œƒ’ ¡¬œ ”Ãœ◊œ ƒÃ— –œ€’À’:\\n\\n‰œƒ¡ ‘≈ i_ ƒÃ— ÀœÕ¡Œƒ “≈÷…Õ’ ◊”‘¡◊À… (Œ¡–“. i_CTRL-X)\\n‰œƒ¡ ‘≈ i_ ƒÃ— ÀœÕ¡ŒƒŒœ«œ “≈÷…Õ’ (Œ¡–“. ”_<Del>)\\n‰œƒ¡ ‘≈ ' ƒÃ— –œ⁄Œ¡ﬁ≈ŒŒ— Œ¡⁄◊… œ–√¶ß (Œ¡–“. 'shiftwidth')"$/;"	v
menutrans_no_file	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let menutrans_no_file = "[Nincs file]"$/;"	v
menutrans_no_file	vim82\lang\menu_hu_hu.utf-8.vim	/^let menutrans_no_file = "[Nincs file]"$/;"	v
menutrans_no_file	vim82\lang\menu_nl_nl.latin1.vim	/^let menutrans_no_file = "[Geen Bestand]"$/;"	v
menutrans_no_file	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	vim82\lang\menu_pl_pl.utf-8.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	vim82\lang\menu_polish_poland.1250.vim	/^let menutrans_no_file = "[Brak pliku]"$/;"	v
menutrans_no_file	vim82\lang\menu_ru_ru.koi8-r.vim	/^let menutrans_no_file = "[Ó≈‘ ∆¡ Ã¡]"$/;"	v
menutrans_no_file	vim82\lang\menu_ru_ru.vim	/^let menutrans_no_file = "[–ù–µ—Ç —Ñ–∞–π–ª–∞]"$/;"	v
menutrans_no_file	vim82\lang\menu_sr_rs.ascii.vim	/^let menutrans_no_file = "[Nema datoteke]"$/;"	v
menutrans_no_file	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let menutrans_no_file = "[Nema datoteke]"$/;"	v
menutrans_no_file	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let menutrans_no_file = "[Ω’‹– ‘–‚ﬁ‚’⁄’]"$/;"	v
menutrans_no_file	vim82\lang\menu_sr_rs.utf-8.vim	/^let menutrans_no_file = "[–ù–µ–º–∞ —Ñ–∞—ò–ª–∞]"$/;"	v
menutrans_no_file	vim82\lang\menu_sv_se.latin1.vim	/^let menutrans_no_file = "[Ingen fil]"$/;"	v
menutrans_no_file	vim82\lang\menu_tr_tr.cp1254.vim	/^let menutrans_no_file = "[Dosya Yok]"$/;"	v
menutrans_no_file	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let menutrans_no_file = "[Dosya Yok]"$/;"	v
menutrans_no_file	vim82\lang\menu_tr_tr.utf-8.vim	/^let menutrans_no_file = "[Dosya Yok]"$/;"	v
menutrans_no_file	vim82\lang\menu_uk_ua.cp1251.vim	/^let menutrans_no_file = "[ÕÂÏ‡∫\\ ‘‡ÈÎ‡]"$/;"	v
menutrans_no_file	vim82\lang\menu_uk_ua.koi8-u.vim	/^let menutrans_no_file = "[Ó≈Õ¡§\\ Ê¡ Ã¡]"$/;"	v
menutrans_no_file	vim82\lang\menu_vi_vn.vim	/^let menutrans_no_file = "[kh√¥ng c√≥ t·∫≠p tin]"$/;"	v
mmc_logmon_sup	plugins\~\.vim\bundle\Vundle.vim\test\files\test.erl	/^-module(mmc_logmon_sup).$/;"	m
mode 	lua\jit\p.lua	/^  mode = mode:gsub("%-?%d+", function(s) prof_depth = tonumber(s); return "" end)$/;"	f
mode 	lua\jit\p.lua	/^  mode = mode:gsub("i%d*", function(s) interval = s; return "" end)$/;"	f
mode 	lua\jit\p.lua	/^  mode = mode:gsub("m(%d+)", function(s) prof_min = tonumber(s); return "" end)$/;"	f
move_around	vim82\ftplugin\context.vim	/^function! s:move_around(count, what, flags, visual)$/;"	f
move_around	vim82\ftplugin\mf.vim	/^function! s:move_around(count, what, flags, visual)$/;"	f
move_around	vim82\ftplugin\mp.vim	/^function! s:move_around(count, what, flags, visual)$/;"	f
mupad_cmdextversion	vim82\syntax\mupad.vim	/^  let mupad_cmdextversion = 2$/;"	v
mv_DEtools	vim82\syntax\maple.vim	/^  let mv_DEtools    = 1$/;"	v
mv_Galois	vim82\syntax\maple.vim	/^  let mv_Galois     = 1$/;"	v
mv_GaussInt	vim82\syntax\maple.vim	/^  let mv_GaussInt   = 1$/;"	v
mv_LREtools	vim82\syntax\maple.vim	/^  let mv_LREtools   = 1$/;"	v
mv_combinat	vim82\syntax\maple.vim	/^  let mv_combinat   = 1$/;"	v
mv_combstruct	vim82\syntax\maple.vim	/^  let mv_combstruct = 1$/;"	v
mv_difforms	vim82\syntax\maple.vim	/^  let mv_difforms   = 1$/;"	v
mv_finance	vim82\syntax\maple.vim	/^  let mv_finance    = 1$/;"	v
mv_genfunc	vim82\syntax\maple.vim	/^  let mv_genfunc    = 1$/;"	v
mv_geometry	vim82\syntax\maple.vim	/^  let mv_geometry   = 1$/;"	v
mv_grobner	vim82\syntax\maple.vim	/^  let mv_grobner    = 1$/;"	v
mv_group	vim82\syntax\maple.vim	/^  let mv_group      = 1$/;"	v
mv_inttrans	vim82\syntax\maple.vim	/^  let mv_inttrans   = 1$/;"	v
mv_liesymm	vim82\syntax\maple.vim	/^  let mv_liesymm    = 1$/;"	v
mv_linalg	vim82\syntax\maple.vim	/^  let mv_linalg     = 1$/;"	v
mv_logic	vim82\syntax\maple.vim	/^  let mv_logic      = 1$/;"	v
mv_networks	vim82\syntax\maple.vim	/^  let mv_networks   = 1$/;"	v
mv_numapprox	vim82\syntax\maple.vim	/^  let mv_numapprox  = 1$/;"	v
mv_numtheory	vim82\syntax\maple.vim	/^  let mv_numtheory  = 1$/;"	v
mv_orthopoly	vim82\syntax\maple.vim	/^  let mv_orthopoly  = 1$/;"	v
mv_padic	vim82\syntax\maple.vim	/^  let mv_padic      = 1$/;"	v
mv_plots	vim82\syntax\maple.vim	/^  let mv_plots      = 1$/;"	v
mv_plottools	vim82\syntax\maple.vim	/^  let mv_plottools  = 1$/;"	v
mv_powseries	vim82\syntax\maple.vim	/^  let mv_powseries  = 1$/;"	v
mv_process	vim82\syntax\maple.vim	/^  let mv_process    = 1$/;"	v
mv_simplex	vim82\syntax\maple.vim	/^  let mv_simplex    = 1$/;"	v
mv_stats	vim82\syntax\maple.vim	/^  let mv_stats      = 1$/;"	v
mv_student	vim82\syntax\maple.vim	/^  let mv_student    = 1$/;"	v
mv_sumtools	vim82\syntax\maple.vim	/^  let mv_sumtools   = 1$/;"	v
mv_tensor	vim82\syntax\maple.vim	/^  let mv_tensor     = 1$/;"	v
mv_totorder	vim82\syntax\maple.vim	/^  let mv_totorder   = 1$/;"	v
n	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap n b$/;"	m
n	vim82\syntax\xpm.vim	/^	 let n = 1		" n = color index$/;"	v
n	vim82\syntax\xpm.vim	/^	 let n = n + 1$/;"	v
n	vim82\syntax\xpm.vim	/^let n      = 0$/;"	v
n	vim82\syntax\xpm2.vim	/^	let n = 1			" n = color index$/;"	v
n	vim82\syntax\xpm2.vim	/^	let n = n + 1$/;"	v
n	vim82\syntax\xpm2.vim	/^  let n      = 0$/;"	v
name	vim82\ftplugin\changelog.vim	/^  function! s:name(login)$/;"	f
netrw#Access	vim82\autoload\netrw.vim	/^fun! netrw#Access(ilist)$/;"	f
netrw#BalloonHelp	vim82\autoload\netrw.vim	/^ fun! netrw#BalloonHelp()$/;"	f
netrw#BrowseX	vim82\autoload\netrw.vim	/^fun! netrw#BrowseX(fname,remote)$/;"	f
netrw#BrowseXVis	vim82\autoload\netrw.vim	/^fun! netrw#BrowseXVis()$/;"	f
netrw#Call	vim82\autoload\netrw.vim	/^fun! netrw#Call(funcname,...)$/;"	f
netrw#CheckIfRemote	vim82\autoload\netrw.vim	/^fun! netrw#CheckIfRemote(...)$/;"	f
netrw#Clean	vim82\autoload\netrw.vim	/^fun! netrw#Clean(sys)$/;"	f
netrw#ErrorMsg	vim82\autoload\netrw.vim	/^fun! netrw#ErrorMsg(level,msg,errnum)$/;"	f
netrw#Explore	vim82\autoload\netrw.vim	/^fun! netrw#Explore(indx,dosplit,style,...)$/;"	f
netrw#Expose	vim82\autoload\netrw.vim	/^fun! netrw#Expose(varname)$/;"	f
netrw#FileUrlEdit	vim82\autoload\netrw.vim	/^fun! netrw#FileUrlEdit(fname)$/;"	f
netrw#GX	vim82\autoload\netrw.vim	/^fun! netrw#GX()$/;"	f
netrw#Lexplore	vim82\autoload\netrw.vim	/^fun! netrw#Lexplore(count,rightside,...)$/;"	f
netrw#LocalBrowseCheck	vim82\autoload\netrw.vim	/^fun! netrw#LocalBrowseCheck(dirname)$/;"	f
netrw#MakeTgt	vim82\autoload\netrw.vim	/^fun! netrw#MakeTgt(dname)$/;"	f
netrw#Modify	vim82\autoload\netrw.vim	/^fun! netrw#Modify(varname,newvalue)$/;"	f
netrw#NetRead	vim82\autoload\netrw.vim	/^fun! netrw#NetRead(mode,...)$/;"	f
netrw#NetSource	vim82\autoload\netrw.vim	/^fun! netrw#NetSource(...)$/;"	f
netrw#NetWrite	vim82\autoload\netrw.vim	/^fun! netrw#NetWrite(...) range$/;"	f
netrw#Nread	vim82\autoload\netrw.vim	/^fun! netrw#Nread(mode,fname)$/;"	f
netrw#Obtain	vim82\autoload\netrw.vim	/^fun! netrw#Obtain(islocal,fname,...)$/;"	f
netrw#RFC2396	vim82\autoload\netrw.vim	/^fun! netrw#RFC2396(fname)$/;"	f
netrw#SetTreetop	vim82\autoload\netrw.vim	/^fun! netrw#SetTreetop(iscmd,...)$/;"	f
netrw#Shrink	vim82\autoload\netrw.vim	/^fun! netrw#Shrink()$/;"	f
netrw#UserMaps	vim82\autoload\netrw.vim	/^fun! netrw#UserMaps(islocal)$/;"	f
netrw#WinPath	vim82\autoload\netrw.vim	/^fun! netrw#WinPath(path)$/;"	f
netrwFileHandlers#Invoke	vim82\autoload\netrwFileHandlers.vim	/^fun! netrwFileHandlers#Invoke(exten,fname)$/;"	f
netrwSettings#NetrwSettings	vim82\autoload\netrwSettings.vim	/^fun! netrwSettings#NetrwSettings()$/;"	f
netrw_gitignore#Hide	vim82\autoload\netrw_gitignore.vim	/^function! netrw_gitignore#Hide(...)$/;"	f
new_changelog_entry	vim82\ftplugin\changelog.vim	/^  function! s:new_changelog_entry(prefix)$/;"	f
nop 	lua\jit\dis_x86.lua	/^  nop = function(ctx, name, pat)$/;"	f
not_supported	vim82\spell\check_locales.vim	/^let not_supported = []$/;"	v
notag	vim82\ftplugin\pdf.vim	/^function! s:notag()$/;"	f
nqc_minlines	vim82\syntax\nqc.vim	/^    let nqc_minlines = 15	    " mostly for () constructs$/;"	v
nqc_minlines	vim82\syntax\nqc.vim	/^    let nqc_minlines = 50	    " #if 0 constructs can be long$/;"	v
o	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap o r$/;"	m
oneline_comments	vim82\syntax\spup.vim	/^    let oneline_comments = 2$/;"	v
opc2 	lua\jit\dis_x86.lua	/^  opc2 = function(ctx, name, pat)$/;"	f
opc3 	lua\jit\dis_x86.lua	/^  opc3 = function(ctx, name, pat)$/;"	f
open_changelog	vim82\ftplugin\changelog.vim	/^  function! s:open_changelog()$/;"	f
opt 	lua\jit\dump.lua	/^    opt = gsub(opt, "[TAH]", function(mode) colormode = mode; return ""; end)$/;"	f
optionalblock	vim82\indent\cobol.vim	/^function! s:optionalblock(lnum,ind,blocks,clauses)$/;"	f
optwin	vim82\optwin.vim	/^augroup optwin$/;"	a
out_time	vim82\indent\testdir\runtest.vim	/^  let out_time = getftime(root . '.out')$/;"	v
p	vim82\macros\less.vim	/^map p %$/;"	m
p	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap p l$/;"	m
parse_back_quote	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_back_quote(script, i) abort "{{{$/;"	f
parse_block	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_block(script) abort "{{{$/;"	f
parse_cmdline	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_cmdline(cmdline) abort "{{{$/;"	f
parse_double_quote	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_double_quote(script, i) abort "{{{$/;"	f
parse_equal	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_equal(script) abort "{{{$/;"	f
parse_fpimm8	lua\jit\dis_arm64.lua	/^local function parse_fpimm8(op)$/;"	f
parse_immpc	lua\jit\dis_arm64.lua	/^local function parse_immpc(op, name)$/;"	f
parse_name	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:parse_name(arg)$/;"	f
parse_options	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:parse_options(opts)$/;"	f
parse_prop	plugins\autofmt\tools\unicode.vim	/^function s:parse_prop(lines)$/;"	f
parse_redirection	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_redirection(script) abort "{{{$/;"	f
parse_single_quote	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_single_quote(script, i) abort "{{{$/;"	f
parse_tilde	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_tilde(script) abort "{{{$/;"	f
parse_variables	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_variables(script) abort "{{{$/;"	f
parse_wildcard	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:parse_wildcard(script) abort "{{{$/;"	f
passwd_field	vim82\ftplugin\changelog.vim	/^  function! s:passwd_field(line, field)$/;"	f
paste#Paste	vim82\autoload\paste.vim	/^func! paste#Paste()$/;"	f
paste#paste_cmd	vim82\autoload\paste.vim	/^let paste#paste_cmd = {'n': ":call paste#Paste()<CR>"}$/;"	v
paste#paste_cmd	vim82\autoload\paste.vim	/^let paste#paste_cmd['i'] = "\\<c-\\>\\<c-o>\\"+gP"$/;"	v
paste#paste_cmd	vim82\autoload\paste.vim	/^let paste#paste_cmd['v'] = '"-c<Esc>' . paste#paste_cmd['n']$/;"	v
path_extensions	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:path_extensions() abort$/;"	f
path_separator	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:path_separator() abort$/;"	f
pattern	vim82\indent\testdir\runtest.vim	/^	    let pattern = substitute(text, '.*INDENT_\\S*\\s*', '', '')$/;"	v
pattern	vim82\indent\testdir\runtest.vim	/^	let pattern = ''$/;"	v
pattern	vim82\syntax\cucumber.vim	/^function! s:pattern(key)$/;"	f
perlpath	vim82\ftplugin\perl.vim	/^	    let perlpath = system("perl -e 'print join(q\/,\/,@INC)'")$/;"	v
perlpath	vim82\ftplugin\perl.vim	/^	    let perlpath = system('perl -e "print join(q\/,\/,@INC)"')$/;"	v
perlpath	vim82\ftplugin\perl.vim	/^	let perlpath = ".,,"$/;"	v
perlpath	vim82\ftplugin\perl.vim	/^	let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
perlpath	vim82\ftplugin\perl6.vim	/^                let perlpath = system("perl6 -e  '@*INC.join(q\/,\/).say'")$/;"	v
perlpath	vim82\ftplugin\perl6.vim	/^                let perlpath = system('perl6 -e  "@*INC.join(q\/,\/).say"')$/;"	v
perlpath	vim82\ftplugin\perl6.vim	/^            let perlpath = ".,,"$/;"	v
perlpath	vim82\ftplugin\perl6.vim	/^            let perlpath = substitute(perlpath,',.$',',,','')$/;"	v
perlpath	vim82\ftplugin\perl6.vim	/^        let perlpath = ".,,"$/;"	v
permute_suffixes	vim82\syntax\hostconf.vim	/^function s:permute_suffixes(list)$/;"	f
pgroup_open	plugins\vimproc\autoload\vimproc.vim	/^function! s:pgroup_open(statements, is_pty, npipe) abort "{{{$/;"	f
php_alt_assignByReference	vim82\syntax\php.vim	/^  let php_alt_assignByReference = 1$/;"	v
php_alt_comparisons	vim82\syntax\php.vim	/^  let php_alt_comparisons = 1$/;"	v
php_builtin	vim82\autoload\phpcomplete.vim	/^endfunction$/;"	v
php_parent_error_close	vim82\syntax\php.vim	/^  let php_parent_error_close=1$/;"	v
php_parent_error_open	vim82\syntax\php.vim	/^  let php_parent_error_open=1$/;"	v
php_special_functions	vim82\syntax\php.vim	/^  let php_special_functions = 1$/;"	v
php_sync_method	vim82\syntax\php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	vim82\syntax\php.vim	/^    let php_sync_method=php_minlines$/;"	v
phpcomplete#ClearCachedClassContents	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#ClearCachedClassContents(full_file_path) " {{{$/;"	f
phpcomplete#CompareCompletionRow	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompareCompletionRow(i1, i2) " {{{$/;"	f
phpcomplete#CompleteBuiltInClass	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompleteBuiltInClass(context, classname, base) " {{{$/;"	f
phpcomplete#CompleteClassName	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompleteClassName(base, kinds, current_namespace, imports) " {{{$/;"	f
phpcomplete#CompleteGeneral	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompleteGeneral(base, current_namespace, imports) " {{{$/;"	f
phpcomplete#CompletePHP	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompletePHP(findstart, base) " {{{$/;"	f
phpcomplete#CompleteUnknownClass	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompleteUnknownClass(base, context) " {{{$/;"	f
phpcomplete#CompleteUse	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompleteUse(base) " {{{$/;"	f
phpcomplete#CompleteUserClass	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompleteUserClass(context, base, sccontent, visibility) " {{{$/;"	f
phpcomplete#CompleteVariable	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#CompleteVariable(base) " {{{$/;"	f
phpcomplete#EvaluateModifiers	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#EvaluateModifiers(modifiers, required_modifiers, prohibited_modifiers) " {{{$/;"	f
phpcomplete#ExpandClassName	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#ExpandClassName(classname, current_namespace, imports) " {{{$/;"	f
phpcomplete#FormatDocBlock	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#FormatDocBlock(info) " {{{$/;"	f
phpcomplete#GenerateBuiltinClassStub	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GenerateBuiltinClassStub(type, class_info) " {{{$/;"	f
phpcomplete#GetCachedClassContents	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetCachedClassContents(classlocation, class_name) " {{{$/;"	f
phpcomplete#GetCallChainReturnType	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetCallChainReturnType(classname_candidate, class_candidate_namespace, imports, methodstack) " {{{$/;"	f
phpcomplete#GetClassContents	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetClassContents(classlocation, class_name) " {{{$/;"	f
phpcomplete#GetClassContentsStructure	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetClassContentsStructure(file_path, file_lines, class_name) " {{{$/;"	f
phpcomplete#GetClassLocation	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetClassLocation(classname, namespace) " {{{$/;"	f
phpcomplete#GetClassName	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetClassName(start_line, context, current_namespace, imports) " {{{$/;"	f
phpcomplete#GetCurrentFunctionBoundaries	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetCurrentFunctionBoundaries() " {{{$/;"	f
phpcomplete#GetCurrentInstruction	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetCurrentInstruction(line_number, col_number, phpbegin) " {{{$/;"	f
phpcomplete#GetCurrentNameSpace	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetCurrentNameSpace(file_lines) " {{{$/;"	f
phpcomplete#GetDocBlock	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetDocBlock(sccontent, search) " {{{$/;"	f
phpcomplete#GetFunctionLocation	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetFunctionLocation(function_name, namespace) " {{{$/;"	f
phpcomplete#GetFunctionReturnTypeHint	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetFunctionReturnTypeHint(sccontent, search)$/;"	f
phpcomplete#GetMethodStack	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetMethodStack(line) " {{{$/;"	f
phpcomplete#GetTaglist	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetTaglist(pattern) " {{{$/;"	f
phpcomplete#GetTypeFromDocBlockParam	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#GetTypeFromDocBlockParam(docblock_type) " {{{$/;"	f
phpcomplete#LoadData	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#LoadData() " {{{$/;"	f
phpcomplete#ParseDocBlock	vim82\autoload\phpcomplete.vim	/^function! phpcomplete#ParseDocBlock(docblock) " {{{$/;"	f
plineopen	plugins\vimproc\autoload\vimproc.vim	/^function! s:plineopen(npipe, commands, is_pty) abort "{{{$/;"	f
polecenia	vim82\tutor\tutor.pl	/^  polecenia:$/;"	l
position_cursor	vim82\ftplugin\changelog.vim	/^  function! s:position_cursor()$/;"	f
postscr_level	vim82\syntax\postscr.vim	/^  let postscr_level = 2$/;"	v
ppwiz_highlight_defs	vim82\syntax\ppwiz.vim	/^    let ppwiz_highlight_defs = 1$/;"	v
ppwiz_with_html	vim82\syntax\ppwiz.vim	/^    let ppwiz_with_html = 1$/;"	v
prefer_bfx	lua\jit\dis_arm64.lua	/^local function prefer_bfx(sf, uns, imms, immr)$/;"	f
prevgood	vim82\indent\bst.vim	/^function! s:prevgood(lnum)$/;"	f
prevgood	vim82\indent\cobol.vim	/^function! s:prevgood(lnum)$/;"	f
preview_color	vim82\syntax\dircolors.vim	/^function! s:preview_color(linenr) abort$/;"	f
prevnonblanknoncomment	vim82\indent\css.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	vim82\indent\ld.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
prevnonblanknoncomment	vim82\indent\tcl.vim	/^function s:prevnonblanknoncomment(lnum)$/;"	f
print_error	plugins\vimproc\autoload\vimproc.vim	/^function! s:print_error(string) abort$/;"	f
print_function	vim82\tools\demoserver.py	/^from __future__ import print_function$/;"	i
printsnap	lua\jit\dump.lua	/^local function printsnap(tr, snap)$/;"	f
prior_isk	vim82\syntax\rst.vim	/^    let prior_isk = &l:iskeyword$/;"	v
process	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:process(bang, cmd)$/;"	f
prof_annotate	lua\jit\p.lua	/^local function prof_annotate(count1, samples)$/;"	f
prof_cb	lua\jit\p.lua	/^local function prof_cb(th, samples, vmmode)$/;"	f
prof_finish	lua\jit\p.lua	/^local function prof_finish()$/;"	f
prof_start	lua\jit\p.lua	/^local function prof_start(mode)$/;"	f
prof_top	lua\jit\p.lua	/^local function prof_top(count1, count2, samples, indent)$/;"	f
progressbar.calculate_ticks	vim82\syntax\2html.vim	/^  func! s:progressbar.calculate_ticks(pb_len)$/;"	f
progressbar.incr	vim82\syntax\2html.vim	/^  func! s:progressbar.incr( ... )$/;"	f
progressbar.paint	vim82\syntax\2html.vim	/^  func! s:progressbar.paint()$/;"	f
prop_bsearch	plugins\autofmt\tools\unicode.vim	/^function s:prop_bsearch(ucs4, table)$/;"	f
put_href	vim82\doc\makehtml.awk	/^function put_href() {$/;"	f
put_href2	vim82\doc\makehtml.awk	/^function put_href2() {$/;"	f
put_href3	vim82\doc\makehtml.awk	/^function put_href3() {$/;"	f
put_this	vim82\doc\makehtml.awk	/^function put_this() {$/;"	f
putop	lua\jit\dis_arm.lua	/^local function putop(ctx, text, operands)$/;"	f
putop	lua\jit\dis_arm64.lua	/^local function putop(ctx, text, operands)$/;"	f
putop	lua\jit\dis_mips.lua	/^local function putop(ctx, text, operands)$/;"	f
putop	lua\jit\dis_ppc.lua	/^local function putop(ctx, text, operands)$/;"	f
putop	lua\jit\dis_x86.lua	/^local function putop(ctx, text, operands)$/;"	f
putpat	lua\jit\dis_x86.lua	/^local function putpat(ctx, name, pat)$/;"	f
python3complete#Complete	vim82\autoload\python3complete.vim	/^function! python3complete#Complete(findstart, base)$/;"	f
python_no_doctest_code_highlight	vim82\syntax\python.vim	/^  let python_no_doctest_code_highlight = 1$/;"	v
python_space_error_highlight	vim82\syntax\python.vim	/^  let python_space_error_highlight = 1$/;"	v
pythoncomplete#Complete	vim82\autoload\pythoncomplete.vim	/^function! pythoncomplete#Complete(findstart, base)$/;"	f
q	vim82\ftplugin\man.vim	/^    nnoremap <buffer> <silent> q :q<CR>$/;"	m
q	vim82\macros\hanoi\hanoi.vim	/^map q tllD$/;"	m
q	vim82\macros\less.vim	/^noremap q :q<CR>$/;"	m
q	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap q '$/;"	m
query_path	vim82\ftplugin\ruby.vim	/^function! s:query_path(root) abort$/;"	f
quote_arg	plugins\vimproc\autoload\vimproc.vim	/^function! s:quote_arg(arg) abort$/;"	f
r	vim82\macros\less.vim	/^noremap <script> r <C-L><SID>L$/;"	m
r	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap r p$/;"	m
read	plugins\vimproc\autoload\vimproc.vim	/^function! s:read(...) dict "{{{$/;"	f
readTagFile	vim82\doc\vim2html.pl	/^sub readTagFile$/;"	s
read_line	plugins\vimproc\autoload\vimproc.vim	/^function! s:read_line(...) dict "{{{$/;"	f
read_lines	plugins\vimproc\autoload\vimproc.vim	/^function! s:read_lines(...) dict "{{{$/;"	f
read_pgroup	plugins\vimproc\autoload\vimproc.vim	/^function! s:read_pgroup(...) dict "{{{$/;"	f
read_pipes	plugins\vimproc\autoload\vimproc.vim	/^function! s:read_pipes(...) dict "{{{$/;"	f
reader.read	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! s:reader.read() abort$/;"	f
reader.unread	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! s:reader.unread() abort$/;"	f
readfile	lua\jit\bcsave.lua	/^local function readfile(input)$/;"	f
regex_extra	vim82\ftplugin\sql.vim	/^                let regex_extra = '\\\\w*'$/;"	v
regex_extra	vim82\ftplugin\sql.vim	/^        let regex_extra = ''$/;"	v
registryProperty	vim82\tools\xcmdsrv_client.c	/^static Atom	registryProperty = None;$/;"	v	file:
regname	lua\jit\dis_arm.lua	/^local function regname(r)$/;"	f
regname	lua\jit\dis_arm64.lua	/^local function regname(r)$/;"	f
regname	lua\jit\dis_mips.lua	/^local function regname(r)$/;"	f
regname	lua\jit\dis_ppc.lua	/^local function regname(r)$/;"	f
regname	lua\jit\dis_x86.lua	/^local function regname(r)$/;"	f
regname64	lua\jit\dis_x86.lua	/^local function regname64(r)$/;"	f
remove_continuation	vim82\indent\make.vim	/^function s:remove_continuation(line)$/;"	f
remove_last_separator	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:remove_last_separator(path) abort$/;"	f
removed	vim82\syntax\2html.vim	/^	  let removed = 1$/;"	v
removed	vim82\syntax\2html.vim	/^	let removed = 1$/;"	v
removed	vim82\syntax\2html.vim	/^    let removed = 0$/;"	v
repeat	vim82\ftplugin\cobol.vim	/^function! s:repeat(str,count)$/;"	f
reset_colors	vim82\syntax\dircolors.vim	/^function! s:reset_colors() abort$/;"	f
rex 	lua\jit\dis_x86.lua	/^  rex = function(ctx, name, pat)$/;"	f
ridsp_name	lua\jit\dump.lua	/^local function ridsp_name(ridsp, ins)$/;"	f
root	vim82\indent\testdir\runtest.vim	/^  let root = substitute(fname, '\\.in', '', '')$/;"	v
rtp_add	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:rtp_add(dir) abort$/;"	f
rtp_add_a	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:rtp_add_a()$/;"	f
rtp_add_defaults	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:rtp_add_defaults()$/;"	f
rtp_rm	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:rtp_rm(dir) abort$/;"	f
rtp_rm_a	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:rtp_rm_a()$/;"	f
rtpath	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! s:rtpath(opts)$/;"	f
ruby_minlines	vim82\syntax\ruby.vim	/^    let ruby_minlines = 500$/;"	v
rubycomplete#Complete	vim82\autoload\rubycomplete.vim	/^function! rubycomplete#Complete(findstart, base)$/;"	f
rubycomplete#Init	vim82\autoload\rubycomplete.vim	/^function! rubycomplete#Init()$/;"	f
run_syntax_fold	vim82\syntax\ruby.vim	/^function! s:run_syntax_fold(args) abort$/;"	f
rust	vim82\ftplugin\rust.vim	/^augroup rust.vim$/;"	a
rust#AppendCmdLine	vim82\autoload\rust.vim	/^function! rust#AppendCmdLine(text)$/;"	f
rust#CompleteExpand	vim82\autoload\rust.vim	/^function! rust#CompleteExpand(lead, line, pos)$/;"	f
rust#Emit	vim82\autoload\rust.vim	/^function! rust#Emit(type, args)$/;"	f
rust#Expand	vim82\autoload\rust.vim	/^function! rust#Expand(bang, args)$/;"	f
rust#Jump	vim82\autoload\rust.vim	/^function! rust#Jump(mode, function) range$/;"	f
rust#Play	vim82\autoload\rust.vim	/^function! rust#Play(count, line1, line2, ...) abort$/;"	f
rust#Run	vim82\autoload\rust.vim	/^function! rust#Run(bang, args)$/;"	f
rustfmt#Format	vim82\autoload\rustfmt.vim	/^function! rustfmt#Format()$/;"	f
rustfmt#FormatRange	vim82\autoload\rustfmt.vim	/^function! rustfmt#FormatRange(line1, line2)$/;"	f
s	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap s o$/;"	m
s	vim82\syntax\xpm.vim	/^	 let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	vim82\syntax\xpm.vim	/^   let s = matchstr(getline(i), '".\\{-1,}"')$/;"	v
s	vim82\syntax\xpm2.vim	/^	let s = escape(s, '\/\\*^$.~[]')$/;"	v
s	vim82\syntax\xpm2.vim	/^	let s = substitute(s, "[ \\t][ \\t]*", "\\\\\\\\s\\\\\\\\+", "g")$/;"	v
s	vim82\syntax\xpm2.vim	/^      let s = matchstr(s, "^[^\\!]*")$/;"	v
s	vim82\syntax\xpm2.vim	/^    let s = getline(i)$/;"	v
s:AdaBlockStart	vim82\indent\ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|project\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:AdaBlockStart	vim82\indent\ada.vim	/^   let s:AdaBlockStart = '^\\s*\\(if\\>\\|while\\>\\|else\\>\\|elsif\\>\\|loop\\>\\|for\\>.*\\<\\(loop\\|use\\)\\>\\|declare\\>\\|begin\\>\\|type\\>.*\\<is\\>[^;]*$\\|\\(type\\>.*\\)\\=\\<record\\>\\|procedure\\>\\|function\\>\\|accept\\>\\|do\\>\\|task\\>\\|package\\>\\|then\\>\\|when\\>\\|is\\>\\)'$/;"	v
s:BreakpointSigns	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:BreakpointSigns = []$/;"	v
s:CONCEAL_ID	vim82\syntax\2html.vim	/^  let s:CONCEAL_ID = hlID('Conceal')    | lockvar s:CONCEAL_ID$/;"	v
s:ColonEnd	vim82\indent\occam.vim	/^let s:ColonEnd = '\\(--.*\\)\\@<!:\\s*\\(--.*\\)\\=$'$/;"	v
s:ColonIndent	vim82\indent\occam.vim	/^let s:ColonIndent = '\\(--.*\\)\\@<!\\<PROC\\>'$/;"	v
s:ColonNonColonEndIndent	vim82\indent\occam.vim	/^let s:ColonNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:ColonStart	vim82\indent\occam.vim	/^let s:ColonStart = '^\\s*:\\s*\\(--.*\\)\\=$'$/;"	v
s:CommentLine	vim82\indent\occam.vim	/^let s:CommentLine = '^\\s*--'$/;"	v
s:Cpath	vim82\syntax\lex.vim	/^   let s:Cpath= fnameescape(s:Cpath)$/;"	v
s:Cpath	vim82\syntax\lex.vim	/^let s:Cpath= fnameescape(expand("<sfile>:p:h")."\/cpp.vim")$/;"	v
s:Cpath	vim82\syntax\yacc.vim	/^   let s:Cpath= fnameescape(s:Cpath)$/;"	v
s:Cpath	vim82\syntax\yacc.vim	/^let s:Cpath= fnameescape(expand("<sfile>:p:h").(exists("g:yacc_uses_cpp")? "\/cpp.vim" : "\/c.vim"))$/;"	v
s:DIFF_A_ID	vim82\syntax\2html.vim	/^  let s:DIFF_A_ID  = hlID("DiffAdd")    | lockvar s:DIFF_A_ID$/;"	v
s:DIFF_C_ID	vim82\syntax\2html.vim	/^  let s:DIFF_C_ID  = hlID("DiffChange") | lockvar s:DIFF_C_ID$/;"	v
s:DIFF_D_ID	vim82\syntax\2html.vim	/^  let s:DIFF_D_ID  = hlID("DiffDelete") | lockvar s:DIFF_D_ID$/;"	v
s:DIFF_T_ID	vim82\syntax\2html.vim	/^  let s:DIFF_T_ID  = hlID("DiffText")   | lockvar s:DIFF_T_ID$/;"	v
s:ERROR	vim82\autoload\netrw.vim	/^ let s:ERROR   = 2$/;"	v
s:ERROR	vim82\autoload\vimball.vim	/^ let s:ERROR   = 2$/;"	v
s:ERROR	vim82\autoload\zip.vim	/^let s:ERROR          = 2$/;"	v
s:ES	vim82\indent\vhdl.vim	/^let s:ES = '\\s*\\%(--.*\\)\\=$'$/;"	v
s:FOLDED_ID	vim82\syntax\2html.vim	/^  let s:FOLDED_ID  = hlID("Folded")     | lockvar s:FOLDED_ID$/;"	v
s:FOLD_C_ID	vim82\syntax\2html.vim	/^  let s:FOLD_C_ID  = hlID("FoldColumn") | lockvar s:FOLD_C_ID$/;"	v
s:FirstLevelIndent	vim82\indent\occam.vim	/^let s:FirstLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\|PAR\\|SEQ\\|PRI\\s\\+PAR\\|WHILE\\|VALOF\\|CLAIM\\|FORKING\\)\\>\\|\\(--.*\\)\\@<!\\(\\<PROC\\>\\|??\\|\\<CASE\\>\\s*\\(--.*\\)\\=\\_$\\)'$/;"	v
s:FirstLevelNonColonEndIndent	vim82\indent\occam.vim	/^let s:FirstLevelNonColonEndIndent = '^\\C\\s*PROTOCOL\\>\\|\\(--.*\\)\\@<!\\<\\(\\(CHAN\\|DATA\\)\\s\\+TYPE\\|FUNCTION\\)\\>'$/;"	v
s:Fold_Collate	vim82\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<begin\\>$\\|'$/;"	v
s:Fold_Collate	vim82\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<exception\\>$\\|'$/;"	v
s:Fold_Collate	vim82\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<is\\>$\\|'$/;"	v
s:Fold_Collate	vim82\autoload\ada.vim	/^      let s:Fold_Collate .= '\\s\\+\\<private\\>$\\|'$/;"	v
s:Fold_Collate	vim82\autoload\ada.vim	/^   let s:Fold_Collate .= '--\\)'$/;"	v
s:Fold_Collate	vim82\autoload\ada.vim	/^   let s:Fold_Collate = '^\\([;)]*$\\|'$/;"	v
s:HtmlEndline	vim82\syntax\2html.vim	/^  let s:HtmlEndline = '<br' . s:tag_close$/;"	v
s:HtmlEndline	vim82\syntax\2html.vim	/^let s:HtmlEndline = ''$/;"	v
s:HtmlSpace	vim82\syntax\2html.vim	/^  let s:HtmlSpace = '\\' . s:LeadingSpace$/;"	v
s:HtmlSpace	vim82\syntax\2html.vim	/^let s:HtmlSpace = ' '$/;"	v
s:LINENR_ID	vim82\syntax\2html.vim	/^  let s:LINENR_ID  = hlID('LineNr')     | lockvar s:LINENR_ID$/;"	v
s:LeadingSpace	vim82\syntax\2html.vim	/^  let s:LeadingSpace = s:settings.use_xhtml ? '&#160;' : '&nbsp;'$/;"	v
s:LeadingSpace	vim82\syntax\2html.vim	/^let s:LeadingSpace = ' '$/;"	v
s:MAJOR_VERSION	plugins\vimproc\autoload\vimproc.vim	/^let s:MAJOR_VERSION = 9$/;"	v
s:MINOR_VERSION	plugins\vimproc\autoload\vimproc.vim	/^let s:MINOR_VERSION = 3$/;"	v
s:NC	vim82\indent\vhdl.vim	/^let s:NC = '\\%(--.*\\)\\@<!'$/;"	v
s:NE	vim82\indent\vhdl.vim	/^let s:NE = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:NOTE	vim82\autoload\netrw.vim	/^ let s:NOTE    = 0$/;"	v
s:NOTE	vim82\autoload\zip.vim	/^let s:NOTE           = 0$/;"	v
s:PHP_startindenttag	vim82\indent\php.vim	/^let s:PHP_startindenttag = '<?\\%(.*?>\\)\\@!\\|<script[^>]*>\\%(.*<\\\/script>\\)\\@!'$/;"	v
s:PHP_validVariable	vim82\indent\php.vim	/^let s:PHP_validVariable = '[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*'$/;"	v
s:QuickHelp	vim82\autoload\netrw.vim	/^let s:QuickHelp= ["-:go up dir  D:delete  R:rename  s:sort-by  x:special",$/;"	v
s:RIndent	vim82\indent\rhelp.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	vim82\indent\rmd.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	vim82\indent\rnoweb.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:RIndent	vim82\indent\rrst.vim	/^let s:RIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:ReferenceName	vim82\syntax\rst.vim	/^let s:ReferenceName = '[[:alnum:]]\\%([-_.:+]\\?[[:alnum:]]\\+\\)*'$/;"	v
s:SQLBlockEnd	vim82\indent\sqlanywhere.vim	/^let s:SQLBlockEnd = '^\\s*\\(end\\)\\>'$/;"	v
s:SQLBlockStart	vim82\indent\sqlanywhere.vim	/^let s:SQLBlockStart = '^\\s*\\%('.$/;"	v
s:SecondLevelIndent	vim82\indent\occam.vim	/^let s:SecondLevelIndent = '^\\C\\s*\\(IF\\|ALT\\|PRI\\s\\+ALT\\)\\>\\|\\(--.*\\)\\@<!?\\s*\\<CASE\\>\\s*\\(--.*\\)\\=\\_$'$/;"	v
s:SecondLevelNonColonEndIndent	vim82\indent\occam.vim	/^let s:SecondLevelNonColonEndIndent = '\\(--.*\\)\\@<!\\<\\(CHAN\\|DATA\\)\\s\\+TYPE\\>'$/;"	v
s:SynPHPMatchGroups	vim82\indent\php.vim	/^let s:SynPHPMatchGroups = {'phpparent':1, 'delimiter':1, 'define':1, 'storageclass':1, 'structure':1, 'exception':1}$/;"	v
s:TeXIndent	vim82\indent\rnoweb.vim	/^  let s:TeXIndent = function("s:NoTeXIndent")$/;"	v
s:TeXIndent	vim82\indent\rnoweb.vim	/^  let s:TeXIndent = function(substitute(&indentexpr, "()", "", ""))$/;"	v
s:USAGE	vim82\autoload\vimball.vim	/^ let s:USAGE   = 0$/;"	v
s:VERSION_NUMBER	plugins\vimproc\autoload\vimproc.vim	/^let s:VERSION_NUMBER = str2nr(printf('%2d%02d', s:MAJOR_VERSION, s:MINOR_VERSION))$/;"	v
s:VERSION_STRING	plugins\vimproc\autoload\vimproc.vim	/^let s:VERSION_STRING = printf('%d.%d', s:MAJOR_VERSION, s:MINOR_VERSION)$/;"	v
s:WARNING	vim82\autoload\netrw.vim	/^ let s:WARNING = 1$/;"	v
s:WARNING	vim82\autoload\vimball.vim	/^ let s:WARNING = 1$/;"	v
s:WARNING	vim82\autoload\zip.vim	/^let s:WARNING        = 1$/;"	v
s:_bounder	vim82\syntax\yaml.vim	/^let s:_bounder = s:SimplifyToAssumeAllPrintable('\\%([[\\]{}, \\t]\\@!\\p\\)')$/;"	v
s:_collection	vim82\syntax\yaml.vim	/^let s:_collection = '[^\\@!\\(\\%(\\\\\\.\\|\\[^\\\\\\]]\\)\\+\\)]'$/;"	v
s:_neg_collection	vim82\syntax\yaml.vim	/^let s:_neg_collection = '[^\\(\\%(\\\\\\.\\|\\[^\\\\\\]]\\)\\+\\)]'$/;"	v
s:access_modifier_regex	vim82\indent\ruby.vim	/^let s:access_modifier_regex = '\\C^\\s*\\%(public\\|protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:adverbs	vim82\syntax\perl6.vim	/^    let s:adverbs = [$/;"	v
s:after	vim82\syntax\perl6.vim	/^    let s:after  = "\\\\%(\\\\_s*:!\\\\?\\\\K\\\\%(\\\\k\\\\|[-']\\\\K\\\\@=\\\\)*\\\\%(([^)]*)\\\\|\\\\[[^\\\\]]*]\\\\|<[^>]*>\\\\|¬´[^¬ª]*¬ª\\\\|{[^}]*}\\\\)\\\\?\\\\)*\\\\_s*\\\\)\\\\@<="$/;"	v
s:after_keyword	vim82\syntax\perl6.vim	/^let s:after_keyword = "\\\\)\\\\%(\\\\k\\\\|[-']\\\\K\\\\@=\\\\)\\\\@!\\""$/;"	v
s:alias_pattern	vim82\syntax\rst.vim	/^    let s:alias_pattern = ''$/;"	v
s:all_tokens	vim82\indent\erlang.vim	/^let s:all_tokens = {}$/;"	v
s:allfolds	vim82\syntax\2html.vim	/^let s:allfolds = []$/;"	v
s:ambitable	vim82\tools\unicode.vim	/^let s:ambitable = []$/;"	v
s:annot_file_list	vim82\ftplugin\ocaml.vim	/^  let s:annot_file_list = {}$/;"	v
s:ant_cpo_save	vim82\syntax\ant.vim	/^let s:ant_cpo_save = &cpo$/;"	v
s:archs	vim82\syntax\debcontrol.vim	/^let s:archs = [$/;"	v
s:arrayDecl	vim82\indent\php.vim	/^let s:arrayDecl = '\\<array\\>\\s*(.*'$/;"	v
s:assignment_rx	vim82\indent\make.vim	/^let s:assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\==\\s*\\zs.*\\\\$'$/;"	v
s:attributes	vim82\indent\haml.vim	/^let s:attributes = '\\%({.\\{-\\}}\\|\\[.\\{-\\}\\]\\)'$/;"	v
s:autoinstall	vim82\autoload\getscript.vim	/^  let s:autoinstall= $HOME."\/".s:dotvim$/;"	v
s:autoinstall	vim82\autoload\getscript.vim	/^  let s:autoinstall= g:GetLatestVimScripts_autoinstalldir"$/;"	v
s:autoinstall	vim82\autoload\getscript.vim	/^let s:autoinstall= ""$/;"	v
s:autoresetoptions	vim82\indent\php.vim	/^    let s:autoresetoptions = 1$/;"	v
s:autoresetoptions	vim82\indent\php.vim	/^let s:autoresetoptions = 0$/;"	v
s:backslash_continuation_regex	vim82\indent\ruby.vim	/^let s:backslash_continuation_regex = '%\\@<!\\\\\\s*$'$/;"	v
s:beflet	vim82\indent\ocaml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|<-\\|=\\|;\\|(\\)\\s*$'$/;"	v
s:beflet	vim82\indent\sml.vim	/^let s:beflet = '^\\s*\\(initializer\\|method\\|try\\)\\|\\(\\<\\(begin\\|do\\|else\\|in\\|then\\|try\\)\\|->\\|;\\)\\s*$'$/;"	v
s:before	vim82\syntax\perl6.vim	/^    let s:before = "syn region p6StringQ matchgroup=p6Quote start=\\"\\\\%("$/;"	v
s:before_keyword	vim82\syntax\perl6.vim	/^let s:before_keyword = " display \\"\\\\%(\\\\k\\\\|\\\\K\\\\@<=[-']\\\\)\\\\@<!\\\\%("$/;"	v
s:bg	vim82\syntax\tmux.vim	/^    let s:bg = (!s:i || s:i == 16 || (s:i > 231 && s:i < 235)) ? 15 : "none"$/;"	v
s:bg_processes	plugins\vimproc\autoload\vimproc.vim	/^let s:bg_processes = {}$/;"	v
s:bgc	vim82\syntax\2html.vim	/^  let s:bgc = ( &background == "dark" ? "#000000" : "#ffffff" )$/;"	v
s:bgc	vim82\syntax\2html.vim	/^let s:bgc = s:HtmlColor(synIDattr(hlID("Normal"), "bg#", s:whatterm))$/;"	v
s:binNMU	vim82\syntax\debchangelog.vim	/^let s:binNMU='binary-only=yes'$/;"	v
s:blockChars	vim82\indent\php.vim	/^let s:blockChars = {'{':1, '[': 1, '(': 1, ')':-1, ']':-1, '}':-1}$/;"	v
s:blockCharsLUT	vim82\indent\php.vim	/^let s:blockCharsLUT = {'{':'{', '}':'{',   '[':'[', ']':'[',   '(':'(', ')':'('}$/;"	v
s:block_continuation_regex	vim82\indent\falcon.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_continuation_regex	vim82\indent\ruby.vim	/^let s:block_continuation_regex = '^\\s*[^])}\\t ].*'.s:block_regex$/;"	v
s:block_end	vim82\indent\sas.vim	/^let s:block_end = '\\v<%(end|endcomp|endlayout|endgraph)\\s*;'$/;"	v
s:block_regex	vim82\indent\falcon.vim	/^let s:block_regex =$/;"	v
s:block_regex	vim82\indent\json.vim	/^let s:block_regex = '\\%({\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:block_regex	vim82\indent\ruby.vim	/^let s:block_regex =$/;"	v
s:block_regex	vim82\indent\typescript.vim	/^let s:block_regex = '\\%([{[]\\)\\s*\\%(|\\%([*@]\\=\\h\\w*,\\=\\s*\\)\\%(,\\s*[*@]\\=\\h\\w*\\)*|\\)\\=' . s:line_term$/;"	v
s:block_scalar_header	vim82\indent\yaml.vim	/^let s:block_scalar_header = '\\v[|>]%([+-]?[1-9]|[1-9]?[+-])?'$/;"	v
s:block_str	vim82\indent\sas.vim	/^let s:block_str = '\\v<%(do>%([^;]+<%(to|over|while)>[^;]+)=|%(compute|define\\s+%(column|footer|header|style|table|tagset|crosstabs|statgraph)|edit|layout|method|select)>[^;]+|begingraph)\\s*;'$/;"	v
s:blockstart	vim82\indent\php.vim	/^let s:blockstart = '\\%(\\%(\\%(}\\s*\\)\\=else\\%(\\s\\+\\)\\=\\)\\=if\\>\\|\\%(}\\s*\\)\\?else\\>\\|do\\>\\|while\\>\\|switch\\>\\|case\\>\\|default\\>\\|for\\%(each\\)\\=\\>\\|declare\\>\\|class\\>\\|trait\\>\\|\\%()\\s*\\)\\=use\\>\\|interface\\>\\|abstract\\>\\|final\\>\\|try\\>\\|\\%(}\\s*\\)\\=catch\\>\\|\\%(}\\s*\\)\\=finally\\>\\)'$/;"	v
s:bmenu_items	vim82\menu.vim	/^let s:bmenu_items = {}$/;"	v
s:bmenu_wait	vim82\menu.vim	/^let s:bmenu_wait = 1$/;"	v
s:both	vim82\syntax\perl6.vim	/^let s:both = [s:infix_a_pattern, s:infix_n_pattern]$/;"	v
s:bracket_continuation_regex	vim82\indent\falcon.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_continuation_regex	vim82\indent\ruby.vim	/^let s:bracket_continuation_regex = '%\\@<!\\%([({[]\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:bracket_pair_pat	vim82\indent\matlab.vim	/^let s:bracket_pair_pat = '\\(\\[\\|{\\)\\|\\(\\]\\|}\\)'$/;"	v
s:bracket_switch_continuation_regex	vim82\indent\ruby.vim	/^let s:bracket_switch_continuation_regex = '^\\([^(]\\+\\zs).\\+\\)\\+'.s:continuation_regex$/;"	v
s:break_id	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:break_id = 13  " breakpoint number is added to this$/;"	v
s:browsefilter	vim82\ftplugin\ant.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\ant.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\aspvbs.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\aspvbs.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.htm*\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\config.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\config.vim	/^let s:browsefilter = "Bourne Shell Files (*.sh)\\t*.sh\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\eruby.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\eruby.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\eruby.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	vim82\ftplugin\haml.vim	/^  let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\haml.vim	/^  let s:browsefilter = substitute(b:browsefilter,'\\cAll Files (\\*\\.\\*)\\t\\*\\.\\*\\n','','') . s:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\haml.vim	/^let s:browsefilter = "All Files (*.*)\\t*.*\\n"$/;"	v
s:browsefilter	vim82\ftplugin\jsp.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\jsp.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\jsp.vim	/^let s:browsefilter = "Java Files (*.java)\\t*.java\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\php.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\php.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\sgml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\sgml.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\svg.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\svg.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\tcsh.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\tcsh.vim	/^let s:browsefilter = "csh Files (*.csh)\\t*.csh\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\xhtml.vim	/^    let s:browsefilter = b:browsefilter . s:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\xhtml.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\xhtml.vim	/^let s:browsefilter = "HTML Files (*.html, *.htm)\\t*.html;*.htm\\n" .$/;"	v
s:browsefilter	vim82\ftplugin\xsd.vim	/^    let s:browsefilter = b:browsefilter$/;"	v
s:browsefilter	vim82\ftplugin\xsd.vim	/^let s:browsefilter = "XML Files (*.xml)\\t*.xml\\n" .$/;"	v
s:buf_nr	plugins\golang\plugin\go\godoc.vim	/^let s:buf_nr = -1$/;"	v
s:bundle	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^let s:bundle = {}$/;"	v
s:bvars	vim82\indent\javascript.vim	/^let s:bvars = {$/;"	v
s:byte_pattern	vim82\syntax\cdrtoc.vim	/^let s:byte_pattern = '\\<\\%([01]\\=\\d\\{1,2}\\|2\\%([0-4]\\d\\|5[0-5]\\)\\)\\>'$/;"	v
s:c	vim82\syntax\chicken.vim	/^let s:c = globpath(&rtp, 'syntax\/cpp.vim', 0, 1)$/;"	v
s:c_flow_indicator	vim82\syntax\yaml.vim	/^let s:c_flow_indicator = '[,[\\]{}]'$/;"	v
s:c_indicator	vim82\syntax\yaml.vim	/^let s:c_indicator      = '[\\-?:,[\\]{}#&*!|>''"%@`]'$/;"	v
s:c_named_tag_handle	vim82\indent\yaml.vim	/^let s:c_named_tag_handle     = '\\v\\!'.s:ns_word_char.'+\\!'$/;"	v
s:c_named_tag_handle	vim82\syntax\yaml.vim	/^let s:c_named_tag_handle     = '!'.s:ns_word_char.'\\+!'$/;"	v
s:c_non_specific_tag	vim82\indent\yaml.vim	/^let s:c_non_specific_tag = '\\v\\!'$/;"	v
s:c_non_specific_tag	vim82\syntax\yaml.vim	/^let s:c_non_specific_tag = '!'$/;"	v
s:c_ns_alias_node	vim82\syntax\yaml.vim	/^let s:c_ns_alias_node      = '\\*'.s:c_ns_anchor_name$/;"	v
s:c_ns_anchor_char	vim82\indent\yaml.vim	/^let s:c_ns_anchor_char = '\\v%([\\n\\r\\uFEFF \\t,[\\]{}]@!\\p)'$/;"	v
s:c_ns_anchor_char	vim82\syntax\yaml.vim	/^let s:c_ns_anchor_char = '\\%([\\n\\r\\uFEFF \\t,[\\]{}]\\@!\\p\\)'$/;"	v
s:c_ns_anchor_char	vim82\syntax\yaml.vim	/^let s:c_ns_anchor_char = s:SimplifyToAssumeAllPrintable(s:c_ns_anchor_char)$/;"	v
s:c_ns_anchor_name	vim82\indent\yaml.vim	/^let s:c_ns_anchor_name = s:c_ns_anchor_char.'+'$/;"	v
s:c_ns_anchor_name	vim82\syntax\yaml.vim	/^let s:c_ns_anchor_name = s:c_ns_anchor_char.'\\+'$/;"	v
s:c_ns_anchor_property	vim82\indent\yaml.vim	/^let s:c_ns_anchor_property =  '\\v\\&'.s:c_ns_anchor_name$/;"	v
s:c_ns_anchor_property	vim82\syntax\yaml.vim	/^let s:c_ns_anchor_property =  '&'.s:c_ns_anchor_name$/;"	v
s:c_ns_shorthand_tag	vim82\indent\yaml.vim	/^let s:c_ns_shorthand_tag = '\\v'.s:c_tag_handle . s:ns_tag_char.'+'$/;"	v
s:c_ns_shorthand_tag	vim82\syntax\yaml.vim	/^let s:c_ns_shorthand_tag = s:c_tag_handle . s:ns_tag_char.'\\+'$/;"	v
s:c_ns_tag_property	vim82\indent\yaml.vim	/^let s:c_ns_tag_property = '\\v'.s:c_verbatim_tag.$/;"	v
s:c_ns_tag_property	vim82\syntax\yaml.vim	/^let s:c_ns_tag_property = s:c_verbatim_tag.$/;"	v
s:c_primary_tag_handle	vim82\indent\yaml.vim	/^let s:c_primary_tag_handle   = '\\v\\!'$/;"	v
s:c_primary_tag_handle	vim82\syntax\yaml.vim	/^let s:c_primary_tag_handle   = '!'$/;"	v
s:c_secondary_tag_handle	vim82\indent\yaml.vim	/^let s:c_secondary_tag_handle = '\\v\\!\\!'$/;"	v
s:c_secondary_tag_handle	vim82\syntax\yaml.vim	/^let s:c_secondary_tag_handle = '!!'$/;"	v
s:c_tag_handle	vim82\indent\yaml.vim	/^let s:c_tag_handle = '\\v%('.s:c_named_tag_handle.$/;"	v
s:c_tag_handle	vim82\syntax\yaml.vim	/^let s:c_tag_handle = '\\%('.s:c_named_tag_handle.$/;"	v
s:c_verbatim_tag	vim82\indent\yaml.vim	/^let s:c_verbatim_tag = '\\v\\!\\<'.s:ns_uri_char.'+\\>'$/;"	v
s:c_verbatim_tag	vim82\syntax\yaml.vim	/^let s:c_verbatim_tag = '!<'.s:ns_uri_char.'\\+>'$/;"	v
s:cache	plugins\golang\autoload\go\env.vim	/^let s:cache = {}$/;"	v
s:cache_classstructures	vim82\autoload\phpcomplete.vim	/^	let s:cache_classstructures = {}$/;"	v
s:cache_list	vim82\autoload\syntaxcomplete.vim	/^let s:cache_list = []$/;"	v
s:cache_name	vim82\autoload\syntaxcomplete.vim	/^let s:cache_name = []$/;"	v
s:cache_tags	vim82\autoload\phpcomplete.vim	/^	let s:cache_tags = {}$/;"	v
s:cache_tags_checksum	vim82\autoload\phpcomplete.vim	/^	let s:cache_tags_checksum = ''$/;"	v
s:cfilemap	vim82\ftplugin\eruby.vim	/^  let s:cfilemap = {}$/;"	v
s:cfilemap	vim82\ftplugin\eruby.vim	/^  let s:cfilemap.rhs = "substitute(&l:inex =~# '\\\\<v:fname\\\\>' && len(expand('<cfile>')) ? eval(substitute(&l:inex, '\\\\<v:fname\\\\>', '\\\\=string(expand(\\"<cfile>\\"))', 'g')) : '', '^$', \\"\\\\022\\\\006\\",'')"$/;"	v
s:cfilemap	vim82\ftplugin\eruby.vim	/^let s:cfilemap = v:version >= 704 ? maparg('<Plug><cfile>', 'c', 0, 1) : {}$/;"	v
s:char2nr_utf8	plugins\autofmt\autoload\autofmt\unicode.vim	/^  let s:char2nr_utf8 = function('char2nr')$/;"	v
s:class	vim82\ftplugin\php.vim	/^let s:class = '\\(abstract\\s\\+\\|final\\s\\+\\)*class'$/;"	v
s:clojure_syntax_keywords	vim82\syntax\clojure.vim	/^let s:clojure_syntax_keywords = {$/;"	v
s:cmd	plugins\vimproc\autoload\vimproc\cmd.vim	/^let s:cmd = {}$/;"	v
s:col	vim82\syntax\2html.vim	/^	let s:col = s:col + 1$/;"	v
s:col	vim82\syntax\2html.vim	/^    let s:col = 1$/;"	v
s:cols	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:cols = split("OP CL CP QU GL NS EX SY IS PR PO NU AL HL ID IN HY BA BB B2 ZW CM WJ H2 H3 JL JV JT RI EB EM ZWJ")$/;"	v
s:comma_first	vim82\indent\typescript.vim	/^let s:comma_first = '^\\s*,'$/;"	v
s:comma_last	vim82\indent\typescript.vim	/^let s:comma_last = ',\\s*$'$/;"	v
s:commands	vim82\syntax\wget.vim	/^let s:commands = map([$/;"	v
s:comment_rx	vim82\indent\make.vim	/^let s:comment_rx = '^\\s*#'$/;"	v
s:commonModules	vim82\autoload\haskellcomplete.vim	/^let s:commonModules =$/;"	v
s:compat	plugins\autofmt\autoload\autofmt\japanese.vim	/^let s:compat = autofmt#compat#import()$/;"	v
s:compat	plugins\autofmt\autoload\autofmt\uax14.vim	/^let s:compat = autofmt#compat#import()$/;"	v
s:concealends	vim82\syntax\markdown.vim	/^  let s:concealends = ' concealends'$/;"	v
s:concealends	vim82\syntax\markdown.vim	/^let s:concealends = ''$/;"	v
s:concealinfo	vim82\syntax\2html.vim	/^	let s:concealinfo = synconcealed(s:lnum, s:col)$/;"	v
s:concealinfo	vim82\syntax\2html.vim	/^    let s:concealinfo = [0, '']$/;"	v
s:conditionalEnd	vim82\ftplugin\matlab.vim	/^ let s:conditionalEnd = '\\%(([^()]*\\)\\@!\\<end\\>\\%([^()]*)\\)\\@!'$/;"	v
s:conditional_directive_rx	vim82\indent\make.vim	/^let s:conditional_directive_rx = '^ *\\%(ifn\\=\\%(eq\\|def\\)\\|else\\)\\>'$/;"	v
s:contained	vim82\syntax\zsh.vim	/^let s:contained=s:ContainedGroup()$/;"	v
s:context_include	vim82\syntax\context.vim	/^  let s:context_include = filter($/;"	v
s:context_include	vim82\syntax\context.vim	/^let s:context_include = get(b:, 'context_include', get(g:, 'context_include', {'xml': 'XML'}))$/;"	v
s:context_regex	vim82\ftplugin\context.vim	/^let s:context_regex = {$/;"	v
s:continuable_regex	vim82\indent\ruby.vim	/^let s:continuable_regex =$/;"	v
s:continuation	vim82\indent\javascript.vim	/^let s:continuation = get(g:,'javascript_continuation',$/;"	v
s:continuation_regex	vim82\indent\falcon.vim	/^let s:continuation_regex =$/;"	v
s:continuation_regex	vim82\indent\ruby.vim	/^let s:continuation_regex =$/;"	v
s:continuation_regex	vim82\indent\typescript.vim	/^let s:continuation_regex = '\\%([\\\\*+\/.:]\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\|[^=]=[^=].*,\\)' . s:line_term$/;"	v
s:continuation_rx	vim82\indent\make.vim	/^let s:continuation_rx = '\\\\$'$/;"	v
s:continued_rule_rx	vim82\indent\make.vim	/^let s:continued_rule_rx = '^[^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:countonly	vim82\indent\html.vim	/^let s:countonly = 0$/;"	v
s:cpo	vim82\ftplugin\scheme.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	vim82\syntax\debchangelog.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	vim82\syntax\debsources.vim	/^let s:cpo = &cpo$/;"	v
s:cpo	vim82\syntax\scheme.vim	/^let s:cpo = &cpo$/;"	v
s:cpo_sav	vim82\autoload\tohtml.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	vim82\indent\eruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	vim82\syntax\2html.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	vim82\syntax\clojure.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	vim82\syntax\mp.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_sav	vim82\syntax\ruby.vim	/^let s:cpo_sav = &cpo$/;"	v
s:cpo_save	plugins\autofmt\autoload\autofmt\compat.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugins\autofmt\autoload\autofmt\japanese.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugins\autofmt\autoload\autofmt\uax14.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\autoload\ccomplete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\autoload\dist\ft.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\autoload\syntaxcomplete.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\ant.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\cucumber.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\eruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\fortran_g77.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\gcc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\ghc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\haml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\mcs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\ocaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\onsgmls.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\php.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\rake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\rspec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\rubyunit.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\rustc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\sass.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\se.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\splint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\stack.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\xmllint.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\compiler\xmlwf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\filetype.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\abap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\abaqus.vim	/^let s:cpo_save = &cpoptions$/;"	v
s:cpo_save	vim82\ftplugin\alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\automake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\c.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\cfg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\changelog.vim	/^  let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\clojure.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\cmake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\cobol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\context.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\dosbatch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\dosini.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\dtrace.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\eiffel.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\elm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\falcon.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\groovy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\hamster.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\haskell.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\hog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\hostsaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\ishd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\kwt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\lua.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\m4.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\mailcap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\man.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\masm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\mf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\mp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\msmessages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\neomuttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\postscr.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\procmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\prolog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\r.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\racc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\registry.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\rhelp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\rnoweb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\rrst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\spec.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\sshconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\tcl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\treetop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\udevrules.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\vb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\verilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\vhdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\vim.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\xdefaults.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\xf86conf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\zimbu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\ftplugin\zsh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\dosbatch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\dtd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\falcon.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\gitolite.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\hog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\json.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\perl6.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\r.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\ruby.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\sas.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\sdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\sh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\systemverilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\tex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\verilog.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\indent\zimbu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\menu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\optwin.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\plugin\matchparen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\scripts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\synmenu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\8th.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\a2ps.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\aap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\abel.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\alsaconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\aptconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\arch.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\art.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\asm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\asn.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\autodoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\autohotkey.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\avra.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\awk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\ayacc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\basic.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\bdf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\bib.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\blank.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\c.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cabal.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\calendar.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cdrdaoconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cdrtoc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cf.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	vim82\syntax\chordpro.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\clean.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\clipper.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cmod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cmusrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\context.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\crm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\csc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\css.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cupl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cvsrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\cweb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\d.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\dart.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\debcontrol.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\debcopyright.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\denyhosts.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\desktop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\dictconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\dictdconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\dircolors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\dnsmasq.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\doxygen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\elinks.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\erlang.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\eterm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\fasm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\fetchmail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\forth.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\fortran.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\framescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\fstab.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\gdb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\gitolite.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\gp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\gpg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\groovy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\group.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\grub.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\gsp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\hb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\help.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\hollywood.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\hostconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\idl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\indent.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\initex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\ist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\jam.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\java.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\javacc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\javascript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\kconfig.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\ld.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\ldapconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\lftp.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\libao.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\limits.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\litestep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\loginaccess.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\logindefs.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\logtalk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\lout.vim	/^let s:cpo_save=&cpo$/;"	v
s:cpo_save	vim82\syntax\lpc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\lua.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\lynx.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\mail.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\mailaliases.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\make.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\manconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\masm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\meson.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\messages.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\mix.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\mma.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\modconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\monk.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\mplayerconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\mrxvtrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\msidl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\muttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\nanorc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\natural.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\neomuttrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\netrc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\ninja.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\nroff.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\nsis.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\objc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\opl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\pamconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\passwd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\perl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\php.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\pike.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\pinfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\plaintex.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\pod.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\privoxy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\progress.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\protocols.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\python.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\quake.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\racc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\raml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\readline.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\reva.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\rmd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\rnc.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\rpl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\rst.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sas.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\screen.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sendpr.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sensors.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\services.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\setserial.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sieve.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sisu.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\slpconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\slpreg.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\slpspi.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\smil.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\snnspat.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\spup.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\st.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sudoers.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\synload.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\sysctl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\tasm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\terminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\tidy.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\treetop.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\tsalt.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\tt2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\typescript.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\typescriptcommon.vim	/^  let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\typescriptreact.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\udevconf.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\udevperm.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\udevrules.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\updatedb.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\vhdl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\viminfo.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\vroom.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\wast.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\wget.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\xbl.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\xinetd.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\xmodmap.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\xpm2.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\yaml.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	vim82\syntax\zsh.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpoptions	vim82\ftplugin\ada.vim	/^let s:cpoptions = &cpoptions$/;"	v
s:cposet	vim82\compiler\fortran_F.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	vim82\compiler\fortran_cv.vim	/^let s:cposet = &cpoptions$/;"	v
s:cposet	vim82\compiler\fortran_elf90.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	vim82\compiler\fortran_lf95.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	vim82\ftplugin\fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	vim82\ftplugin\ocaml.vim	/^let s:cposet=&cpoptions$/;"	v
s:cposet	vim82\indent\fortran.vim	/^let s:cposet=&cpoptions$/;"	v
s:ctagmap	vim82\ftplugin\eruby.vim	/^  let s:ctagmap = {}$/;"	v
s:ctagmap	vim82\ftplugin\eruby.vim	/^let s:ctagmap = v:version >= 704 ? maparg('<Plug><ctag>', 'c', 0, 1) : {}$/;"	v
s:cterm_color	vim82\syntax\2html.vim	/^    let s:cterm_color = {$/;"	v
s:cur_menu_char	vim82\makemenu.vim	/^let s:cur_menu_char = ""$/;"	v
s:cur_menu_item	vim82\makemenu.vim	/^let s:cur_menu_item = 0$/;"	v
s:cur_menu_name	vim82\makemenu.vim	/^let s:cur_menu_name = ""$/;"	v
s:cur_menu_nr	vim82\makemenu.vim	/^let s:cur_menu_nr = 0$/;"	v
s:current_syntax	vim82\syntax\2html.vim	/^  let s:current_syntax = 'none'$/;"	v
s:current_syntax	vim82\syntax\2html.vim	/^  let s:current_syntax = b:current_syntax$/;"	v
s:current_syntax	vim82\syntax\2html.vim	/^  let s:current_syntax = w:current_syntax$/;"	v
s:debug	plugins\kaoriya\plugin\autodate.vim	/^let s:debug = 0$/;"	v
s:dedent_pat	vim82\indent\matlab.vim	/^let s:dedent_pat = '\\C^\\s*\\zs\\<\\%(end\\|else\\|elseif\\|catch\\|\\(case\\|otherwise\\|function\\)\\)\\>'$/;"	v
s:defArgMatcher	vim82\indent\scala.vim	/^let s:defArgMatcher = '\\%((\\_.\\{-})\\)'$/;"	v
s:defMatcher	vim82\indent\scala.vim	/^let s:defMatcher = '\\%(\\%(private\\|protected\\)\\%(\\[[^\\]]*\\]\\)\\?\\s\\+\\|abstract\\s\\+\\|override\\s\\+\\)*\\<def\\>'$/;"	v
s:defaultORcase	vim82\indent\php.vim	/^let s:defaultORcase = '^\\s*\\%(default\\|case\\).*:'$/;"	v
s:delimitMate_extra_excluded_regions	vim82\ftplugin\rust.vim	/^	let s:delimitMate_extra_excluded_regions = ',rustLifetimeCandidate,rustGenericLifetimeCandidate'$/;"	v
s:delimiter	vim82\syntax\ruby.vim	/^    let s:delimiter = '\\' . s:delimiter$/;"	v
s:delims	vim82\syntax\perl6.vim	/^let s:delims = [$/;"	v
s:desktop_enable_kde	vim82\syntax\desktop.vim	/^  let s:desktop_enable_kde = v:false$/;"	v
s:desktop_enable_kde	vim82\syntax\desktop.vim	/^  let s:desktop_enable_kde = v:true$/;"	v
s:desktop_enable_nonstd	vim82\syntax\desktop.vim	/^  let s:desktop_enable_nonstd = v:false$/;"	v
s:desktop_enable_nonstd	vim82\syntax\desktop.vim	/^  let s:desktop_enable_nonstd = v:true$/;"	v
s:did_ft	vim82\syntax\syntax.vim	/^  let s:did_ft = 0$/;"	v
s:did_ft	vim82\syntax\syntax.vim	/^  let s:did_ft = 1$/;"	v
s:did_function_definitions	vim82\ftplugin\erlang.vim	/^	let s:did_function_definitions = 1$/;"	v
s:did_setup_color_schemes	vim82\menu.vim	/^let s:did_setup_color_schemes = 0$/;"	v
s:did_setup_compilers	vim82\menu.vim	/^let s:did_setup_compilers = 0$/;"	v
s:did_setup_keymaps	vim82\menu.vim	/^  let s:did_setup_keymaps = 0$/;"	v
s:diff_id	vim82\syntax\2html.vim	/^	let s:diff_id = diff_hlID(s:lnum, s:col)$/;"	v
s:diff_id	vim82\syntax\2html.vim	/^    let s:diff_id = 0$/;"	v
s:diff_mode	vim82\syntax\2html.vim	/^let s:diff_mode = &diff$/;"	v
s:diffattr	vim82\syntax\2html.vim	/^    let s:diffattr = diff_hlID(s:lnum, 1)$/;"	v
s:difffillchar	vim82\syntax\2html.vim	/^  let s:difffillchar = '-'$/;"	v
s:difffillchar	vim82\syntax\2html.vim	/^let s:difffillchar = &fillchars[matchend(&fillchars, 'diff:')]$/;"	v
s:diffstylelist	vim82\syntax\2html.vim	/^let s:diffstylelist = {$/;"	v
s:dir	vim82\ftplugin\clojure.vim	/^		let s:dir = fnameescape(s:dir)$/;"	v
s:dir	vim82\ftplugin\clojure.vim	/^		let s:dir = substitute(s:dir, '\\ ', '\\\\ ', 'g')$/;"	v
s:dir	vim82\ftplugin\clojure.vim	/^		let s:dir = substitute(s:dir, '\\', '\\\\\\\\', 'g')$/;"	v
s:dll_handle	plugins\vimproc\autoload\vimproc.vim	/^  let s:dll_handle = s:vp_dlopen(g:vimproc#dll_path)$/;"	v
s:done_include	vim82\syntax\markdown.vim	/^    let s:done_include[matchstr(s:type,'[^.]*')] = 1$/;"	v
s:done_include	vim82\syntax\markdown.vim	/^  let s:done_include = {}$/;"	v
s:done_include	vim82\syntax\markdown.vim	/^  let s:done_include[matchstr(s:type,'[^.]*')] = 1$/;"	v
s:done_include	vim82\syntax\markdown.vim	/^let s:done_include = {}$/;"	v
s:dot_continuation_regex	vim82\indent\ruby.vim	/^let s:dot_continuation_regex = '%\\@<!\\.\\s*\\%(#.*\\)\\=$'$/;"	v
s:dotvim	vim82\autoload\getscript.vim	/^  let s:dotvim= ".vim"$/;"	v
s:dotvim	vim82\autoload\getscript.vim	/^  let s:dotvim= "vimfiles"$/;"	v
s:doubletable	vim82\tools\unicode.vim	/^let s:doubletable = []$/;"	v
s:dtd_cpo_save	vim82\syntax\dtd.vim	/^let s:dtd_cpo_save = &cpo$/;"	v
s:ed	vim82\syntax\tt2.vim	/^        let s:ed = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:ei_sav	vim82\syntax\2html.vim	/^let s:ei_sav = &eventignore$/;"	v
s:enc_cp932	plugins\kaoriya\encode_japan.vim	/^let s:enc_cp932 = 'cp932'$/;"	v
s:enc_eucjp	plugins\kaoriya\encode_japan.vim	/^let s:enc_eucjp = 'euc-jp'$/;"	v
s:enc_jisx	plugins\kaoriya\encode_japan.vim	/^let s:enc_jisx = 'iso-2022-jp'$/;"	v
s:enc_utf8	plugins\kaoriya\encode_japan.vim	/^let s:enc_utf8 = 'utf-8'$/;"	v
s:encoding	vim82\keymap\croatian.vim	/^	let s:encoding = 'cp1250'$/;"	v
s:encoding	vim82\keymap\croatian.vim	/^	let s:encoding = 'iso-8859-2'$/;"	v
s:encoding	vim82\keymap\croatian.vim	/^let s:encoding = &enc$/;"	v
s:end	vim82\indent\matlab.vim	/^let s:end = '\\<end\\>\\%([^({]*[)}]\\)\\@!' " Array indexing heuristic$/;"	v
s:end	vim82\syntax\2html.vim	/^    let s:end = line("$")$/;"	v
s:end	vim82\syntax\2html.vim	/^  let s:end = html_end_line$/;"	v
s:end	vim82\syntax\2html.vim	/^  let s:end = line("$")$/;"	v
s:end	vim82\syntax\2html.vim	/^  let s:end = line('$')$/;"	v
s:end	vim82\syntax\2html.vim	/^let s:end=line('$')$/;"	v
s:end_conditional_directive_rx	vim82\indent\make.vim	/^let s:end_conditional_directive_rx = '^\\s*\\%(else\\|endif\\)\\>'$/;"	v
s:end_end_regex	vim82\autoload\rubycomplete.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_end_regex	vim82\indent\ruby.vim	/^let s:end_end_regex = '\\%(^\\|[^.:@$]\\)\\@<=\\<end:\\@!\\>'$/;"	v
s:end_middle_regex	vim82\autoload\rubycomplete.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_middle_regex	vim82\indent\ruby.vim	/^let s:end_middle_regex = '\\<\\%(ensure\\|else\\|\\%(\\%(^\\|;\\)\\s*\\)\\@<=\\<rescue:\\@!\\>\\|when\\|elsif\\):\\@!\\>'$/;"	v
s:end_skip_expr	vim82\indent\ruby.vim	/^let s:end_skip_expr = s:skip_expr .$/;"	v
s:end_start_regex	vim82\autoload\rubycomplete.vim	/^let s:end_start_regex =$/;"	v
s:end_start_regex	vim82\indent\ruby.vim	/^let s:end_start_regex =$/;"	v
s:endline	vim82\indent\php.vim	/^let s:endline = '\\s*\\%(\/\/.*\\|#.*\\|\/\\*.*\\*\/\\s*\\)\\=$'$/;"	v
s:endtags	vim82\indent\html.vim	/^let s:endtags = [0,0,0,0,0,0,0]   " long enough for the highest index$/;"	v
s:enumeration_pattern	vim82\indent\rst.vim	/^let s:enumeration_pattern = '^\\s*\\%(\\d\\+\\|#\\)\\.\\s\\+'$/;"	v
s:eol	vim82\indent\mp.vim	/^let s:eol = '\\s*\\%($\\|%\\)'$/;"	v
s:erlang_fun_begin	vim82\ftplugin\erlang.vim	/^let s:erlang_fun_begin = '^\\a\\w*(.*$'$/;"	v
s:erlang_fun_end	vim82\ftplugin\erlang.vim	/^let s:erlang_fun_end   = '^[^%]*\\.\\s*\\(%.*\\)\\?$'$/;"	v
s:err	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^    let s:err = 'Cannot debug, +channel feature is not supported'$/;"	v
s:err	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^    let s:err = 'Cannot debug, missing prompt buffer support'$/;"	v
s:escapeDebugStops	vim82\indent\php.vim	/^let s:escapeDebugStops = 0$/;"	v
s:evalFromBalloonExpr	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:evalFromBalloonExpr = 0$/;"	v
s:expandedtab	vim82\syntax\2html.vim	/^	    let s:expandedtab = substitute(s:expandedtab, '\\t', repeat(' ', s:i), '')$/;"	v
s:expandedtab	vim82\syntax\2html.vim	/^	let s:expandedtab = s:concealinfo[1]$/;"	v
s:expandedtab	vim82\syntax\2html.vim	/^	let s:expandedtab = strpart(s:line, s:startcol - 1, s:col - s:startcol)$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = "." . strpart(s:lang, 0, 2)$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = ".bg"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = ".cs"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = ".de"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = ".nl"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = ".pl"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = ".sk"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^      let s:ext = ".sr"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".cs.cp1250"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".el"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".el.cp737"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".el.utf-8"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".hr.cp1250"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".hu.cp1250"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".ja.euc"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".ja.sjis"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".ko.euc"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".pl.cp1250"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".sk.cp1250"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".sr.cp1250"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".tr.iso9"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".zh.big5"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".zh.euc"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".zh_cn"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = ".zh_tw"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = '.hr'$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = '.hu'$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = '.ru'$/;"	v
s:ext	vim82\tutor\tutor.vim	/^    let s:ext = '.ru.cp1251'$/;"	v
s:ext	vim82\tutor\tutor.vim	/^  let s:ext .= '.utf-8'$/;"	v
s:ext	vim82\tutor\tutor.vim	/^  let s:ext = ""$/;"	v
s:ext	vim82\tutor\tutor.vim	/^  let s:ext = "." . $xx$/;"	v
s:ext	vim82\tutor\tutor.vim	/^  let s:ext = ".de"$/;"	v
s:ext	vim82\tutor\tutor.vim	/^let s:ext = ""$/;"	v
s:extend	vim82\indent\sass.vim	/^let s:extend = '^\\s*\\%(@extend\\|@include\\|+\\)'$/;"	v
s:extfname	vim82\syntax\tex.vim	/^let s:extfname=expand("%:e")$/;"	v
s:extra_space	vim82\syntax\2html.vim	/^	    let s:extra_space = 0$/;"	v
s:extra_space	vim82\syntax\2html.vim	/^	    let s:extra_space = s:foldcolumn - s:allfolds[0].level$/;"	v
s:extras	plugins\golang\plugin\go\extra.vim	/^let s:extras = [$/;"	v
s:f	vim82\spell\cleanadd.vim	/^      let s:f = escape(s:fname, ' \\|<')$/;"	v
s:f	vim82\spell\cleanadd.vim	/^      let s:f = fnameescape(s:fname)$/;"	v
s:falcon_deindent_keywords	vim82\indent\falcon.vim	/^let s:falcon_deindent_keywords = '^\\s*\\(case\\|catch\\|default\\|elif\\|else\\|end\\)'$/;"	v
s:falcon_indent_keywords	vim82\indent\falcon.vim	/^let s:falcon_indent_keywords = '^\\s*\\(case\\|catch\\|class\\|enum\\|default\\|elif\\|else' .$/;"	v
s:ff	vim82\syntax\r.vim	/^  let s:ff = split(substitute(globpath(&rtp, "R\/functions.vim"), "functions.vim", "", "g"), "\\n")$/;"	v
s:fgc	vim82\syntax\2html.vim	/^  let s:fgc = ( &background == "dark" ? "#ffffff" : "#000000" )$/;"	v
s:fgc	vim82\syntax\2html.vim	/^let s:fgc = s:HtmlColor(synIDattr(hlID("Normal"), "fg#", s:whatterm))$/;"	v
s:file_name	vim82\indent\erlang.vim	/^let s:file_name = ''$/;"	v
s:filler	vim82\syntax\2html.vim	/^  let s:filler = diff_filler(s:lnum)$/;"	v
s:firstfold	vim82\syntax\2html.vim	/^	  let s:firstfold = 0$/;"	v
s:firstfold	vim82\syntax\2html.vim	/^      let s:firstfold = 1$/;"	v
s:fname	vim82\syntax\colortest.vim	/^    let s:fname = escape(s:fname, ' \\|')$/;"	v
s:fname	vim82\syntax\colortest.vim	/^    let s:fname = fnameescape(s:fname)$/;"	v
s:fname	vim82\syntax\colortest.vim	/^  let s:fname = expand('<sfile>')$/;"	v
s:fname	vim82\syntax\synload.vim	/^  let s:fname = expand(mysyntaxfile)$/;"	v
s:foldId	vim82\syntax\2html.vim	/^	let s:foldId = s:foldId + 1$/;"	v
s:foldId	vim82\syntax\2html.vim	/^let s:foldId = 0$/;"	v
s:fold_arg	vim82\syntax\ruby.vim	/^let s:fold_arg	    = s:foldable('string')		? ' fold'   : ''$/;"	v
s:foldable_groups	vim82\syntax\ruby.vim	/^let s:foldable_groups = split($/;"	v
s:foldcolumn	vim82\syntax\2html.vim	/^	let s:foldcolumn = afold.level+1$/;"	v
s:foldcolumn	vim82\syntax\2html.vim	/^  let s:foldcolumn = &foldcolumn$/;"	v
s:folded_assignment_rx	vim82\indent\make.vim	/^let s:folded_assignment_rx = '^\\s*\\h\\w*\\s*[+?]\\=='$/;"	v
s:foldfillchar	vim82\syntax\2html.vim	/^    let s:foldfillchar = '-'$/;"	v
s:foldfillchar	vim82\syntax\2html.vim	/^  let s:foldfillchar = &fillchars[matchend(&fillchars, 'fold:')]$/;"	v
s:foldstack	vim82\syntax\2html.vim	/^	let s:foldstack[0].id = s:foldId$/;"	v
s:foldstack	vim82\syntax\2html.vim	/^let s:foldstack = []$/;"	v
s:foldtext_save	vim82\syntax\2html.vim	/^  let s:foldtext_save = &foldtext$/;"	v
s:ft	vim82\syntax\c.vim	/^let s:ft = matchstr(&ft, '^\\([^.]\\)\\+')$/;"	v
s:ft	vim82\syntax\rmd.vim	/^    let s:ft = s:type$/;"	v
s:ft	vim82\syntax\rmd.vim	/^    let s:ft = substitute(s:type, '.*=', '', '')$/;"	v
s:ft_rules_udev_rules_pattern	vim82\autoload\dist\ft.vim	/^let s:ft_rules_udev_rules_pattern = '^\\s*\\cudev_rules\\s*=\\s*"\\([^"]\\{-1,}\\)\/*".*'$/;"	v
s:ftplugin_sql_objects	vim82\ftplugin\sql.vim	/^let s:ftplugin_sql_objects =$/;"	v
s:funcNameMatcher	vim82\indent\scala.vim	/^let s:funcNameMatcher = '\\w\\+'$/;"	v
s:function	vim82\ftplugin\php.vim	/^let s:function = '\\(abstract\\s\\+\\|final\\s\\+\\|private\\s\\+\\|protected\\s\\+\\|public\\s\\+\\|static\\s\\+\\)*function'$/;"	v
s:functionDecl	vim82\indent\php.vim	/^let s:functionDecl = s:functionDeclPrefix.'.*'$/;"	v
s:functionDeclPrefix	vim82\indent\php.vim	/^let s:functionDeclPrefix = '\\<function\\>\\%(\\s\\+&\\='.s:PHP_validVariable.'\\)\\=\\s*('$/;"	v
s:goarch	plugins\golang\autoload\go\complete.vim	/^    let s:goarch = '*'$/;"	v
s:goarch	plugins\golang\autoload\go\complete.vim	/^    let s:goarch = g:golang_goarch$/;"	v
s:goarch	plugins\golang\autoload\go\complete.vim	/^let s:goarch = $GOARCH$/;"	v
s:goos	plugins\golang\autoload\go\complete.vim	/^    let s:goos = '*'$/;"	v
s:goos	plugins\golang\autoload\go\complete.vim	/^    let s:goos = 'darwin'$/;"	v
s:goos	plugins\golang\autoload\go\complete.vim	/^    let s:goos = 'windows'$/;"	v
s:goos	plugins\golang\autoload\go\complete.vim	/^    let s:goos = g:golang_goos$/;"	v
s:goos	plugins\golang\autoload\go\complete.vim	/^let s:goos = $GOOS$/;"	v
s:got_fmt_error	vim82\autoload\rustfmt.vim	/^let s:got_fmt_error = 0$/;"	v
s:group	vim82\syntax\ruby.vim	/^  let s:group = 'ruby' . s:names[s:delimiter] . 'Escape'$/;"	v
s:hd	vim82\syntax\rhelp.vim	/^  let s:hd = 0$/;"	v
s:hd	vim82\syntax\rhelp.vim	/^  let s:hd = 1$/;"	v
s:hidden	vim82\syntax\hitest.vim	/^let s:hidden      = &hidden$/;"	v
s:hog_keyword_match	vim82\ftplugin\hog.vim	/^let s:hog_keyword_match = '\\c^\\s*\\<\\(preprocessor\\\\|config\\\\|output\\\\|include\\\\|ipvar\\\\|portvar\\\\|var\\\\|dynamicpreprocessor\\\\|' . $/;"	v
s:html5	vim82\syntax\2html.vim	/^  let s:html5 = 0$/;"	v
s:html5	vim82\syntax\2html.vim	/^  let s:html5 = 1$/;"	v
s:htmlfont	vim82\syntax\2html.vim	/^    let s:htmlfont = "'". g:html_font . "', monospace"$/;"	v
s:htmlfont	vim82\syntax\2html.vim	/^    let s:htmlfont = "'". join(g:html_font,"','") . "', monospace"$/;"	v
s:htmlfont	vim82\syntax\2html.vim	/^  let s:htmlfont = "monospace"$/;"	v
s:i	vim82\ftplugin\ocaml.vim	/^  let s:i = g:omlet_indent_struct$/;"	v
s:i	vim82\ftplugin\ocaml.vim	/^  let s:i = matchstr(s:m,'\\d\\+')$/;"	v
s:i	vim82\ftplugin\ocaml.vim	/^  let s:i = s:idef$/;"	v
s:i	vim82\macros\less.vim	/^    let s:i = s:i + 1$/;"	v
s:i	vim82\macros\less.vim	/^  let s:i = 0$/;"	v
s:i	vim82\syntax\2html.vim	/^	      let s:i = s:tablist[0]$/;"	v
s:i	vim82\syntax\2html.vim	/^	      let s:i = s:tablist[s:tabidx] - (s:vcol - s:tabwidth)$/;"	v
s:i	vim82\syntax\help.vim	/^let s:i = match(expand("%"), '\\.\\a\\ax$')$/;"	v
s:id	vim82\syntax\2html.vim	/^	let s:id = s:CONCEAL_ID$/;"	v
s:id	vim82\syntax\2html.vim	/^	let s:id = synID(s:lnum, s:col, 1)$/;"	v
s:id	vim82\syntax\2html.vim	/^	let s:id = synIDtrans(s:id)$/;"	v
s:id	vim82\syntax\2html.vim	/^  let s:id = s:FOLD_C_ID$/;"	v
s:idef	vim82\ftplugin\ocaml.vim	/^  let s:idef = 2$/;"	v
s:idef	vim82\ftplugin\ocaml.vim	/^  let s:idef = g:omlet_indent$/;"	v
s:idef	vim82\ftplugin\ocaml.vim	/^  let s:idef = matchstr(s:m,'\\d\\+')$/;"	v
s:idx	vim82\optwin.vim	/^let s:idx = 1$/;"	v
s:idx	vim82\syntax\2html.vim	/^	    let s:idx = stridx(s:expandedtab, "\\t")$/;"	v
s:idx	vim82\syntax\2html.vim	/^	  let s:idx = stridx(s:expandedtab, "\\t")$/;"	v
s:ieonly	vim82\syntax\2html.vim	/^      let s:ieonly = [$/;"	v
s:ieonly	vim82\syntax\2html.vim	/^  let s:ieonly = []$/;"	v
s:ignoreEvalError	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:ignoreEvalError = 0$/;"	v
s:in_comm	vim82\indent\javascript.vim	/^let s:in_comm = s:skip_expr[:-14] . "'comment\\\\|doc'"$/;"	v
s:include	vim82\ftplugin\eruby.vim	/^let s:include = &l:include$/;"	v
s:indent_access_modifier_regex	vim82\indent\ruby.vim	/^let s:indent_access_modifier_regex = '\\C^\\s*\\%(protected\\|private\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:indent_tags	vim82\indent\html.vim	/^let s:indent_tags = {}$/;"	v
s:infix	vim82\syntax\perl6.vim	/^let s:infix = "!\\\\?\\\\%(" . s:infix . "\\\\)"$/;"	v
s:infix	vim82\syntax\perl6.vim	/^let s:infix = join(s:both, "\\\\|")$/;"	v
s:infix_a	vim82\syntax\perl6.vim	/^let s:infix_a = [$/;"	v
s:infix_a_long	vim82\syntax\perl6.vim	/^let s:infix_a_long = join(s:infix_a, " ")$/;"	v
s:infix_a_pattern	vim82\syntax\perl6.vim	/^let s:infix_a_pattern = join(s:infix_a_words, "\\\\|")$/;"	v
s:infix_a_words	vim82\syntax\perl6.vim	/^let s:infix_a_words = split(s:infix_a_long)$/;"	v
s:infix_assoc	vim82\syntax\perl6.vim	/^let s:infix_assoc = "!\\\\?\\\\%(" . s:infix_a_pattern . "\\\\)"$/;"	v
s:infix_n	vim82\syntax\perl6.vim	/^let s:infix_n = "but does <=> leg cmp \\\\.\\\\. \\\\.\\\\.\\\\^\\\\^ \\\\^\\\\.\\\\. \\\\^\\\\.\\\\.\\\\^"$/;"	v
s:infix_n_pattern	vim82\syntax\perl6.vim	/^let s:infix_n_pattern = join(s:infix_n_words, "\\\\|")$/;"	v
s:infix_n_words	vim82\syntax\perl6.vim	/^let s:infix_n_words = split(s:infix_n)$/;"	v
s:inheritance_dent	vim82\indent\eiffel.vim	/^let s:inheritance_dent = '\\s*\\(redefine\\|rename\\|export\\)\\>'$/;"	v
s:init	plugins\kaoriya\plugin\hz_ja.vim	/^let s:init = 0$/;"	v
s:interface	vim82\ftplugin\php.vim	/^let s:interface = 'interface'$/;"	v
s:is_case_tolerant	plugins\vimproc\autoload\vimproc\filepath.vim	/^let s:is_case_tolerant = filereadable(expand('<sfile>:r') . '.VIM')$/;"	v
s:is_cygwin	plugins\vimproc\autoload\vimproc\filepath.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_cygwin	plugins\vimproc\autoload\vimproc\util.vim	/^let s:is_cygwin = has('win32unix')$/;"	v
s:is_mac	plugins\vimproc\autoload\vimproc\filepath.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_mac	plugins\vimproc\autoload\vimproc\util.vim	/^let s:is_mac = !s:is_windows && !s:is_cygwin$/;"	v
s:is_windows	plugins\vimproc\autoload\vimproc\filepath.vim	/^let s:is_windows = has('win16') || has('win32') || has('win64')$/;"	v
s:is_windows	plugins\vimproc\autoload\vimproc\util.vim	/^let s:is_windows = has('win32')$/;"	v
s:iskKeep	vim82\syntax\vim.vim	/^ let s:iskKeep= &isk$/;"	v
s:itemization_pattern	vim82\indent\rst.vim	/^let s:itemization_pattern = '^\\s*[-*+]\\s'$/;"	v
s:js_keywords	vim82\indent\typescript.vim	/^let s:js_keywords = '^\\s*\\(break\\|case\\|catch\\|continue\\|debugger\\|default\\|delete\\|do\\|else\\|finally\\|for\\|function\\|if\\|in\\|instanceof\\|new\\|return\\|switch\\|this\\|throw\\|try\\|typeof\\|var\\|void\\|while\\|with\\)'$/;"	v
s:just_inserted_rule_rx	vim82\indent\make.vim	/^let s:just_inserted_rule_rx = '^\\s*[^#:]\\+:\\{1,2}$'$/;"	v
s:keepcpo	vim82\autoload\ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\context.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\contextcomplete.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\getscript.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\autoload\netrw.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\netrwFileHandlers.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\sqlcomplete.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\tar.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\vimball.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\autoload\xmlformat.vim	/^let s:keepcpo       = &cpo$/;"	v
s:keepcpo	vim82\autoload\zip.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\context.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\cs.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\decada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\g95.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\gfortran.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\gnat.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\hp_acc.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\ifort.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\intel.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\irix5_c.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\irix5_cpp.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\mips_c.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\mipspro_c89.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\mipspro_cpp.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\msbuild.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\tex.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\compiler\xbuild.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\ftplugin\cs.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\ftplugin\cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\ftplugin\meson.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\ftplugin\occam.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\ftplugin\php.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\ftplugin\pyrex.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\ftplugin\python.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\cmake.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\context.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\css.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\eiffel.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\java.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\matlab.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\indent\meson.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\mp.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\occam.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\python.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\scala.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\sqlanywhere.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\vim.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\xinetd.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\indent\xml.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_af_af.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_ca_es.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_chinese_gb.936.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\lang\menu_chinese_taiwan.950.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_cs_cz.iso_8859-2.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_cs_cz.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_czech_czech_republic.1250.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_czech_czech_republic.ascii.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_da.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_de_de.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_eo.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_es_es.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_fi_fi.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_fr_fr.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_hu_hu.iso_8859-2.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_hu_hu.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_is_is.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_it_it.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_ja_jp.euc-jp.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_ja_jp.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_japanese_japan.932.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_ko_kr.euckr.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_ko_kr.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_nl_nl.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_no_no.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_pl_pl.iso_8859-2.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_pl_pl.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_polish_poland.1250.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_pt_br.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_pt_pt.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_ru_ru.koi8-r.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_ru_ru.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sk_sk.iso_8859-2.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sl_si.cp1250.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sl_si.latin2.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sl_si.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_slovak_slovak_republic.1250.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sr_rs.ascii.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sr_rs.iso_8859-2.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sr_rs.iso_8859-5.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sr_rs.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_sv_se.latin1.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_tr_tr.cp1254.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_tr_tr.iso_8859-9.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_tr_tr.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_uk_ua.cp1251.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_uk_ua.koi8-u.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_vi_vn.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\lang\menu_zh_cn.utf-8.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\lang\menu_zh_tw.utf-8.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\plugin\getscriptPlugin.vim	/^let s:keepcpo                = &cpo$/;"	v
s:keepcpo	vim82\plugin\logiPat.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	vim82\plugin\netrwPlugin.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\plugin\tarPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:keepcpo	vim82\plugin\vimballPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:keepcpo	vim82\plugin\zipPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:keepcpo	vim82\syntax\ada.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\autoit.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\cmake.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\cucumber.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\datascript.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\eiffel.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\fvwm.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\gprof.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\lsl.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\perl6.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\po.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\sgmldecl.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\sil.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\syntax\swift.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepcpo	vim82\syntax\taskdata.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\taskedit.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\tex.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\valgrind.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	vim82\syntax\vim.vim	/^let s:keepcpo= &cpo$/;"	v
s:kernels	vim82\syntax\debcontrol.vim	/^let s:kernels = ['linux', 'hurd', 'kfreebsd', 'knetbsd', 'kopensolaris', 'netbsd']$/;"	v
s:keywords	vim82\syntax\perl6.vim	/^let s:keywords = {$/;"	v
s:lang	vim82\menu.vim	/^      let s:lang = ""$/;"	v
s:lang	vim82\menu.vim	/^      let s:lang = &langmenu$/;"	v
s:lang	vim82\menu.vim	/^      let s:lang = s:lang . '.' . &enc$/;"	v
s:lang	vim82\menu.vim	/^      let s:lang = substitute(s:lang, '\\.[^.]*', "", "")$/;"	v
s:lang	vim82\menu.vim	/^    let s:lang = substitute(s:lang, " ", "_", "g")$/;"	v
s:lang	vim82\menu.vim	/^    let s:lang = substitute(s:lang, "@euro", "", "")$/;"	v
s:lang	vim82\menu.vim	/^    let s:lang = substitute(s:lang, '\\.iso8859', ".iso_8859", "")$/;"	v
s:lang	vim82\menu.vim	/^    let s:lang = substitute(s:lang, 'iso_8859-15\\=$', "latin1", "")$/;"	v
s:lang	vim82\menu.vim	/^    let s:lang = substitute(tolower(s:lang), '\\.iso-', ".iso_", "")$/;"	v
s:lang	vim82\menu.vim	/^    let s:lang = v:lang$/;"	v
s:lang	vim82\tutor\tutor.vim	/^      let s:lang = $LC_MESSAGES$/;"	v
s:lang	vim82\tutor\tutor.vim	/^    let s:lang = $LANG$/;"	v
s:lang	vim82\tutor\tutor.vim	/^    let s:lang = $LC_ALL$/;"	v
s:lang	vim82\tutor\tutor.vim	/^    let s:lang = substitute(s:lang, '\\c@euro', '', '')$/;"	v
s:lang	vim82\tutor\tutor.vim	/^    let s:lang = v:lang$/;"	v
s:lang	vim82\tutor\tutor.vim	/^  let s:lang = ""$/;"	v
s:langExtensions	vim82\autoload\haskellcomplete.vim	/^let s:langExtensions =$/;"	v
s:last_changedtick	vim82\indent\erlang.vim	/^let s:last_changedtick = -1$/;"	v
s:last_enc	plugins\kaoriya\encode_japan.vim	/^let s:last_enc = &enc$/;"	v
s:last_errmsg	plugins\vimproc\autoload\vimproc.vim	/^  let s:last_errmsg = ''$/;"	v
s:last_mps	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_status	plugins\vimproc\autoload\vimproc.vim	/^  let s:last_status = 0$/;"	v
s:last_word	plugins\golang\plugin\go\godoc.vim	/^let s:last_word = ''$/;"	v
s:last_words	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^let s:last_words = ":"$/;"	v
s:lasterr	plugins\vimproc\autoload\vimproc.vim	/^let s:lasterr = []$/;"	v
s:lastpattern	plugins\kaoriya\plugin\dicwin.vim	/^let s:lastpattern = ''$/;"	v
s:lastword	plugins\kaoriya\plugin\dicwin.vim	/^let s:lastword = ''$/;"	v
s:lazyredraw	vim82\syntax\hitest.vim	/^let s:lazyredraw  = &lazyredraw$/;"	v
s:leading_operator_regex	vim82\indent\ruby.vim	/^let s:leading_operator_regex = '^\\s*\\%(&\\=\\.\\)'$/;"	v
s:len	vim82\syntax\2html.vim	/^	  let s:len = &columns$/;"	v
s:len	vim82\syntax\2html.vim	/^    let s:len = strlen(s:line)$/;"	v
s:length_pattern	vim82\syntax\cdrtoc.vim	/^let s:length_pattern = '\\%(\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\|\\d\\+\\)\\>'$/;"	v
s:letlim	vim82\indent\ocaml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letlim	vim82\indent\sml.vim	/^let s:letlim = '\\(\\<\\(sig\\|struct\\)\\|;;\\)\\s*$'$/;"	v
s:letpat	vim82\indent\ocaml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:letpat	vim82\indent\sml.vim	/^let s:letpat = '^\\s*\\(let\\|type\\|module\\|class\\|open\\|exception\\|val\\|include\\|external\\)\\>'$/;"	v
s:level	vim82\syntax\2html.vim	/^      let s:level = match(foldtextresult(s:lnum), '+-*\\zs[^-]') - 2$/;"	v
s:lexer	plugins\vimproc\autoload\vimproc\lexer.vim	/^let s:lexer = {}$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\compat.vim	/^let s:lib = {}$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\japanese.vim	/^  let s:lib.autofmt_allow_over_tw_char .= "„Äô„Äó‚¶Ü„Çï„Çñ„Ç†‚Äì„Äú‚Äº‚Åá‚Åà‚Åâ"$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\japanese.vim	/^let s:lib = {}$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\japanese.vim	/^let s:lib.autofmt_allow_over_tw = 0$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\japanese.vim	/^let s:lib.autofmt_allow_over_tw_char .= ""$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\japanese.vim	/^let s:lib.autofmt_allow_over_tw_char = ""$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\uax14.vim	/^let s:lib = {}$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\uax14.vim	/^let s:lib.autofmt_strict_japanese_linebreak = 1$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\uax14.vim	/^let s:lib.uni = autofmt#unicode#import()$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^  let s:lib.uax14_pair_table_cols[s:cols[s:i]] = s:i$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib = {}$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.COMBINING_INDIRECT_BRK   = '#'$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.COMBINING_PROHIBITED_BRK = '@'$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.DIRECT_BRK               = '_'$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.EXPLICIT_BRK             = '!'$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.INDIRECT_BRK             = '%'$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.PROHIBITED_BRK           = '^'$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.lb_cache = []$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.linebreak_bmp = s:tmp$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.linebreak_table = s:tmp$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.uax14_pair_table_cols = {}$/;"	v
s:lib	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:lib.uax14_pair_table_rows = [$/;"	v
s:lim	vim82\indent\ocaml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:lim	vim82\indent\sml.vim	/^let s:lim = '^\\s*\\(exception\\|external\\|include\\|let\\|module\\|open\\|type\\|val\\)\\>'$/;"	v
s:line	vim82\syntax\2html.vim	/^	  let s:line = s:line . repeat(' ', &columns - virtcol([s:lnum, s:len]) - s:margin)$/;"	v
s:line	vim82\syntax\2html.vim	/^    let s:line = getline(s:lnum)$/;"	v
s:line1	vim82\scripts.vim	/^    let s:line1 = substitute(s:line1, '\\(-[iS]\\|--ignore-environment\\|--split-string\\)', '', '')$/;"	v
s:line1	vim82\scripts.vim	/^    let s:line1 = substitute(s:line1, '\\<env\\s\\+', '', '')$/;"	v
s:line1	vim82\scripts.vim	/^    let s:line1 = substitute(s:line1, '\\S\\+=\\S\\+', '', 'g')$/;"	v
s:line1	vim82\scripts.vim	/^let s:line1 = getline(1)$/;"	v
s:line2	vim82\scripts.vim	/^  let s:line2 = getline(2)$/;"	v
s:line3	vim82\scripts.vim	/^  let s:line3 = getline(3)$/;"	v
s:line4	vim82\scripts.vim	/^  let s:line4 = getline(4)$/;"	v
s:line5	vim82\scripts.vim	/^  let s:line5 = getline(5)$/;"	v
s:lineContPat	vim82\indent\vim.vim	/^let s:lineContPat = '^\\s*\\(\\\\\\|"\\\\ \\)'$/;"	v
s:line_term	vim82\indent\json.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:line_term	vim82\indent\typescript.vim	/^let s:line_term = '\\s*\\%(\\%(\\\/\\\/\\).*\\)\\=$'$/;"	v
s:lines	vim82\ftplugin\eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	vim82\ftplugin\liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	vim82\syntax\2html.vim	/^      let s:lines = readfile(s:main_plugin_path, "", 20)$/;"	v
s:lines	vim82\syntax\2html.vim	/^    let s:lines[-1].="<\/span><\/span>"$/;"	v
s:lines	vim82\syntax\2html.vim	/^let s:lines = []$/;"	v
s:lines	vim82\syntax\eruby.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:lines	vim82\syntax\liquid.vim	/^  let s:lines = getline(1)."\\n".getline(2)."\\n".getline(3)."\\n".getline(4)."\\n".getline(5)."\\n".getline("$")$/;"	v
s:liststartregex	vim82\indent\yaml.vim	/^let s:liststartregex='\\v^\\s*%(\\-%(\\ |$))'$/;"	v
s:lmax	vim82\ftplugin\fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	vim82\ftplugin\fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	vim82\indent\fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	vim82\indent\fortran.vim	/^    let s:lmax = 500$/;"	v
s:lmax	vim82\syntax\fortran.vim	/^      let s:lmax = line("$")$/;"	v
s:lmax	vim82\syntax\fortran.vim	/^    let s:lmax = 500$/;"	v
s:ln	vim82\ftplugin\fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	vim82\ftplugin\fortran.vim	/^    let s:ln=1$/;"	v
s:ln	vim82\indent\fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	vim82\indent\fortran.vim	/^    let s:ln=1$/;"	v
s:ln	vim82\syntax\fortran.vim	/^      let s:ln = s:ln + 1$/;"	v
s:ln	vim82\syntax\fortran.vim	/^    let s:ln=1$/;"	v
s:lnum	vim82\makemenu.vim	/^let s:lnum = line(".") - 1$/;"	v
s:lnum	vim82\makemenu.vim	/^let s:lnum = s:lnum + 1$/;"	v
s:lnum	vim82\optwin.vim	/^let s:lnum = line("$")$/;"	v
s:lnum	vim82\scripts.vim	/^	let s:lnum += 1$/;"	v
s:lnum	vim82\scripts.vim	/^      let s:lnum += 1$/;"	v
s:lnum	vim82\scripts.vim	/^      let s:lnum = 1$/;"	v
s:lnum	vim82\scripts.vim	/^    let s:lnum = 1$/;"	v
s:lnum	vim82\syntax\2html.vim	/^      let s:lnum = s:lnum + 1$/;"	v
s:lnum	vim82\syntax\2html.vim	/^    let s:lnum = 1$/;"	v
s:lnum	vim82\syntax\2html.vim	/^    let s:lnum = s:new_lnum$/;"	v
s:lnum	vim82\syntax\2html.vim	/^  let s:lnum = 1$/;"	v
s:lnum	vim82\syntax\2html.vim	/^  let s:lnum = html_start_line$/;"	v
s:lnum	vim82\syntax\2html.vim	/^  let s:lnum = s:lnum + 1$/;"	v
s:ls	vim82\syntax\2html.vim	/^let s:ls  = &ls$/;"	v
s:luapath	vim82\syntax\vim.vim	/^   let s:luapath= fnameescape(s:luapath)$/;"	v
s:luapath	vim82\syntax\vim.vim	/^let s:luapath= fnameescape(expand("<sfile>:p:h")."\/lua.vim")$/;"	v
s:lz	vim82\macros\less.vim	/^let s:lz = &lz$/;"	v
s:m	vim82\ftplugin\ocaml.vim	/^let s:m = matchstr(s:modeline,'default\\s*=\\s*\\d\\+')$/;"	v
s:m	vim82\ftplugin\ocaml.vim	/^let s:m = matchstr(s:modeline,'struct\\s*=\\s*\\d\\+')$/;"	v
s:macro_end	vim82\indent\sas.vim	/^let s:macro_end = '\\v%(^|;)\\s*\\%mend\\s*;'$/;"	v
s:macro_str	vim82\indent\sas.vim	/^let s:macro_str = '\\v%(^|;)\\s*\\%macro>'$/;"	v
s:main_plugin_path	vim82\syntax\2html.vim	/^    let s:main_plugin_path = expand("<sfile>:p:h:h")."\/plugin\/tohtml.vim"$/;"	v
s:man_find_arg	vim82\ftplugin\man.vim	/^    let s:man_find_arg = "-l"$/;"	v
s:man_find_arg	vim82\ftplugin\man.vim	/^let s:man_find_arg = "-w"$/;"	v
s:man_sect_arg	vim82\ftplugin\man.vim	/^    let s:man_sect_arg = "-s"$/;"	v
s:man_sect_arg	vim82\ftplugin\man.vim	/^let s:man_sect_arg = ""$/;"	v
s:man_tag_depth	vim82\ftplugin\man.vim	/^let s:man_tag_depth = 0$/;"	v
s:mapkeyregex	vim82\indent\yaml.vim	/^let s:mapkeyregex='\\v^\\s*\\#@!\\S@=%(\\''%([^'']|\\''\\'')*\\'''.$/;"	v
s:margin	vim82\syntax\2html.vim	/^  let s:margin = 0$/;"	v
s:margin	vim82\syntax\2html.vim	/^  let s:margin = strlen(s:end) + 1$/;"	v
s:match_words	vim82\ftplugin\aspvbs.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	vim82\ftplugin\aspvbs.vim	/^let s:match_words = ""$/;"	v
s:match_words	vim82\ftplugin\config.vim	/^let s:match_words = ""$/;"	v
s:match_words	vim82\ftplugin\eruby.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	vim82\ftplugin\eruby.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	vim82\ftplugin\eruby.vim	/^let s:match_words = ""$/;"	v
s:match_words	vim82\ftplugin\haml.vim	/^  let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	vim82\ftplugin\haml.vim	/^  let s:match_words = b:match_words$/;"	v
s:match_words	vim82\ftplugin\haml.vim	/^let s:match_words = ""$/;"	v
s:match_words	vim82\ftplugin\jsp.vim	/^    let s:match_words = b:match_words . ',' . s:match_words$/;"	v
s:match_words	vim82\ftplugin\jsp.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	vim82\ftplugin\jsp.vim	/^let s:match_words = ""$/;"	v
s:match_words	vim82\ftplugin\php.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	vim82\ftplugin\php.vim	/^let s:match_words = ""$/;"	v
s:match_words	vim82\ftplugin\xhtml.vim	/^    let s:match_words = b:match_words . "," . s:match_words$/;"	v
s:match_words	vim82\ftplugin\xhtml.vim	/^    let s:match_words = b:match_words$/;"	v
s:match_words	vim82\ftplugin\xhtml.vim	/^let s:match_words = ""$/;"	v
s:maxoff	vim82\indent\bzl.vim	/^let s:maxoff = 50$/;"	v
s:maxoff	vim82\indent\meson.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:maxoff	vim82\indent\python.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:maxoff	vim82\indent\zimbu.vim	/^let s:maxoff = 50	" maximum number of lines to look backwards for ()$/;"	v
s:mmssff_pattern	vim82\syntax\cdrtoc.vim	/^let s:mmssff_pattern = '\\%([0-5]\\d\\|\\d\\):\\%([0-5]\\d\\|\\d\\):\\%([0-6]\\d\\|7[0-5]\\|\\d\\)\\>'$/;"	v
s:modeline	vim82\ftplugin\ocaml.vim	/^let s:modeline = lnum? getline(lnum): ""$/;"	v
s:module	vim82\indent\ocaml.vim	/^let s:module = '\\<\\%(begin\\|sig\\|struct\\|object\\)\\>'$/;"	v
s:module	vim82\indent\sml.vim	/^let s:module = '\\<\\%(let\\|sig\\|struct\\)\\>'$/;"	v
s:more	vim82\syntax\hitest.vim	/^let s:more	  = &more$/;"	v
s:mp_regex	vim82\ftplugin\mf.vim	/^let s:mp_regex = {$/;"	v
s:mp_regex	vim82\ftplugin\mp.vim	/^let s:mp_regex = {$/;"	v
s:msl_regex	vim82\indent\typescript.vim	/^let s:msl_regex = s:continuation_regex$/;"	v
s:multilineFunctionCall	vim82\indent\php.vim	/^let s:multilineFunctionCall = s:PHP_validVariable.'\\s*('.s:endline$/;"	v
s:multilineFunctionDecl	vim82\indent\php.vim	/^let s:multilineFunctionDecl = s:functionDeclPrefix.s:endline$/;"	v
s:mx_euc_kana	plugins\kaoriya\plugin\verifyenc.vim	/^let s:mx_euc_kana = '['.nr2char(0x8ea4).nr2char(0x8ea5).']'.'\\%([^\\t -~]\\)'$/;"	v
s:my_syncolor	vim82\syntax\doxygen.vim	/^    let s:my_syncolor=1$/;"	v
s:my_syncolor	vim82\syntax\doxygen.vim	/^  let s:my_syncolor=0$/;"	v
s:my_synlink	vim82\syntax\doxygen.vim	/^    let s:my_synlink=1$/;"	v
s:my_synlink	vim82\syntax\doxygen.vim	/^  let s:my_synlink=0$/;"	v
s:myname	plugins\kaoriya\plugin\dicwin.vim	/^let s:myname = expand('<sfile>:t:r')$/;"	v
s:mzschemepath	vim82\syntax\vim.vim	/^   let s:mzschemepath= fnameescape(s:mzschemepath)$/;"	v
s:mzschemepath	vim82\syntax\vim.vim	/^let s:mzschemepath= fnameescape(expand("<sfile>:p:h")."\/scheme.vim")$/;"	v
s:n	vim82\syntax\2html.vim	/^	let s:n = 2$/;"	v
s:n	vim82\syntax\2html.vim	/^      let s:n = s:n - 1$/;"	v
s:n	vim82\syntax\2html.vim	/^    let s:n = s:filler$/;"	v
s:name	vim82\scripts.vim	/^    let s:name = 'wish'$/;"	v
s:name	vim82\scripts.vim	/^    let s:name = substitute(s:line1, '^#!.*[\/\\\\]\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:name	vim82\scripts.vim	/^    let s:name = substitute(s:line1, '^#!.*\\<env\\>\\s\\+\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:name	vim82\scripts.vim	/^    let s:name = substitute(s:line1, '^#!\\s*\\([^\/\\\\ ]*\\>\\).*', '\\1', '')$/;"	v
s:name	vim82\scripts.vim	/^    let s:name = substitute(s:line1, '^#!\\s*\\S*[\/\\\\]\\(\\i\\+\\).*', '\\1', '')$/;"	v
s:names	vim82\syntax\ruby.vim	/^let s:names = { '~': 'Tilde', '`': 'BackQuote', '!': 'Bang', '@': 'At', '#': 'Hash', '$': 'Dollar', '%': 'Percent', '^': 'Caret',$/;"	v
s:needpatch	vim82\autoload\netrw.vim	/^   let s:needpatch{ptch}= 1$/;"	v
s:needspatches	vim82\autoload\netrw.vim	/^let s:needspatches=[1557,213]$/;"	v
s:netrw_ftp_cmd	vim82\autoload\netrw.vim	/^let s:netrw_ftp_cmd= g:netrw_ftp_cmd$/;"	v
s:netrw_has_nt_rcp	vim82\autoload\netrw.vim	/^ let s:netrw_has_nt_rcp = 0$/;"	v
s:netrw_has_nt_rcp	vim82\autoload\netrw.vim	/^ let s:netrw_has_nt_rcp = 1$/;"	v
s:netrw_rcpmode	vim82\autoload\netrw.vim	/^ let s:netrw_rcpmode    = ''$/;"	v
s:netrw_rcpmode	vim82\autoload\netrw.vim	/^ let s:netrw_rcpmode    = '-b'$/;"	v
s:netrw_usercuc	vim82\autoload\netrw.vim	/^let s:netrw_usercuc = &cursorcolumn$/;"	v
s:netrw_usercul	vim82\autoload\netrw.vim	/^let s:netrw_usercul = &cursorline$/;"	v
s:new	vim82\syntax\2html.vim	/^	    let s:new .= s:FoldColumn_build('|', s:allfolds[0].level - 1, s:extra_space, '-',$/;"	v
s:new	vim82\syntax\2html.vim	/^	    let s:new = s:new . s:FoldColumn_build("-", 1, s:extra_space, "",$/;"	v
s:new	vim82\syntax\2html.vim	/^	    let s:new = s:new . s:FoldColumn_build('|', s:allfolds[0].level - 1, 0, "",$/;"	v
s:new	vim82\syntax\2html.vim	/^	    let s:new = s:new . s:FoldColumn_build('|', s:foldstack[0].level, s:foldcolumn - s:foldstack[0].level, "",$/;"	v
s:new	vim82\syntax\2html.vim	/^	    let s:new = s:new . s:FoldColumn_fill()$/;"	v
s:new	vim82\syntax\2html.vim	/^	  let s:new = s:new . s:FoldColumn_build(" ", 1, s:foldcolumn - s:allfolds[0].level - 1, "",$/;"	v
s:new	vim82\syntax\2html.vim	/^	  let s:new = s:new . s:FoldColumn_build("+", 1, 0, "",$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new .= "<span id='"$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new .= "fold".s:foldId.s:settings.id_suffix."' class='".s:allfolds[0].type."'>"$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new .= (exists('g:html_diff_win_num') ? "win".g:html_diff_win_num : "")$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:FoldColumn_fill() . s:new$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:HtmlFormat_n(repeat(' ', s:margin), s:LINENR_ID, 0, 0) . s:new$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:new . " " . s:filler . " inserted lines "$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:new . "<span class='fulltext'>"$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:new . (s:settings.number_lines ? s:HtmlFormat_n(s:numcol, s:FOLDED_ID, 0, 0) : "") . substitute(s:HtmlFormat_t(foldtextresult(s:lnum), s:FOLDED_ID, 0), '<\/span>', s:HtmlEndline.'\\n\\0', '')$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:new . repeat(s:difffillchar, &columns - strlen(s:new) - s:margin)$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:new . repeat(s:difffillchar, 3)$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:new . s:HtmlFormat(s:expandedtab,  s:id, s:diff_id, "", 0)$/;"	v
s:new	vim82\syntax\2html.vim	/^	let s:new = s:new."<\/span><\/span>"$/;"	v
s:new	vim82\syntax\2html.vim	/^      let s:new = repeat(s:difffillchar, 3)$/;"	v
s:new	vim82\syntax\2html.vim	/^      let s:new = s:HtmlFormat_d(s:new, s:DIFF_D_ID, 0)$/;"	v
s:new	vim82\syntax\2html.vim	/^      let s:new = s:new . repeat(s:foldfillchar, &columns - strlen(s:new))$/;"	v
s:new	vim82\syntax\2html.vim	/^      let s:new = s:new . s:HtmlFormat_n("", s:LINENR_ID, 0, s:lnum)$/;"	v
s:new	vim82\syntax\2html.vim	/^      let s:new = s:new . s:HtmlFormat_n(s:numcol, s:LINENR_ID, 0, s:lnum)$/;"	v
s:new	vim82\syntax\2html.vim	/^    let s:new = (s:settings.number_lines ? s:HtmlFormat_n(s:numcol, s:FOLDED_ID, 0, s:lnum): "") . s:HtmlFormat_t(s:new, s:FOLDED_ID, 0)$/;"	v
s:new	vim82\syntax\2html.vim	/^    let s:new = foldtextresult(s:lnum)$/;"	v
s:new	vim82\syntax\2html.vim	/^  let s:new = ""$/;"	v
s:new_lnum	vim82\syntax\2html.vim	/^    let s:new_lnum = foldclosedend(s:lnum)$/;"	v
s:newfold	vim82\syntax\2html.vim	/^	let s:newfold.type = "open-fold"$/;"	v
s:newfold	vim82\syntax\2html.vim	/^      let s:newfold = {'firstline': s:lnum, 'lastline': foldclosedend(s:lnum), 'level': s:level,'type': "closed-fold"}$/;"	v
s:newwin	vim82\syntax\2html.vim	/^let s:newwin = winnr()$/;"	v
s:newwin_stl	vim82\syntax\2html.vim	/^let s:newwin_stl = &l:stl$/;"	v
s:nm	vim82\syntax\rmd.vim	/^    let s:nm  = s:type$/;"	v
s:nm	vim82\syntax\rmd.vim	/^    let s:nm = substitute(s:type, '=.*', '', '')$/;"	v
s:no_indent	vim82\indent\eiffel.vim	/^let s:no_indent = '^\\s*\\(class\\|feature\\|creation\\|inherit\\)\\>'$/;"	v
s:non_bracket_continuation_regex	vim82\indent\falcon.vim	/^let s:non_bracket_continuation_regex = '\\%([\\\\.,:*\/%+]\\|\\<and\\|\\<or\\|\\%(<%\\)\\@<![=-]\\|\\W[|&?]\\|||\\|&&\\)\\s*\\%(#.*\\)\\=$'$/;"	v
s:non_bracket_continuation_regex	vim82\indent\ruby.vim	/^let s:non_bracket_continuation_regex =$/;"	v
s:notPhpHereDoc	vim82\indent\php.vim	/^let s:notPhpHereDoc = '\\%(break\\|return\\|continue\\|exit\\|die\\|else\\|end\\%(if\\|while\\|for\\|foreach\\|switch\\)\\)'$/;"	v
s:not_end	vim82\ftplugin\framescript.vim	/^  let s:not_end = '\\c\\%(\\<End\\)\\@<!'$/;"	v
s:note_pattern	vim82\indent\rst.vim	/^let s:note_pattern = '^\\.\\. '$/;"	v
s:notelse	vim82\ftplugin\fortran.vim	/^  let s:notelse = '\\%(\\<end\\s\\+\\|\\<else\\s\\+\\)\\@<!'$/;"	v
s:notend	vim82\ftplugin\ada.vim	/^   let s:notend      = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	vim82\ftplugin\aspvbs.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	vim82\ftplugin\fortran.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	vim82\ftplugin\sql.vim	/^let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notend	vim82\ftplugin\vhdl.vim	/^  let s:notend = '\\%(\\<end\\s\\+\\)\\@<!'$/;"	v
s:notprocedure	vim82\ftplugin\fortran.vim	/^  let s:notprocedure = '\\%(\\s\\+procedure\\>\\)\\@!'$/;"	v
s:notselect	vim82\ftplugin\fortran.vim	/^  let s:notselect = '\\%(\\<select\\s\\+\\)\\@<!'$/;"	v
s:notslash	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^let s:notslash = '\\\\\\@1<!\\%(\\\\\\\\\\)*'$/;"	v
s:ns_char	vim82\syntax\yaml.vim	/^let s:ns_char = '\\%([\\n\\r\\uFEFF \\t]\\@!\\p\\)'$/;"	v
s:ns_char	vim82\syntax\yaml.vim	/^let s:ns_char = s:SimplifyToAssumeAllPrintable(s:ns_char)$/;"	v
s:ns_char_without_c_indicator	vim82\syntax\yaml.vim	/^let s:ns_char_without_c_indicator = s:SimplifyToAssumeAllPrintable(s:ns_char_without_c_indicator)$/;"	v
s:ns_char_without_c_indicator	vim82\syntax\yaml.vim	/^let s:ns_char_without_c_indicator = substitute(s:ns_char, '\\v\\C[\\zs', '\\=s:c_indicator[1:-2]', '')$/;"	v
s:ns_directive_name	vim82\syntax\yaml.vim	/^let s:ns_directive_name = s:ns_char.'\\+'$/;"	v
s:ns_global_tag_prefix	vim82\syntax\yaml.vim	/^let s:ns_global_tag_prefix = s:ns_tag_char.s:ns_uri_char.'*'$/;"	v
s:ns_local_tag_prefix	vim82\syntax\yaml.vim	/^let s:ns_local_tag_prefix  = '!'.s:ns_uri_char.'*'$/;"	v
s:ns_plain_char_in	vim82\syntax\yaml.vim	/^let s:ns_plain_char_in  = '\\%('.s:ns_char.'#\\|:'.s:ns_plain_safe_in.'\\|'.s:ns_plain_safe_in_without_colhash.'\\)'$/;"	v
s:ns_plain_char_out	vim82\syntax\yaml.vim	/^let s:ns_plain_char_out = '\\%('.s:ns_char.'#\\|:'.s:ns_plain_safe_out.'\\|'.s:ns_plain_safe_out_without_colhash.'\\)'$/;"	v
s:ns_plain_first_in	vim82\syntax\yaml.vim	/^let s:ns_plain_first_in  = '\\%('.s:ns_char_without_c_indicator.'\\|[?:\\-]\\%('.s:ns_plain_safe_in.'\\)\\@=\\)'$/;"	v
s:ns_plain_first_out	vim82\syntax\yaml.vim	/^let s:ns_plain_first_out = '\\%('.s:ns_char_without_c_indicator.'\\|[?:\\-]\\%('.s:ns_plain_safe_out.'\\)\\@=\\)'$/;"	v
s:ns_plain_in	vim82\syntax\yaml.vim	/^let s:ns_plain_in  = s:ns_plain_first_in  . s:ns_plain_char_in.'*'$/;"	v
s:ns_plain_out	vim82\syntax\yaml.vim	/^let s:ns_plain_out = s:ns_plain_first_out . s:ns_plain_char_out.'*'$/;"	v
s:ns_plain_safe_in	vim82\syntax\yaml.vim	/^let s:ns_plain_safe_in  = '\\%('.s:c_flow_indicator.'\\@!'.s:ns_char.'\\)'$/;"	v
s:ns_plain_safe_in	vim82\syntax\yaml.vim	/^let s:ns_plain_safe_in = substitute(s:ns_plain_safe_in, '\\V\\C\\\\%('.s:_collection.'\\\\@!'.s:_neg_collection.'\\\\)', '[^\\1\\2]', '')$/;"	v
s:ns_plain_safe_in_without_colhash	vim82\syntax\yaml.vim	/^let s:ns_plain_safe_in_without_colhash = substitute(s:ns_plain_safe_in, '\\V\\C'.s:_neg_collection, '[^\\1:#]', '')$/;"	v
s:ns_plain_safe_out	vim82\syntax\yaml.vim	/^let s:ns_plain_safe_out = s:ns_char$/;"	v
s:ns_plain_safe_out_without_colhash	vim82\syntax\yaml.vim	/^let s:ns_plain_safe_out_without_colhash = substitute(s:ns_plain_safe_out, '\\V\\C'.s:_neg_collection, '[^\\1:#]', '')$/;"	v
s:ns_tag_char	vim82\indent\yaml.vim	/^let s:ns_tag_char  = '\\v%('.s:ns_word_char.'|[#\/;?:@&=+$.~*''()])'$/;"	v
s:ns_tag_char	vim82\syntax\yaml.vim	/^let s:ns_tag_char  = '\\%(%\\x\\x\\|'.s:ns_word_char.'\\|[#\/;?:@&=+$.~*''()]\\)'$/;"	v
s:ns_tag_char	vim82\syntax\yaml.vim	/^let s:ns_tag_char = s:SimplifyAdjacentCollections(s:ns_tag_char)$/;"	v
s:ns_tag_prefix	vim82\syntax\yaml.vim	/^let s:ns_tag_prefix = s:ns_local_tag_prefix.$/;"	v
s:ns_uri_char	vim82\indent\yaml.vim	/^let s:ns_uri_char  = '\\v%('.s:ns_word_char.'\\v|[#\/;?:@&=+$,.!~*''()[\\]])'$/;"	v
s:ns_uri_char	vim82\syntax\yaml.vim	/^let s:ns_uri_char  = '\\%(%\\x\\x\\|'.s:ns_word_char.'\\|[#\/;?:@&=+$,.!~*''()[\\]]\\)'$/;"	v
s:ns_uri_char	vim82\syntax\yaml.vim	/^let s:ns_uri_char = s:SimplifyAdjacentCollections(s:ns_uri_char)$/;"	v
s:ns_word_char	vim82\indent\yaml.vim	/^let s:ns_word_char = '\\v[[:alnum:]_\\-]'$/;"	v
s:ns_word_char	vim82\syntax\yaml.vim	/^let s:ns_word_char = '[[:alnum:]_\\-]'$/;"	v
s:null_device	plugins\vimproc\autoload\vimproc.vim	/^let s:null_device = vimproc#util#is_windows() ? 'NUL' : '\/dev\/null'$/;"	v
s:numcol	vim82\syntax\2html.vim	/^    let s:numcol = repeat(' ', s:margin - 1 - strlen(s:lnum)) . s:lnum . ' '$/;"	v
s:obj	vim82\indent\ocaml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:obj	vim82\indent\sml.vim	/^let s:obj = '^\\s*\\(constraint\\|inherit\\|initializer\\|method\\|val\\)\\>\\|\\<\\(object\\|object\\s*(.*)\\)\\s*$'$/;"	v
s:ocaml_word_char	vim82\ftplugin\ocaml.vim	/^    let s:ocaml_word_char = '\\w|[¿-ˇ]|'''$/;"	v
s:offset	vim82\syntax\2html.vim	/^	    let s:offset -= s:i - 1$/;"	v
s:offset	vim82\syntax\2html.vim	/^	  let s:offset = 0$/;"	v
s:old_bind	vim82\syntax\2html.vim	/^let s:old_bind = &l:scrollbind$/;"	v
s:old_et	vim82\syntax\2html.vim	/^let s:old_et = &l:et$/;"	v
s:old_fen	vim82\syntax\2html.vim	/^let s:old_fen = &foldenable$/;"	v
s:old_icon	vim82\optwin.vim	/^let s:old_icon = &icon$/;"	v
s:old_icon	vim82\syntax\2html.vim	/^let s:old_icon = &icon$/;"	v
s:old_isprint	vim82\syntax\2html.vim	/^  let s:old_isprint = &isprint$/;"	v
s:old_magic	vim82\syntax\2html.vim	/^let s:old_magic = &magic$/;"	v
s:old_more	vim82\syntax\2html.vim	/^let s:old_more = &more$/;"	v
s:old_paste	vim82\syntax\2html.vim	/^let s:old_paste = &paste$/;"	v
s:old_report	vim82\syntax\2html.vim	/^let s:old_report = &report$/;"	v
s:old_ru	vim82\optwin.vim	/^let s:old_ru = &ru$/;"	v
s:old_sc	vim82\optwin.vim	/^let s:old_sc = &sc$/;"	v
s:old_search	vim82\syntax\2html.vim	/^let s:old_search = @\/$/;"	v
s:old_spec	vim82\syntax\rst.vim	/^    let s:old_spec = g:rst_syntax_code_list$/;"	v
s:old_style	vim82\syntax\erlang.vim	/^let s:old_style = (exists("g:erlang_old_style_highlight") &&$/;"	v
s:old_title	vim82\optwin.vim	/^let s:old_title = &title$/;"	v
s:old_title	vim82\syntax\2html.vim	/^let s:old_title = &title$/;"	v
s:old_ul	vim82\optwin.vim	/^let s:old_ul = &ul$/;"	v
s:old_winfixheight	vim82\syntax\2html.vim	/^let s:old_winfixheight = &l:winfixheight$/;"	v
s:old_winheight	vim82\syntax\2html.vim	/^let s:old_winheight = winheight(0)$/;"	v
s:oldcolumn	vim82\syntax\lhaskell.vim	/^let s:oldcolumn=col(".")$/;"	v
s:oldcpo	vim82\syntax\tcsh.vim	/^let s:oldcpo = &cpo$/;"	v
s:oldline	vim82\syntax\lhaskell.vim	/^let s:oldline=line(".")$/;"	v
s:oneProbe	vim82\syntax\dtrace.vim	/^let s:oneProbe = '\\%(BEGIN\\|END\\|ERROR\\|\\S\\{-}:\\S\\{-}:\\S\\{-}:\\S\\{-}\\)\\_s*'$/;"	v
s:one_line_scope_regex	vim82\indent\typescript.vim	/^let s:one_line_scope_regex = '\\<\\%(if\\|else\\|for\\|while\\)\\>[^{;]*' . s:line_term$/;"	v
s:open_pat	vim82\indent\matlab.vim	/^let s:open_pat = 'for\\|if\\|parfor\\|spmd\\|switch\\|try\\|while\\|classdef\\|properties\\|methods\\|events\\|enumeration'$/;"	v
s:opfirst	vim82\indent\javascript.vim	/^let s:opfirst = '^' . get(g:,'javascript_opfirst',$/;"	v
s:optionsGHC	vim82\autoload\haskellcomplete.vim	/^let s:optionsGHC =$/;"	v
s:or_replace	vim82\ftplugin\sql.vim	/^let s:or_replace = '\\%(or\\s\\+replace\\s\\+\\)\\?'$/;"	v
s:orders	vim82\syntax\hostconf.vim	/^let s:orders = ['bind', 'hosts', 'nis']$/;"	v
s:ordot	vim82\ftplugin\cobol.vim	/^    let s:ordot = '\\|\\ze\\.\\%( \\@=\\|$\\)'$/;"	v
s:orgbufnr	vim82\syntax\2html.vim	/^let s:orgbufnr = winbufnr(0)$/;"	v
s:orgwin	vim82\syntax\2html.vim	/^let s:orgwin = bufwinnr(s:orgbufnr)$/;"	v
s:original_cpo	vim82\syntax\tmux.vim	/^let s:original_cpo = &cpo$/;"	v
s:origwin_stl	vim82\syntax\2html.vim	/^let s:origwin_stl = &l:stl$/;"	v
s:other_mf_macros	vim82\syntax\mp.vim	/^  let s:other_mf_macros = g:other_mf_macros$/;"	v
s:outdent	vim82\indent\eiffel.vim	/^let s:outdent = '^\\s*\\(else\\|invariant\\|variant\\|do\\|require\\|until\\|loop\\|local\\)\\>'$/;"	v
s:pairs	vim82\syntax\debcontrol.vim	/^let s:pairs = [$/;"	v
s:patBR	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^let s:patBR = ""$/;"	v
s:path	vim82\ftplugin\eruby.vim	/^let s:path = &l:path$/;"	v
s:path_sep_pattern	plugins\vimproc\autoload\vimproc\filepath.vim	/^let s:path_sep_pattern = (exists('+shellslash') ? '[\\\\\/]' : '\/') . '\\+'$/;"	v
s:path_separator	plugins\vimproc\autoload\vimproc\filepath.vim	/^let s:path_separator = s:is_windows ? ';' : ':'$/;"	v
s:pc_id	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:pc_id = 12$/;"	v
s:perlpath	vim82\syntax\vim.vim	/^   let s:perlpath= fnameescape(s:perlpath)$/;"	v
s:perlpath	vim82\syntax\vim.vim	/^let s:perlpath= fnameescape(expand("<sfile>:p:h")."\/perl.vim")$/;"	v
s:pgb	vim82\syntax\2html.vim	/^	  let s:pgb.needs_redraw = 0$/;"	v
s:pgb	vim82\syntax\2html.vim	/^    let s:pgb = s:ProgressBar("Processing folds:", line('$')*2, s:orgwin)$/;"	v
s:pgb	vim82\syntax\2html.vim	/^    let s:pgb.needs_redraw = 0$/;"	v
s:pgb	vim82\syntax\2html.vim	/^  let s:pgb = s:ProgressBar("Processing lines:", s:end - s:lnum + 1, s:orgwin)$/;"	v
s:plain_mf_macros	vim82\syntax\mp.vim	/^  let s:plain_mf_macros = g:plain_mf_macros$/;"	v
s:plain_mf_modes	vim82\syntax\mp.vim	/^  let s:plain_mf_modes = g:plain_mf_modes$/;"	v
s:pluginversion	vim82\syntax\2html.vim	/^  let s:pluginversion = g:loaded_2html_plugin$/;"	v
s:pluginversion	vim82\syntax\2html.vim	/^  let s:pluginversion = g:unloaded_tohtml_plugin$/;"	v
s:prepended	vim82\autoload\syntaxcomplete.vim	/^let s:prepended  = ''$/;"	v
s:prevc	vim82\syntax\2html.vim	/^		let s:prevc = matchstr(s:expandedtab, '.\\%' . (s:idx + 1) . 'c')$/;"	v
s:prevc	vim82\syntax\2html.vim	/^		let s:prevc = matchstr(s:line, '.\\%' . (s:startcol + s:offset) . 'c')$/;"	v
s:program_end	vim82\indent\sas.vim	/^let s:program_end = '\\v%(^|;)\\s*endsas\\s*;'$/;"	v
s:progressbar	vim82\syntax\2html.vim	/^  let s:progressbar={}$/;"	v
s:property	vim82\indent\sass.vim	/^let s:property = '^\\s*:\\|^\\s*[[:alnum:]#{}-]\\+\\%(:\\|\\s*=\\)'$/;"	v
s:pythonpath	vim82\syntax\vim.vim	/^   let s:pythonpath= fnameescape(s:pythonpath)$/;"	v
s:pythonpath	vim82\syntax\vim.vim	/^let s:pythonpath= fnameescape(expand("<sfile>:p:h")."\/python.vim")$/;"	v
s:q_adverbs	vim82\syntax\perl6.vim	/^    let s:q_adverbs = [$/;"	v
s:radix_chars	vim82\syntax\clojure.vim	/^let s:radix_chars = "0123456789abcdefghijklmnopqrstuvwxyz"$/;"	v
s:read_timeout	plugins\vimproc\autoload\vimproc.vim	/^let s:read_timeout = 100$/;"	v
s:reader	plugins\vimproc\autoload\vimproc\lexer.vim	/^let s:reader = {}$/;"	v
s:register_a	vim82\syntax\hitest.vim	/^let s:register_a  = @a$/;"	v
s:register_se	vim82\syntax\hitest.vim	/^let s:register_se = @\/$/;"	v
s:rel	vim82\indent\javascript.vim	/^let s:rel = has('reltime')$/;"	v
s:relative_indent	vim82\indent\eiffel.vim	/^let s:relative_indent = '^\\s*\\(deferred\\|class\\|feature\\|creation\\|inherit\\|loop\\|from\\|across\\|until\\|if\\|else\\|elseif\\|ensure\\|require\\|check\\|do\\|local\\|invariant\\|variant\\|rename\\|redefine\\|do\\|export\\)\\>'$/;"	v
s:report	vim82\syntax\hitest.vim	/^let s:report      = &report$/;"	v
s:returnTypeMatcher	vim82\indent\scala.vim	/^let s:returnTypeMatcher = '\\%(:\\s*\\w\\+' . s:typeSpecMatcher . '\\?\\)'$/;"	v
s:routines	vim82\syntax\perl6.vim	/^let s:routines = [$/;"	v
s:ruby_deindent_keywords	vim82\indent\ruby.vim	/^let s:ruby_deindent_keywords =$/;"	v
s:ruby_indent_keywords	vim82\indent\ruby.vim	/^let s:ruby_indent_keywords =$/;"	v
s:ruby_path	vim82\ftplugin\ruby.vim	/^  let s:ruby_path = s:build_path(s:ruby_paths)$/;"	v
s:ruby_path	vim82\ftplugin\ruby.vim	/^  let s:ruby_path = type(g:ruby_path) == type([]) ? join(g:ruby_path, ',') : g:ruby_path$/;"	v
s:ruby_paths	vim82\ftplugin\ruby.vim	/^  let s:ruby_paths = g:ruby_default_path$/;"	v
s:ruby_paths	vim82\ftplugin\ruby.vim	/^  let s:ruby_paths = g:ruby_version_paths[b:ruby_version]$/;"	v
s:rubycomplete_debug	vim82\autoload\rubycomplete.vim	/^let s:rubycomplete_debug = 0$/;"	v
s:rubycomplete_rails_loaded	vim82\autoload\rubycomplete.vim	/^let s:rubycomplete_rails_loaded = 0$/;"	v
s:rubypath	vim82\syntax\vim.vim	/^   let s:rubypath= fnameescape(s:rubypath)$/;"	v
s:rubypath	vim82\syntax\vim.vim	/^let s:rubypath= fnameescape(expand("<sfile>:p:h")."\/ruby.vim")$/;"	v
s:rule_rx	vim82\indent\make.vim	/^let s:rule_rx = '^[^ \\t#:][^#:]*:\\{1,2}\\%([^=:]\\|$\\)'$/;"	v
s:run_processing_procs	vim82\indent\sas.vim	/^let s:run_processing_procs = [$/;"	v
s:save_cpo	plugins\vimproc\autoload\vimproc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugins\vimproc\autoload\vimproc\cmd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugins\vimproc\autoload\vimproc\commands.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugins\vimproc\autoload\vimproc\filepath.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugins\vimproc\autoload\vimproc\lexer.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugins\vimproc\autoload\vimproc\parser.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugins\vimproc\autoload\vimproc\util.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugins\vimproc\plugin\vimproc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\colors\tools\check_colors.vim	/^let s:save_cpo= &cpo$/;"	v
s:save_cpo	vim82\compiler\cargo.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\compiler\go.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\ant.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\aspvbs.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\bzl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\config.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\csc.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\csh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\dtd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\eruby.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\haml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\html.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\initex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\j.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\java.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\jsp.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\matlab.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\perl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\perl6.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\plaintex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\sgml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\sh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\sql.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\svg.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\tcsh.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\tex.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\xhtml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\xml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\ftplugin\xsd.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\indent\bzl.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\indent\clojure.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\indent\cs.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	vim82\indent\rust.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\indent\yaml.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\mswin.vim	/^  let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	vim82\pack\dist\opt\matchit\autoload\matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\pack\dist\opt\matchit\plugin\matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\syntax\cs.vim	/^let s:save_cpo = &cpoptions$/;"	v
s:save_cpo	vim82\syntax\euphoria3.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\syntax\euphoria4.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\syntax\j.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\syntax\named.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	vim82\syntax\teraterm.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_exc	vim82\autoload\sqlcomplete.vim	/^let s:save_exc              = ""$/;"	v
s:save_exc	vim82\autoload\sqlcomplete.vim	/^let s:save_exc = g:omni_syntax_group_exclude_sql$/;"	v
s:save_expandtab	vim82\ftplugin\bzl.vim	/^let s:save_expandtab = &l:expandtab$/;"	v
s:save_inc	vim82\autoload\sqlcomplete.vim	/^let s:save_inc              = ""$/;"	v
s:save_inc	vim82\autoload\sqlcomplete.vim	/^let s:save_inc = g:omni_syntax_group_include_sql$/;"	v
s:save_original_options	plugins\kaoriya\plugin\scrnmode.vim	/^let s:save_original_options = 0$/;"	v
s:save_prev_table	vim82\autoload\sqlcomplete.vim	/^let s:save_prev_table       = ""$/;"	v
s:save_shiftwidth	vim82\ftplugin\bzl.vim	/^let s:save_shiftwidth = &l:shiftwidth$/;"	v
s:save_softtabstop	vim82\ftplugin\bzl.vim	/^let s:save_softtabstop = &l:softtabstop$/;"	v
s:save_tabstop	vim82\ftplugin\bzl.vim	/^let s:save_tabstop = &l:tabstop$/;"	v
s:savecpo	vim82\compiler\perl.vim	/^let s:savecpo = &cpo$/;"	v
s:script_path	vim82\autoload\phpcomplete.vim	/^let s:script_path = fnamemodify(resolve(expand('<sfile>:p')), ':h')$/;"	v
s:searchpairflags	vim82\indent\php.vim	/^let s:searchpairflags = 'bWr'$/;"	v
s:section	vim82\ftplugin\php.vim	/^let s:section = '\\(.*\\%#\\)\\@!\\_^\\s*\\zs\\('.s:function.'\\|'.s:class.'\\|'.s:interface.'\\)'$/;"	v
s:section_end	vim82\indent\sas.vim	/^let s:section_end = '\\v%(^|;)\\s*%(quit|enddata)\\s*;'$/;"	v
s:section_run	vim82\indent\sas.vim	/^let s:section_run = '\\v%(^|;)\\s*run\\s*;'$/;"	v
s:section_str	vim82\indent\sas.vim	/^let s:section_str = '\\v%(^|;)\\s*%(data|proc)>'$/;"	v
s:sectionend	vim82\ftplugin\j.vim	/^let s:sectionend = '\\s*)\\s*'$/;"	v
s:sections	vim82\syntax\debcontrol.vim	/^let s:sections = [$/;"	v
s:sectionstart	vim82\ftplugin\j.vim	/^let s:sectionstart = '\\%(\\s*Note\\|.\\{-}\\<\\%([0-4]\\|13\\|noun\\|adverb\\|conjunction\\|verb\\|monad\\|dyad\\)\\s\\+\\%(:\\s*0\\|def\\s\\+0\\|define\\)\\)\\>.*'$/;"	v
s:settings	vim82\syntax\2html.vim	/^let s:settings = tohtml#GetUserSettings()$/;"	v
s:sgml_cpo_save	vim82\syntax\sgml.vim	/^let s:sgml_cpo_save = &cpo$/;"	v
s:sh_fold_functions	vim82\syntax\sh.vim	/^ let s:sh_fold_functions= and(g:sh_fold_enabled,1)$/;"	v
s:sh_fold_heredoc	vim82\syntax\sh.vim	/^ let s:sh_fold_heredoc  = and(g:sh_fold_enabled,2)$/;"	v
s:sh_fold_ifdofor	vim82\syntax\sh.vim	/^ let s:sh_fold_ifdofor  = and(g:sh_fold_enabled,4)$/;"	v
s:sh_indent_defaults	vim82\indent\sh.vim	/^let s:sh_indent_defaults = {$/;"	v
s:sh_maxlines	vim82\syntax\sh.vim	/^  let s:sh_maxlines= 25$/;"	v
s:sh_maxlines	vim82\syntax\sh.vim	/^ let s:sh_maxlines = 2*s:sh_minlines$/;"	v
s:sh_maxlines	vim82\syntax\sh.vim	/^ let s:sh_maxlines= g:sh_maxlines$/;"	v
s:sh_minlines	vim82\syntax\sh.vim	/^ let s:sh_minlines = 200$/;"	v
s:sh_minlines	vim82\syntax\sh.vim	/^ let s:sh_minlines= g:sh_minlines$/;"	v
s:shell	vim82\syntax\sh.vim	/^  let s:shell = resolve("\/bin\/sh")$/;"	v
s:shell	vim82\syntax\sh.vim	/^  let s:shell = resolve("\/usr\/bin\/sh")$/;"	v
s:shell	vim82\syntax\sh.vim	/^ let s:shell = ""$/;"	v
s:shortmess	vim82\syntax\hitest.vim	/^let s:shortmess   = &shortmess$/;"	v
s:single_dent	vim82\indent\eiffel.vim	/^let s:single_dent = '^[^-]\\+[[:alnum:]]\\+ is\\(\\s*\\(--\\).*\\)\\=$'$/;"	v
s:skip	vim82\indent\cobol.vim	/^let s:skip = 'getline(".") =~ "^.\\\\{6\\\\}[*\/$-]\\\\|\\"[^\\"]*\\""'$/;"	v
s:skip_expr	vim82\indent\javascript.vim	/^let s:skip_expr = "s:SynAt(line('.'),col('.')) =~? b:syng_strcom"$/;"	v
s:skip_expr	vim82\indent\ruby.vim	/^let s:skip_expr =$/;"	v
s:skip_expr	vim82\indent\typescript.vim	/^let s:skip_expr = "synIDattr(synID(line('.'),col('.'),1),'name') =~ '".s:syng_strcom."'"$/;"	v
s:sol	vim82\ftplugin\sh.vim	/^    let s:sol = '\\%(;\\s*\\|^\\s*\\)\\@<='  " start of line$/;"	v
s:spacing_errors	vim82\syntax\changelog.vim	/^  let s:spacing_errors = 1$/;"	v
s:spacing_errors	vim82\syntax\changelog.vim	/^  let s:spacing_errors = b:changelog_spacing_errors$/;"	v
s:spacing_errors	vim82\syntax\changelog.vim	/^  let s:spacing_errors = g:changelog_spacing_errors$/;"	v
s:spc	vim82\spell\he.vim	/^let s:spc = &l:spc$/;"	v
s:spc	vim82\spell\yi.vim	/^let s:spc = &l:spc$/;"	v
s:spell_cluster	vim82\syntax\ruby.vim	/^let s:spell_cluster = exists('ruby_spellcheck_strings') ? ',@Spell' : ''$/;"	v
s:spellfile_URL	vim82\autoload\spellfile.vim	/^let s:spellfile_URL = ''    " Start with nothing so that s:donedict is reset.$/;"	v
s:splat_regex	vim82\indent\ruby.vim	/^let s:splat_regex = '[[,(]\\s*\\*\\s*\\%(#.*\\)\\=$'$/;"	v
s:sql_file_procedure	vim82\autoload\sqlcomplete.vim	/^let s:sql_file_procedure    = ""$/;"	v
s:sql_file_table	vim82\autoload\sqlcomplete.vim	/^let s:sql_file_table        = ""$/;"	v
s:sql_file_view	vim82\autoload\sqlcomplete.vim	/^let s:sql_file_view         = ""$/;"	v
s:st	vim82\syntax\tt2.vim	/^        let s:st = strpart(s:str,0,stridx(s:str,' '))$/;"	v
s:start_pat	vim82\indent\matlab.vim	/^let s:start_pat = '\\C\\<\\%(function\\|' . s:open_pat . '\\)\\>'$/;"	v
s:startcol	vim82\syntax\2html.vim	/^      let s:startcol = s:col " The start column for processing text$/;"	v
s:stopped	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:stopped = 1$/;"	v
s:str	vim82\syntax\tt2.vim	/^        let s:str = substitute(s:str,'[^ ]* ','',"")$/;"	v
s:str	vim82\syntax\tt2.vim	/^    let s:str = b:tt2_syn_tags . ' '$/;"	v
s:str	vim82\syntax\tt2.vim	/^    let s:str = substitute(s:str,' \\+',' ','g')$/;"	v
s:str	vim82\syntax\tt2.vim	/^    let s:str = substitute(s:str,'^ \\+','','g')$/;"	v
s:strdisplaywidth	plugins\autofmt\autoload\autofmt\compat.vim	/^  let s:strdisplaywidth = function('strdisplaywidth')$/;"	v
s:structureHead	vim82\indent\php.vim	/^let s:structureHead = '^\\s*\\%(' . s:blockstart . '\\)\\|'. s:functionDecl . s:endline . '\\|\\<new\\s\\+class\\>'$/;"	v
s:stylelist	vim82\syntax\2html.vim	/^    let s:stylelist[s:id] = '.FoldColumn { ' . s:CSS1(s:id) . '}'$/;"	v
s:stylelist	vim82\syntax\2html.vim	/^  let s:stylelist = { s:LINENR_ID : ".LineNr { " . s:CSS1( s:LINENR_ID ) . "}" }$/;"	v
s:stylelist	vim82\syntax\2html.vim	/^  let s:stylelist = {}$/;"	v
s:subtype	vim82\syntax\liquid.vim	/^  let s:subtype = exists('b:liquid_subtype') ? b:liquid_subtype : ''$/;"	v
s:suffixesadd	vim82\ftplugin\eruby.vim	/^let s:suffixesadd = &l:suffixesadd$/;"	v
s:supported	vim82\syntax\debchangelog.vim	/^let s:supported = [$/;"	v
s:supported	vim82\syntax\debsources.vim	/^let s:supported = [$/;"	v
s:syn_blocks	vim82\indent\hog.vim	/^let s:syn_blocks = '\\<SnortRuleTypeBody\\>'$/;"	v
s:syn_list	vim82\autoload\sqlcomplete.vim	/^let s:syn_list              = []$/;"	v
s:syn_remove_words	vim82\autoload\syntaxcomplete.vim	/^let s:syn_remove_words = 'matchgroup=,contains,'.$/;"	v
s:syn_value	vim82\autoload\sqlcomplete.vim	/^let s:syn_value             = []$/;"	v
s:syng_linecom	vim82\indent\typescript.vim	/^let s:syng_linecom = 'linecomment\\c'$/;"	v
s:syng_multiline	vim82\indent\typescript.vim	/^let s:syng_multiline = 'comment\\c'$/;"	v
s:syng_strcom	vim82\indent\falcon.vim	/^let s:syng_strcom = '\\<falcon\\%(String\\|StringEscape\\|Comment\\)\\>'$/;"	v
s:syng_strcom	vim82\indent\ruby.vim	/^let s:syng_strcom = s:syng_stringdoc + [$/;"	v
s:syng_strcom	vim82\indent\typescript.vim	/^let s:syng_strcom = 'string\\|regex\\|comment\\c'$/;"	v
s:syng_string	vim82\indent\falcon.vim	/^let s:syng_string = '\\<falcon\\%(String\\|StringEscape\\)\\>'$/;"	v
s:syng_string	vim82\indent\ruby.vim	/^let s:syng_string =$/;"	v
s:syng_string	vim82\indent\typescript.vim	/^let s:syng_string = 'regex\\c'$/;"	v
s:syng_stringdoc	vim82\indent\ruby.vim	/^let s:syng_stringdoc = s:syng_string + ['Documentation']$/;"	v
s:tabidx	vim82\syntax\2html.vim	/^		  let s:tabidx = s:tabidx+1$/;"	v
s:tabidx	vim82\syntax\2html.vim	/^	  let s:tabidx = 0$/;"	v
s:tablist	vim82\syntax\2html.vim	/^	    let s:tablist = [ &ts ]$/;"	v
s:tablist	vim82\syntax\2html.vim	/^	  let s:tablist = split(&vts,',')$/;"	v
s:tabwidth	vim82\syntax\2html.vim	/^		let s:tabwidth += s:tablist[s:tabidx]$/;"	v
s:tabwidth	vim82\syntax\2html.vim	/^	  let s:tabwidth = 0$/;"	v
s:tag	vim82\indent\haml.vim	/^let s:tag = '\\%([%.#][[:alnum:]_-]\\+\\|'.s:attributes.'\\)*[<>]*'$/;"	v
s:tag_close	vim82\syntax\2html.vim	/^  let s:tag_close = ' \/>'$/;"	v
s:tag_close	vim82\syntax\2html.vim	/^  let s:tag_close = '>'$/;"	v
s:tagname	vim82\indent\html.vim	/^let s:tagname = '\\w\\+\\(-\\w\\+\\)*'$/;"	v
s:taintopt	vim82\compiler\perl.vim	/^	let s:taintopt = ''$/;"	v
s:taintopt	vim82\compiler\perl.vim	/^	let s:taintopt = 'T'$/;"	v
s:tbl_alias	vim82\autoload\sqlcomplete.vim	/^let s:tbl_alias             = []$/;"	v
s:tbl_cols	vim82\autoload\sqlcomplete.vim	/^let s:tbl_cols              = []$/;"	v
s:tbl_name	vim82\autoload\sqlcomplete.vim	/^let s:tbl_name              = []$/;"	v
s:tclpath	vim82\syntax\vim.vim	/^    let s:tclpath= fnameescape(s:tclpath)$/;"	v
s:tclpath	vim82\syntax\vim.vim	/^ let s:tclpath= fnameescape(expand("<sfile>:p:h")."\/tcl.vim")$/;"	v
s:temp	vim82\syntax\perl6.vim	/^    let s:temp = split(s:words_space)$/;"	v
s:temp	vim82\syntax\perl6.vim	/^let s:temp = split(s:words_space)$/;"	v
s:terminated	vim82\indent\php.vim	/^let s:terminated = '\\%(\\%(;\\%(\\s*\\%(?>\\|}\\)\\)\\=\\|<<<\\s*[''"]\\=\\a\\w*[''"]\\=$\\|^\\s*}\\|^\\s*'.s:PHP_validVariable.':\\)'.s:endline.'\\)'$/;"	v
s:ternary	vim82\indent\typescript.vim	/^let s:ternary = '^\\s\\+[?|:]'$/;"	v
s:ternary_q	vim82\indent\typescript.vim	/^let s:ternary_q = '^\\s\\+?'$/;"	v
s:test	vim82\ftplugin\fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	vim82\indent\fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:test	vim82\syntax\fortran.vim	/^      let s:test = strpart(getline(s:ln),0,5)$/;"	v
s:texMathDelimList	vim82\syntax\tex.vim	/^    let s:texMathDelimList= s:texMathDelimList + [$/;"	v
s:texMathDelimList	vim82\syntax\tex.vim	/^  let s:texMathDelimList=[$/;"	v
s:texMathList	vim82\syntax\tex.vim	/^    let s:texMathList= s:texMathList + [$/;"	v
s:texMathList	vim82\syntax\tex.vim	/^  let s:texMathList=[$/;"	v
s:tex_comment_nospell	vim82\syntax\tex.vim	/^ let s:tex_comment_nospell= 0$/;"	v
s:tex_comment_nospell	vim82\syntax\tex.vim	/^ let s:tex_comment_nospell= 1$/;"	v
s:tex_conceal	vim82\syntax\rhelp.vim	/^  let s:tex_conceal = 'gm'$/;"	v
s:tex_conceal	vim82\syntax\rhelp.vim	/^  let s:tex_conceal = g:tex_conceal$/;"	v
s:tex_conceal	vim82\syntax\tex.vim	/^ let s:tex_conceal= 'abdmgsS'$/;"	v
s:tex_conceal	vim82\syntax\tex.vim	/^ let s:tex_conceal= g:tex_conceal$/;"	v
s:tex_excludematcher	vim82\syntax\tex.vim	/^ let s:tex_excludematcher= 0$/;"	v
s:tex_excludematcher	vim82\syntax\tex.vim	/^ let s:tex_excludematcher= g:tex_excludematcher$/;"	v
s:tex_fast	vim82\syntax\tex.vim	/^  let s:tex_fast= ""$/;"	v
s:tex_fast	vim82\syntax\tex.vim	/^  let s:tex_fast= g:tex_fast$/;"	v
s:tex_fast	vim82\syntax\tex.vim	/^let s:tex_fast= "bcmMprsSvV"$/;"	v
s:tex_fold_enabled	vim82\syntax\tex.vim	/^ let s:tex_fold_enabled= 0$/;"	v
s:tex_fold_enabled	vim82\syntax\tex.vim	/^ let s:tex_fold_enabled= 1$/;"	v
s:tex_no_error	vim82\syntax\tex.vim	/^ let s:tex_no_error= 0$/;"	v
s:tex_no_error	vim82\syntax\tex.vim	/^ let s:tex_no_error= 1$/;"	v
s:tex_nospell	vim82\syntax\tex.vim	/^ let s:tex_nospell = 0$/;"	v
s:tex_nospell	vim82\syntax\tex.vim	/^ let s:tex_nospell = 1$/;"	v
s:tex_subscripts	vim82\syntax\tex.vim	/^ let s:tex_subscripts= '[0-9aehijklmnoprstuvx,+-\/().]'$/;"	v
s:tex_subscripts	vim82\syntax\tex.vim	/^ let s:tex_subscripts= g:tex_subscripts$/;"	v
s:tex_superscripts	vim82\syntax\tex.vim	/^ let s:tex_superscripts= '[0-9a-zA-W.,:;+-<>\/()=]'$/;"	v
s:tex_superscripts	vim82\syntax\tex.vim	/^ let s:tex_superscripts= g:tex_superscripts$/;"	v
s:thiswin	vim82\optwin.vim	/^let s:thiswin = winnr()$/;"	v
s:tmp	plugins\autofmt\autoload\autofmt\unicode.vim	/^let s:tmp = []$/;"	v
s:token_pattern	vim82\indent\dtd.vim	/^let s:token_pattern = '^[^[:space:]]\\+'$/;"	v
s:tp_regex	vim82\ftplugin\context.vim	/^  let s:tp_regex = '?^$\\|^\\s*\\\\\\(item\\|start\\|stop\\|blank\\|\\%(sub\\)*section\\|chapter\\|\\%(sub\\)*subject\\|title\\|part\\)'$/;"	v
s:treedepthstring	vim82\autoload\netrw.vim	/^ let s:treedepthstring= "| "$/;"	v
s:treedepthstring	vim82\autoload\netrw.vim	/^ let s:treedepthstring= "‚îÇ "$/;"	v
s:trust_user_indent	vim82\indent\eiffel.vim	/^let s:trust_user_indent = '\\(+\\)\\(\\s*\\(--\\).*\\)\\=$'$/;"	v
s:trytcl	vim82\syntax\vim.vim	/^ let s:trytcl= (&shell !~ '\\<\\%(bash\\>\\|4[nN][tT]\\|\\<zsh\\)\\>\\%(\\.exe\\)\\=$')$/;"	v
s:trytcl	vim82\syntax\vim.vim	/^ let s:trytcl= 1$/;"	v
s:tutorfile	vim82\tutor\tutor.vim	/^let s:tutorfile = "\/tutor\/tutor"$/;"	v
s:tutorxx	vim82\tutor\tutor.vim	/^let s:tutorxx = $VIMRUNTIME . s:tutorfile . s:ext$/;"	v
s:type	vim82\indent\ocaml.vim	/^let s:type = '^\\s*\\%(class\\|let\\|type\\)\\>.*='$/;"	v
s:type	vim82\indent\sml.vim	/^let s:type = '^\\s*\\%(let\\|type\\)\\>.*='$/;"	v
s:typeSpecMatcher	vim82\indent\scala.vim	/^let s:typeSpecMatcher = '\\%(\\s*\\[\\_[^\\]]*\\]\\)'$/;"	v
s:uax14	plugins\autofmt\autoload\autofmt\japanese.vim	/^let s:uax14 = autofmt#uax14#import()$/;"	v
s:undo_ftplugin	vim82\ftplugin\ant.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\ant.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\aspvbs.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\aspvbs.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\config.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\config.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\eruby.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\eruby.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\haml.vim	/^  let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\haml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\hog.vim	/^let s:undo_ftplugin = "setl fo< com< cms< def< inc<"$/;"	v
s:undo_ftplugin	vim82\ftplugin\jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\jsp.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\jsp.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\php.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\php.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\sgml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\sgml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\svg.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\svg.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\tcsh.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\tcsh.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin . " | " . s:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\xhtml.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\xhtml.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_ftplugin	vim82\ftplugin\xsd.vim	/^    let s:undo_ftplugin = b:undo_ftplugin$/;"	v
s:undo_ftplugin	vim82\ftplugin\xsd.vim	/^let s:undo_ftplugin = ""$/;"	v
s:undo_spelllang	vim82\menu.vim	/^  let s:undo_spelllang = ['aun &Tools.&Spelling.&Find\\ More\\ Languages']$/;"	v
s:unselInputType	vim82\syntax\2html.vim	/^    let s:unselInputType = " type='invalid_input_type'"$/;"	v
s:unselInputType	vim82\syntax\2html.vim	/^    let s:unselInputType = ""$/;"	v
s:unselectable_styles	vim82\syntax\2html.vim	/^      let s:unselectable_styles = []$/;"	v
s:unstated	vim82\indent\php.vim	/^let s:unstated = '\\%(^\\s*'.s:blockstart.'.*)\\|\\%(\/\/.*\\)\\@<!\\<e'.'lse\\>\\)'.s:endline$/;"	v
s:unsupported	vim82\syntax\debchangelog.vim	/^let s:unsupported = [$/;"	v
s:unsupported	vim82\syntax\debsources.vim	/^let s:unsupported = [$/;"	v
s:urgency	vim82\syntax\debchangelog.vim	/^let s:urgency='urgency=\\(low\\|medium\\|high\\|emergency\\|critical\\)\\( [^[:space:],][^,]*\\)\\='$/;"	v
s:uses_script	vim82\syntax\2html.vim	/^let s:uses_script = s:settings.dynamic_folds || s:settings.line_ids$/;"	v
s:val	vim82\indent\sml.vim	/^let s:val = '^\\s*\\(val\\|external\\)\\>.*:'$/;"	v
s:values	vim82\autoload\csscomplete.vim	/^let s:values = split("all additive-symbols align-content align-items align-self animation animation-delay animation-direction animation-duration animation-fill-mode animation-iteration-count animation-name animation-play-state animation-timing-function backface-visibility background background-attachment background-blend-mode background-clip background-color background-image background-origin background-position background-repeat background-size block-size border border-block-end border-block-end-color border-block-end-style border-block-end-width border-block-start border-block-start-color border-block-start-style border-block-start-width border-bottom border-bottom-color border-bottom-left-radius border-bottom-right-radius border-bottom-style border-bottom-width border-collapse border-color border-image border-image-outset border-image-repeat border-image-slice border-image-source border-image-width border-inline-end border-inline-end-color border-inline-end-style border-inline-end-width border-inline-start border-inline-start-color border-inline-start-style border-inline-start-width border-left border-left-color border-left-style border-left-width border-radius border-right border-right-color border-right-style border-right-width border-spacing border-style border-top border-top-color border-top-left-radius border-top-right-radius border-top-style border-top-width border-width bottom box-decoration-break box-shadow box-sizing break-after break-before break-inside caption-side clear clip clip-path color columns column-count column-fill column-gap column-rule column-rule-color column-rule-style column-rule-width column-span column-width content counter-increment counter-reset cue cue-before cue-after cursor direction display empty-cells fallback filter flex flex-basis flex-direction flex-flow flex-grow flex-shrink flex-wrap float font font-family font-feature-settings font-kerning font-language-override font-size font-size-adjust font-stretch font-style font-synthesis font-variant font-variant-alternates font-variant-caps font-variant-east-asian font-variant-ligatures font-variant-numeric font-variant-position font-weight grid grid-area grid-auto-columns grid-auto-flow grid-auto-position grid-auto-rows grid-column grid-column-start grid-column-end grid-row grid-row-start grid-row-end grid-template grid-template-areas grid-template-rows grid-template-columns height hyphens image-rendering image-resolution image-orientation ime-mode inline-size isolation justify-content left letter-spacing line-break line-height list-style list-style-image list-style-position list-style-type margin margin-block-end margin-block-start margin-bottom margin-inline-end margin-inline-start margin-left margin-right margin-top marks mask mask-type max-block-size max-height max-inline-size max-width max-zoom min-block-size min-height min-inline-size min-width min-zoom mix-blend-mode negative object-fit object-position offset-block-end offset-block-start offset-inline-end offset-inline-start opacity order orientation orphans outline outline-color outline-offset outline-style outline-width overflow overflow-wrap overflow-x overflow-y pad padding padding-block-end padding-block-start padding-bottom padding-inline-end padding-inline-start padding-left padding-right padding-top page-break-after page-break-before page-break-inside pause-before pause-after pause perspective perspective-origin pointer-events position prefix quotes range resize rest rest-before rest-after right ruby-align ruby-merge ruby-position scroll-behavior scroll-snap-coordinate scroll-snap-destination scroll-snap-points-x scroll-snap-points-y scroll-snap-type scroll-snap-type-x scroll-snap-type-y shape-image-threshold shape-margin shape-outside speak speak-as suffix symbols system table-layout tab-size text-align text-align-last text-combine-upright text-decoration text-decoration-color text-decoration-line text-emphasis text-emphasis-color text-emphasis-position text-emphasis-style text-indent text-orientation text-overflow text-rendering text-shadow text-transform text-underline-position top touch-action transform transform-box transform-origin transform-style transition transition-delay transition-duration transition-property transition-timing-function unicode-bidi unicode-range user-zoom vertical-align visibility voice-balance voice-duration voice-family voice-pitch voice-rate voice-range voice-stress voice-volume white-space widows width will-change word-break word-spacing word-wrap writing-mode z-index zoom")$/;"	v
s:var_stmt	vim82\indent\typescript.vim	/^let s:var_stmt = '^\\s*var'$/;"	v
s:vcol	vim82\syntax\2html.vim	/^	      let s:vcol = virtcol([s:lnum, s:startcol + s:idx + s:offset - len(s:prevc)])$/;"	v
s:version	plugins\kaoriya\plugin\scrnmode.vim	/^let s:version = '1.1'$/;"	v
s:version_file	vim82\ftplugin\ruby.vim	/^  let s:version_file = findfile('.ruby-version', '.;')$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^    let s:vimproc_dll_basename = 'vimproc_cygwin64.dll'$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^  let s:vimproc_dll_basename = 'vimproc_cygwin.dll'$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^  let s:vimproc_dll_basename = 'vimproc_linux32.so'$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^  let s:vimproc_dll_basename = 'vimproc_linux64.so'$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^  let s:vimproc_dll_basename = 'vimproc_mac.so'$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^  let s:vimproc_dll_basename = 'vimproc_unix.so'$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^  let s:vimproc_dll_basename = has('win64') ?$/;"	v
s:vimproc_dll_basename	plugins\vimproc\autoload\vimproc.vim	/^  let s:vimproc_dll_basename = system($/;"	v
s:vimsyn_maxlines	vim82\syntax\vim.vim	/^ let s:vimsyn_maxlines= 60$/;"	v
s:vimsyn_maxlines	vim82\syntax\vim.vim	/^ let s:vimsyn_maxlines= g:vim_maxlines$/;"	v
s:warnopt	vim82\compiler\perl.vim	/^	let s:warnopt = 'W'$/;"	v
s:warnopt	vim82\compiler\perl.vim	/^	let s:warnopt = 'w'$/;"	v
s:way	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^  let s:way = 'prompt'$/;"	v
s:way	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^  let s:way = 'terminal'$/;"	v
s:whatterm	vim82\syntax\2html.vim	/^  let s:whatterm = "cterm"$/;"	v
s:whatterm	vim82\syntax\2html.vim	/^  let s:whatterm = "gui"$/;"	v
s:when_no_matched_or_others	vim82\ftplugin\sql.vim	/^let s:when_no_matched_or_others = '\\%(\\<when\\>\\%(\\s\\+\\%(\\%(\\<not\\>\\s\\+\\)\\?<matched\\>\\)\\|\\<others\\>\\)\\@!\\)'$/;"	v
s:whichwrap	vim82\syntax\hitest.vim	/^let s:whichwrap   = &whichwrap$/;"	v
s:whitespace	vim82\syntax\2html.vim	/^  let s:whitespace = ""$/;"	v
s:whitespace	vim82\syntax\2html.vim	/^  let s:whitespace = "white-space: pre-wrap; "$/;"	v
s:winbar_winids	vim82\pack\dist\opt\termdebug\plugin\termdebug.vim	/^let s:winbar_winids = []$/;"	v
s:words	vim82\autoload\clojurecomplete.vim	/^let s:words = ["*","*'","*1","*2","*3","*agent*","*allow-unresolved-vars*","*assert*","*clojure-version*","*command-line-args*","*compile-files*","*compile-path*","*compiler-options*","*data-readers*","*default-data-reader-fn*","*e","*err*","*file*","*flush-on-newline*","*fn-loader*","*in*","*math-context*","*ns*","*out*","*print-dup*","*print-length*","*print-level*","*print-meta*","*print-readably*","*read-eval*","*source-path*","*suppress-read*","*unchecked-math*","*use-context-classloader*","*verbose-defrecords*","*warn-on-reflection*","+","+'","-","-'","->","->>","->ArrayChunk","->Eduction","->Vec","->VecNode","->VecSeq","-cache-protocol-fn","-reset-methods",".","..","\/","<","<=","=","==",">",">=","EMPTY-NODE","Throwable->map","accessor","aclone","add-classpath","add-watch","agent","agent-error","agent-errors","aget","alength","alias","all-ns","alter","alter-meta!","alter-var-root","amap","ancestors","and","apply","areduce","array-map","as->","aset","aset-boolean","aset-byte","aset-char","aset-double","aset-float","aset-int","aset-long","aset-short","assert","assoc!","assoc","assoc-in","associative?","atom","await","await-for","await1","bases","bean","bigdec","bigint","biginteger","binding","bit-and","bit-and-not","bit-clear","bit-flip","bit-not","bit-or","bit-set","bit-shift-left","bit-shift-right","bit-test","bit-xor","boolean","boolean-array","booleans","bound-fn","bound-fn*","bound?","butlast","byte","byte-array","bytes","case","cast","cat","catch","char","char-array","char-escape-string","char-name-string","char?","chars","chunk","chunk-append","chunk-buffer","chunk-cons","chunk-first","chunk-next","chunk-rest","chunked-seq?","class","class?","clear-agent-errors","clojure-version","coll?","comment","commute","comp","comparator","compare","compare-and-set!","compile","complement","completing","concat","cond","cond->","cond->>","condp","conj!","conj","cons","constantly","construct-proxy","contains?","count","counted?","create-ns","create-struct","cycle","dec","dec'","decimal?","declare","dedupe","def","default-data-readers","definline","definterface","defmacro","defmethod","defmulti","defn","defn-","defonce","defprotocol","defrecord","defstruct","deftype","delay","delay?","deliver","denominator","deref","derive","descendants","destructure","disj!","disj","dissoc!","dissoc","distinct","distinct?","do","doall","dorun","doseq","dosync","dotimes","doto","double","double-array","doubles","drop","drop-last","drop-while","eduction","empty","empty?","ensure","ensure-reduced","enumeration-seq","error-handler","error-mode","eval","even?","every-pred","every?","ex-data","ex-info","extend","extend-protocol","extend-type","extenders","extends?","false?","ffirst","file-seq","filter","filterv","finally","find","find-keyword","find-ns","find-protocol-impl","find-protocol-method","find-var","first","flatten","float","float-array","float?","floats","flush","fn","fn","fn?","fnext","fnil","for","force","format","frequencies","future","future-call","future-cancel","future-cancelled?","future-done?","future?","gen-class","gen-interface","gensym","get","get-in","get-method","get-proxy-class","get-thread-bindings","get-validator","group-by","hash","hash-combine","hash-map","hash-ordered-coll","hash-set","hash-unordered-coll","identical?","identity","if","if-let","if-not","if-some","ifn?","import","in-ns","inc","inc'","init-proxy","instance?","int","int-array","integer?","interleave","intern","interpose","into","into-array","ints","io!","isa?","iterate","iterator-seq","juxt","keep","keep-indexed","key","keys","keyword","keyword?","last","lazy-cat","lazy-seq","let","let","letfn","line-seq","list","list*","list?","load","load-file","load-reader","load-string","loaded-libs","locking","long","long-array","longs","loop","loop","macroexpand","macroexpand-1","make-array","make-hierarchy","map","map-entry?","map-indexed","map?","mapcat","mapv","max","max-key","memfn","memoize","merge","merge-with","meta","method-sig","methods","min","min-key","mix-collection-hash","mod","monitor-enter","monitor-exit","munge","name","namespace","namespace-munge","neg?","new","newline","next","nfirst","nil?","nnext","not","not-any?","not-empty","not-every?","not=","ns","ns-aliases","ns-imports","ns-interns","ns-map","ns-name","ns-publics","ns-refers","ns-resolve","ns-unalias","ns-unmap","nth","nthnext","nthrest","num","number?","numerator","object-array","odd?","or","parents","partial","partition","partition-all","partition-by","pcalls","peek","persistent!","pmap","pop!","pop","pop-thread-bindings","pos?","pr","pr-str","prefer-method","prefers","primitives-classnames","print","print-ctor","print-dup","print-method","print-simple","print-str","printf","println","println-str","prn","prn-str","promise","proxy","proxy-call-with-super","proxy-mappings","proxy-name","proxy-super","push-thread-bindings","pvalues","quot","quote","rand","rand-int","rand-nth","random-sample","range","ratio?","rational?","rationalize","re-find","re-groups","re-matcher","re-matches","re-pattern","re-seq","read","read-line","read-string","reader-conditional","reader-conditional?","realized?","record?","recur","reduce","reduce-kv","reduced","reduced?","reductions","ref","ref-history-count","ref-max-history","ref-min-history","ref-set","refer","refer-clojure","reify","release-pending-sends","rem","remove","remove-all-methods","remove-method","remove-ns","remove-watch","repeat","repeatedly","replace","replicate","require","reset!","reset-meta!","resolve","rest","restart-agent","resultset-seq","reverse","reversible?","rseq","rsubseq","run!","satisfies?","second","select-keys","send","send-off","send-via","seq","seq?","seque","sequence","sequential?","set!","set","set-agent-send-executor!","set-agent-send-off-executor!","set-error-handler!","set-error-mode!","set-validator!","set?","short","short-array","shorts","shuffle","shutdown-agents","slurp","some","some->","some->>","some-fn","some?","sort","sort-by","sorted-map","sorted-map-by","sorted-set","sorted-set-by","sorted?","special-symbol?","spit","split-at","split-with","str","string?","struct","struct-map","subs","subseq","subvec","supers","swap!","symbol","symbol?","sync","tagged-literal","tagged-literal?","take","take-last","take-nth","take-while","test","the-ns","thread-bound?","throw","time","to-array","to-array-2d","trampoline","transduce","transient","tree-seq","true?","try","type","unchecked-add","unchecked-add-int","unchecked-byte","unchecked-char","unchecked-dec","unchecked-dec-int","unchecked-divide-int","unchecked-double","unchecked-float","unchecked-inc","unchecked-inc-int","unchecked-int","unchecked-long","unchecked-multiply","unchecked-multiply-int","unchecked-negate","unchecked-negate-int","unchecked-remainder-int","unchecked-short","unchecked-subtract","unchecked-subtract-int","underive","unquote","unquote-splicing","unreduced","unsigned-bit-shift-right","update","update-in","update-proxy","use","val","vals","var","var-get","var-set","var?","vary-meta","vec","vector","vector-of","vector?","volatile!","volatile?","vreset!","vswap!","when","when-first","when-let","when-not","when-some","while","with-bindings","with-bindings*","with-in-str","with-loading-context","with-local-vars","with-meta","with-open","with-out-str","with-precision","with-redefs","with-redefs-fn","xml-seq","zero?","zipmap"]$/;"	v
s:words	vim82\syntax\perl6.vim	/^    let s:words = join(s:temp, "\\\\|")$/;"	v
s:words	vim82\syntax\perl6.vim	/^let s:words = join(s:temp, "\\\\|")$/;"	v
s:words_space	vim82\syntax\perl6.vim	/^    let s:words_space = join(words, " ")$/;"	v
s:words_space	vim82\syntax\perl6.vim	/^let s:words_space = join(s:routines, " ")$/;"	v
s:wrapscan	vim82\syntax\hitest.vim	/^let s:wrapscan    = &wrapscan$/;"	v
s:write_timeout	plugins\vimproc\autoload\vimproc.vim	/^let s:write_timeout = 100$/;"	v
s:wsh_cpo_save	vim82\syntax\wsh.vim	/^let s:wsh_cpo_save = &cpo$/;"	v
s:xml_cpo_save	vim82\syntax\xml.vim	/^let s:xml_cpo_save = &cpo$/;"	v
s:z	vim82\indent\javascript.vim	/^let s:z = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:zflag	vim82\indent\matlab.vim	/^let s:zflag = has('patch-7.4.984') ? 'z' : ''$/;"	v
s:zipfile_escape	vim82\autoload\zip.vim	/^let s:zipfile_escape = ' ?&;\\'$/;"	v
save_cursor	vim82\autoload\RstFold.vim	/^  let save_cursor = getcurpos()$/;"	v
save_mark	vim82\autoload\RstFold.vim	/^  let save_mark = getpos("'[")$/;"	v
savefile	lua\jit\bcsave.lua	/^local function savefile(name, mode)$/;"	f
scala#ConditionalConfirm	vim82\indent\scala.vim	/^function! scala#ConditionalConfirm(msg)$/;"	f
scala#CountBrackets	vim82\indent\scala.vim	/^function! scala#CountBrackets(line, openBracket, closedBracket)$/;"	f
scala#CountCurlies	vim82\indent\scala.vim	/^function! scala#CountCurlies(line)$/;"	f
scala#CountParens	vim82\indent\scala.vim	/^function! scala#CountParens(line)$/;"	f
scala#CurlyMatcher	vim82\indent\scala.vim	/^function! scala#CurlyMatcher()$/;"	f
scala#GetLine	vim82\indent\scala.vim	/^function! scala#GetLine(lnum)$/;"	f
scala#GetLineAndColumnThatMatchesBracket	vim82\indent\scala.vim	/^function! scala#GetLineAndColumnThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineAndColumnThatMatchesCurly	vim82\indent\scala.vim	/^function! scala#GetLineAndColumnThatMatchesCurly()$/;"	f
scala#GetLineAndColumnThatMatchesParen	vim82\indent\scala.vim	/^function! scala#GetLineAndColumnThatMatchesParen()$/;"	f
scala#GetLineThatMatchesBracket	vim82\indent\scala.vim	/^function! scala#GetLineThatMatchesBracket(openBracket, closedBracket)$/;"	f
scala#GetLineThatMatchesCurly	vim82\indent\scala.vim	/^function! scala#GetLineThatMatchesCurly()$/;"	f
scala#GetLineThatMatchesParen	vim82\indent\scala.vim	/^function! scala#GetLineThatMatchesParen()$/;"	f
scala#GetPrevCodeLine	vim82\indent\scala.vim	/^function! scala#GetPrevCodeLine(lnum)$/;"	f
scala#InvertBracketType	vim82\indent\scala.vim	/^function! scala#InvertBracketType(openBracket, closedBracket)$/;"	f
scala#IsParentCase	vim82\indent\scala.vim	/^function! scala#IsParentCase()$/;"	f
scala#LineCompletesBrackets	vim82\indent\scala.vim	/^function! scala#LineCompletesBrackets(openBracket, closedBracket)$/;"	f
scala#LineCompletesDefValr	vim82\indent\scala.vim	/^function! scala#LineCompletesDefValr(lnum, line)$/;"	f
scala#LineCompletesIfElse	vim82\indent\scala.vim	/^function! scala#LineCompletesIfElse(lnum, line)$/;"	f
scala#LineCompletesXML	vim82\indent\scala.vim	/^function! scala#LineCompletesXML(lnum, line)$/;"	f
scala#LineEndsInIncomplete	vim82\indent\scala.vim	/^function! scala#LineEndsInIncomplete(line)$/;"	f
scala#LineIsAClosingXML	vim82\indent\scala.vim	/^function! scala#LineIsAClosingXML(line)$/;"	f
scala#LineIsCompleteIf	vim82\indent\scala.vim	/^function! scala#LineIsCompleteIf(line)$/;"	f
scala#MatchesIncompleteDefValr	vim82\indent\scala.vim	/^function! scala#MatchesIncompleteDefValr(line)$/;"	f
scala#NumberOfBraceGroups	vim82\indent\scala.vim	/^function! scala#NumberOfBraceGroups(line)$/;"	f
scala#SpecificLineCompletesBrackets	vim82\indent\scala.vim	/^function! scala#SpecificLineCompletesBrackets(lnum, openBracket, closedBracket)$/;"	f
scala#Test	vim82\indent\scala.vim	/^function! scala#Test(lnum, line, openBracket, closedBracket)$/;"	f
scala#Testhelper	vim82\indent\scala.vim	/^function! scala#Testhelper(lnum, line, openBracket, closedBracket, iteration)$/;"	f
searchsyn	vim82\ftplugin\ruby.vim	/^function! s:searchsyn(pattern, syn, flags, mode) abort$/;"	f
sections	vim82\ftplugin\eiffel.vim	/^  let sections = '^\\%(note\\|indexing\\|' .$/;"	v
sed_delimiter	vim82\syntax\sed.vim	/^    let __sed_delimiter = escape(nr2char(__sed_i), __sed_metacharacters)$/;"	v
sed_i	vim82\syntax\sed.vim	/^    let __sed_i = __sed_i + 1$/;"	v
sed_i	vim82\syntax\sed.vim	/^let __sed_i = __sed_i + 1$/;"	v
sed_i	vim82\syntax\sed.vim	/^let __sed_i = char2nr(" ") " ASCII: 32, EBCDIC: 64$/;"	v
sed_last	vim82\syntax\sed.vim	/^    let __sed_last = 126$/;"	v
sed_last	vim82\syntax\sed.vim	/^    let __sed_last = 255$/;"	v
sed_metacharacters	vim82\syntax\sed.vim	/^let __sed_metacharacters = '$*.\\^[~'$/;"	v
see_opt	vim82\doc\makehtml.awk	/^function see_opt() {$/;"	f
see_tag	vim82\doc\makehtml.awk	/^function see_tag() {$/;"	f
sendToVim	vim82\tools\xcmdsrv_client.c	/^sendToVim($/;"	f
separator	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:separator() abort$/;"	f
server	vim82\tools\demoserver.py	/^    server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)$/;"	v	class:ThreadedTCPServer
server_thread	vim82\tools\demoserver.py	/^    server_thread = threading.Thread(target=server.serve_forever)$/;"	v	class:ThreadedTCPServer
set_compression	vim82\autoload\gzip.vim	/^fun s:set_compression(line)$/;"	f
set_guicolors	vim82\syntax\dircolors.vim	/^function! s:set_guicolors() abort$/;"	f
sh	vim82\autoload\context.vim	/^function! s:sh()$/;"	f
sign	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:sign(status)$/;"	f
skip_back_quote	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:skip_back_quote(script, i) abort "{{{$/;"	f
skip_double_quote	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:skip_double_quote(script, i) abort "{{{$/;"	f
skip_else	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:skip_else(args, script, i) abort "{{{$/;"	f
skip_single_quote	plugins\vimproc\autoload\vimproc\parser.vim	/^function! s:skip_single_quote(script, i) abort "{{{$/;"	f
socket	vim82\tools\demoserver.py	/^import socket$/;"	i
socketserver	vim82\tools\demoserver.py	/^    import SocketServer as socketserver$/;"	i
socketserver	vim82\tools\demoserver.py	/^    import socketserver$/;"	i
spellfile#GetDirChoices	vim82\autoload\spellfile.vim	/^function! spellfile#GetDirChoices()$/;"	f
spellfile#LoadFile	vim82\autoload\spellfile.vim	/^function! spellfile#LoadFile(lang)$/;"	f
spellfile#Nread	vim82\autoload\spellfile.vim	/^function! spellfile#Nread(fname)$/;"	f
spellfile#WritableSpellDir	vim82\autoload\spellfile.vim	/^function! spellfile#WritableSpellDir()$/;"	f
split	plugins\vimproc\autoload\vimproc.vim	/^  function! s:split(str, sep) abort$/;"	f
split	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:split(path) abort$/;"	f
sqlcomplete#Complete	vim82\autoload\sqlcomplete.vim	/^function! sqlcomplete#Complete(findstart, base)$/;"	f
sqlcomplete#DrillIntoTable	vim82\autoload\sqlcomplete.vim	/^function! sqlcomplete#DrillIntoTable()$/;"	f
sqlcomplete#DrillOutOfColumns	vim82\autoload\sqlcomplete.vim	/^function! sqlcomplete#DrillOutOfColumns()$/;"	f
sqlcomplete#Map	vim82\autoload\sqlcomplete.vim	/^function! sqlcomplete#Map(type)$/;"	f
sqlcomplete#PreCacheSyntax	vim82\autoload\sqlcomplete.vim	/^function! sqlcomplete#PreCacheSyntax(...)$/;"	f
sqlcomplete#ResetCacheSyntax	vim82\autoload\sqlcomplete.vim	/^function! sqlcomplete#ResetCacheSyntax(...)$/;"	f
start	lua\jit\p.lua	/^local function start(mode, outfile)$/;"	f
start	vim82\indent\testdir\runtest.vim	/^	    let start = lnum$/;"	v
start	vim82\indent\testdir\runtest.vim	/^      let start = search('\\<START_INDENT\\>')$/;"	v
start_block	vim82\indent\sh.vim	/^function! s:start_block(line)$/;"	f
stepmatch	vim82\ftplugin\cucumber.vim	/^function! s:stepmatch(receiver,target)$/;"	f
steps	vim82\ftplugin\cucumber.vim	/^function! s:steps(lnum)$/;"	f
str2hd	plugins\vimproc\autoload\vimproc.vim	/^function! s:str2hd(str) abort$/;"	f
str2list	plugins\vimproc\autoload\vimproc.vim	/^function! s:str2list(str) abort$/;"	f
strdisplaywidth	plugins\autofmt\autoload\autofmt\compat.vim	/^  function s:strdisplaywidth(str, ...)$/;"	f
strip	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:strip(str)$/;"	f
strip	vim82\indent\bst.vim	/^function! s:strip(lnum)$/;"	f
strip_namespace_and_macro_chars	vim82\indent\clojure.vim	/^	function! s:strip_namespace_and_macro_chars(word)$/;"	f
stripped	vim82\indent\cobol.vim	/^function! s:stripped(lnum)$/;"	f
substitute_items	vim82\ftplugin\changelog.vim	/^  function! s:substitute_items(str, date, user, prefix)$/;"	f
suflist	vim82\syntax\netrw.vim	/^  let suflist= escape(substitute(suflist," ",'\\\\|','g'),'.~')$/;"	v
suflist	vim82\syntax\netrw.vim	/^  let suflist= join(split(&suffixes,','))$/;"	v
suppress_doxygen	vim82\syntax\doxygen.vim	/^let suppress_doxygen=1$/;"	v
sw	vim82\indent\javascript.vim	/^  function s:sw()$/;"	f
syn	vim82\indent\cucumber.vim	/^function! s:syn(lnum)$/;"	f
syn_id_name	vim82\indent\clojure.vim	/^	function! s:syn_id_name()$/;"	f
sync	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:sync(bang, bundle) abort$/;"	f
synid	vim82\ftplugin\ruby.vim	/^function! s:synid() abort$/;"	f
syntax_keyword	vim82\syntax\clojure.vim	/^function! s:syntax_keyword(dict)$/;"	f
syntax_manual	vim82\syntax\manual.vim	/^let syntax_manual = 1$/;"	v
syntax_on	vim82\syntax\synload.vim	/^let syntax_on = 1$/;"	v
syntaxcomplete#Complete	vim82\autoload\syntaxcomplete.vim	/^function! syntaxcomplete#Complete(findstart, base)$/;"	f
syntaxcomplete#OmniSyntaxList	vim82\autoload\syntaxcomplete.vim	/^function! syntaxcomplete#OmniSyntaxList(...)$/;"	f
syntaxset	vim82\syntax\manual.vim	/^augroup syntaxset$/;"	a
syntaxset	vim82\syntax\nosyntax.vim	/^augroup syntaxset$/;"	a
syntaxset	vim82\syntax\syntax.vim	/^augroup syntaxset$/;"	a
sys	vim82\tools\demoserver.py	/^import sys$/;"	i
system	plugins\vimproc\autoload\vimproc.vim	/^function! s:system(cmdline, is_passwd, input, timeout, is_pty) abort "{{{$/;"	f
system	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! s:system(cmd) abort$/;"	f
system	vim82\autoload\rust.vim	/^function! s:system(pwd, cmd)$/;"	f
system_with_default	vim82\ftplugin\changelog.vim	/^  function! s:system_with_default(command, default)$/;"	f
sz 	lua\jit\dis_x86.lua	/^  sz = function(ctx, name, pat)$/;"	f
t	vim82\macros\hanoi\hanoi.vim	/^map t 7$/;"	m
t	vim82\macros\hanoi\hanoi.vim	/^map! t 7$/;"	m
t	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap t y$/;"	m
tads_minlines	vim82\syntax\tads.vim	/^  let tads_minlines = 15$/;"	v
tads_sync_dist	vim82\syntax\tads.vim	/^  let tads_sync_dist = 100$/;"	v
tar	vim82\plugin\tarPlugin.vim	/^augroup tar$/;"	a
tar#Browse	vim82\autoload\tar.vim	/^fun! tar#Browse(tarfile)$/;"	f
tar#Diff	vim82\autoload\tar.vim	/^fun! tar#Diff(userfname,fname)$/;"	f
tar#Extract	vim82\autoload\tar.vim	/^fun! tar#Extract()$/;"	f
tar#Read	vim82\autoload\tar.vim	/^fun! tar#Read(fname,mode)$/;"	f
tar#Vimuntar	vim82\autoload\tar.vim	/^fun! tar#Vimuntar(...)$/;"	f
tar#Write	vim82\autoload\tar.vim	/^fun! tar#Write(fname)$/;"	f
tempname	vim82\autoload\gzip.vim	/^fun s:tempname(name)$/;"	f
test_one	plugins\golang\ftplugin\go\test.sh	/^test_one() {$/;"	f
text	vim82\indent\testdir\runtest.vim	/^	    let text = getline(indent_at)$/;"	v
thesocket	vim82\tools\demoserver.py	/^thesocket = None$/;"	v
threading	vim82\tools\demoserver.py	/^import threading$/;"	i
toend	vim82\ftplugin\cobol.vim	/^function! s:toend(direction)$/;"	f
tohtml#CharsetFromEncoding	vim82\autoload\tohtml.vim	/^function! tohtml#CharsetFromEncoding(settings) "{{{$/;"	f
tohtml#Convert2HTML	vim82\autoload\tohtml.vim	/^func! tohtml#Convert2HTML(line1, line2) "{{{$/;"	f
tohtml#Diff2HTML	vim82\autoload\tohtml.vim	/^func! tohtml#Diff2HTML(win_list, buf_list) "{{{$/;"	f
tohtml#EncodingFromCharset	vim82\autoload\tohtml.vim	/^function! tohtml#EncodingFromCharset(encoding) "{{{$/;"	f
tohtml#GetOption	vim82\autoload\tohtml.vim	/^func! tohtml#GetOption(settings, option, default) "{{{$/;"	f
tohtml#GetUserSettings	vim82\autoload\tohtml.vim	/^func! tohtml#GetUserSettings() "{{{$/;"	f
topback	vim82\doc\makehtml.awk	/^function topback () {$/;"	f
topback	vim82\doc\maketags.awk	/^function topback () {$/;"	f
topindent	vim82\ftplugin\ocaml.vim	/^function s:topindent(lnum)$/;"	f
tp	vim82\ftplugin\context.vim	/^  fun! s:tp()$/;"	f
tp	vim82\ftplugin\context.vim	/^  onoremap <silent><buffer> tp :<c-u>call <sid>tp()<cr>$/;"	m
tp	vim82\ftplugin\context.vim	/^  vnoremap <silent><buffer> tp <esc>:<c-u>call <sid>tp()<cr>$/;"	m
trimmed_system_with_default	vim82\ftplugin\changelog.vim	/^  function! s:trimmed_system_with_default(command, default)$/;"	f
try_reading_file	vim82\ftplugin\changelog.vim	/^  function! s:try_reading_file(path)$/;"	f
typed	vim82\tools\demoserver.py	/^        typed = sys.stdin.readline()$/;"	v	class:ThreadedTCPServer
typescript_props	vim82\syntax\typescriptcommon.vim	/^  let typescript_props = 1$/;"	v
typeset	vim82\autoload\context.vim	/^  function! s:typeset(path)$/;"	f
u	vim82\macros\less.vim	/^noremap <script> u <C-U><SID>L$/;"	m
u	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap u g$/;"	m
uc_minlines	vim82\syntax\uc.vim	/^  let uc_minlines = 10$/;"	v
unformat_ocaml_type	vim82\ftplugin\ocaml.vim	/^    function s:unformat_ocaml_type(res)$/;"	f
unify_separator	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:unify_separator(path) abort$/;"	f
unknown	lua\jit\dis_arm.lua	/^local function unknown(ctx)$/;"	f
unknown	lua\jit\dis_arm64.lua	/^local function unknown(ctx)$/;"	f
unknown	lua\jit\dis_mips.lua	/^local function unknown(ctx)$/;"	f
unknown	lua\jit\dis_ppc.lua	/^local function unknown(ctx)$/;"	f
unknown	lua\jit\dis_x86.lua	/^local function unknown(ctx)$/;"	f
unload	vim82\optwin.vim	/^fun! <SID>unload()$/;"	f
usage	lua\jit\bcsave.lua	/^local function usage()$/;"	f
usage	vim82\doc\vim2html.pl	/^sub usage$/;"	s
usage	vim82\doc\vim2html.pl	/^usage:$/;"	l
usage	vim82\tools\efm_perl.pl	/^sub usage {$/;"	s
usage	vim82\tools\shtags.pl	/^sub usage$/;"	s
use_mutt_sidebar	vim82\syntax\muttrc.vim	/^  let use_mutt_sidebar=0$/;"	v
username	vim82\ftplugin\changelog.vim	/^  function! s:username()$/;"	f
v	vim82\macros\less.vim	/^map v :silent call <SID>End()<CR>$/;"	m
v	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap v k$/;"	m
vera_comment_strings	vim82\syntax\vera.vim	/^let vera_comment_strings = 1$/;"	v
verifyenc_enable	plugins\kaoriya\plugin\verifyenc.vim	/^  let verifyenc_enable = 1$/;"	v
verifyenc_maxlines	plugins\kaoriya\plugin\verifyenc.vim	/^  let verifyenc_maxlines = 100$/;"	v
version	vim82\tools\shtags.pl	/^sub version$/;"	s
vex 	lua\jit\dis_x86.lua	/^  vex = function(ctx, name, pat)$/;"	f
view_changelog	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! s:view_changelog()$/;"	f
view_log	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! s:view_log()$/;"	f
vim2html	vim82\doc\vim2html.pl	/^sub vim2html$/;"	s
vimStartup	vim82\defaults.vim	/^  augroup vimStartup$/;"	a
vimball#Decompress	vim82\autoload\vimball.vim	/^fun! vimball#Decompress(fname,...)$/;"	f
vimball#MkVimball	vim82\autoload\vimball.vim	/^fun! vimball#MkVimball(line1,line2,writelevel,...) range$/;"	f
vimball#RestoreSettings	vim82\autoload\vimball.vim	/^fun! vimball#RestoreSettings()$/;"	f
vimball#RmVimball	vim82\autoload\vimball.vim	/^fun! vimball#RmVimball(...)$/;"	f
vimball#SaveSettings	vim82\autoload\vimball.vim	/^fun! vimball#SaveSettings()$/;"	f
vimball#ShowMesg	vim82\autoload\vimball.vim	/^fun! vimball#ShowMesg(level,msg)$/;"	f
vimball#Vimball	vim82\autoload\vimball.vim	/^fun! vimball#Vimball(really,...)$/;"	f
vimball#VimballHome	vim82\autoload\vimball.vim	/^fun! vimball#VimballHome()$/;"	f
vimproc	plugins\vimproc\autoload\vimproc.vim	/^augroup vimproc$/;"	a
vimproc	plugins\vimproc\autoload\vimproc\cmd.vim	/^augroup vimproc$/;"	a
vimproc#_get_bg_processes	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#_get_bg_processes() abort "{{{$/;"	f
vimproc#analyze_shebang	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#analyze_shebang(filename) abort "{{{$/;"	f
vimproc#cmd#system	plugins\vimproc\autoload\vimproc\cmd.vim	/^  function! vimproc#cmd#system(expr) abort$/;"	f
vimproc#cmd#system	plugins\vimproc\autoload\vimproc\cmd.vim	/^function! vimproc#cmd#system(expr) abort$/;"	f
vimproc#commands#_bang	plugins\vimproc\autoload\vimproc\commands.vim	/^function! vimproc#commands#_bang(cmdline) abort "{{{$/;"	f
vimproc#commands#_install	plugins\vimproc\autoload\vimproc\commands.vim	/^function! vimproc#commands#_install(args) abort "{{{$/;"	f
vimproc#commands#_read	plugins\vimproc\autoload\vimproc\commands.vim	/^function! vimproc#commands#_read(cmdline) abort "{{{$/;"	f
vimproc#decode_signal	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#decode_signal(signal) abort "{{{$/;"	f
vimproc#delete_trash	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#delete_trash(filename) abort "{{{$/;"	f
vimproc#dll_version	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#dll_version() abort "{{{$/;"	f
vimproc#filepath#which	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! vimproc#filepath#which(command, path, maxcount) abort$/;"	f
vimproc#fopen	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#fopen(path, ...) abort "{{{$/;"	f
vimproc#get_command_name	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#get_command_name(command, ...) abort "{{{$/;"	f
vimproc#get_last_errmsg	plugins\vimproc\autoload\vimproc.vim	/^  function! vimproc#get_last_errmsg() abort$/;"	f
vimproc#get_last_errmsg	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#get_last_errmsg() abort "{{{$/;"	f
vimproc#get_last_status	plugins\vimproc\autoload\vimproc.vim	/^  function! vimproc#get_last_status() abort$/;"	f
vimproc#get_last_status	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#get_last_status() abort "{{{$/;"	f
vimproc#host_exists	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#host_exists(host) abort "{{{$/;"	f
vimproc#kill	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#kill(pid, sig) abort "{{{$/;"	f
vimproc#lexer#init_lexer	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! vimproc#lexer#init_lexer(text) abort$/;"	f
vimproc#lexer#init_reader	plugins\vimproc\autoload\vimproc\lexer.vim	/^function! vimproc#lexer#init_reader(text) abort$/;"	f
vimproc#open	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#open(filename) abort "{{{$/;"	f
vimproc#parser#expand_wildcard	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#expand_wildcard(wildcard) abort "{{{$/;"	f
vimproc#parser#parse_pipe	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#parse_pipe(statement) abort "{{{$/;"	f
vimproc#parser#parse_statements	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#parse_statements(script) abort "{{{$/;"	f
vimproc#parser#split_args	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#split_args(script) abort "{{{$/;"	f
vimproc#parser#split_args_through	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#split_args_through(script) abort "{{{$/;"	f
vimproc#parser#split_commands	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#split_commands(script) abort "{{{$/;"	f
vimproc#parser#split_pipe	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#split_pipe(script) abort "{{{$/;"	f
vimproc#parser#split_statements	plugins\vimproc\autoload\vimproc\parser.vim	/^function! vimproc#parser#split_statements(script) abort "{{{$/;"	f
vimproc#pgroup_open	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#pgroup_open(statements, ...) abort "{{{$/;"	f
vimproc#plineopen2	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#plineopen2(commands, ...) abort "{{{$/;"	f
vimproc#plineopen3	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#plineopen3(commands, ...) abort "{{{$/;"	f
vimproc#popen2	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#popen2(args, ...) abort "{{{$/;"	f
vimproc#popen3	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#popen3(args, ...) abort "{{{$/;"	f
vimproc#ptyopen	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#ptyopen(commands, ...) abort "{{{$/;"	f
vimproc#readdir	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#readdir(dirname) abort "{{{$/;"	f
vimproc#shellescape	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#shellescape(string) abort "{{{$/;"	f
vimproc#socket_open	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#socket_open(host, port) abort "{{{$/;"	f
vimproc#system	plugins\vimproc\autoload\vimproc.vim	/^  function! vimproc#system(...) abort$/;"	f
vimproc#system	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#system(cmdline, ...) abort "{{{$/;"	f
vimproc#system2	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#system2(...) abort "{{{$/;"	f
vimproc#system_bg	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#system_bg(cmdline) abort "{{{$/;"	f
vimproc#system_gui	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#system_gui(cmdline) abort "{{{$/;"	f
vimproc#system_passwd	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#system_passwd(cmdline, ...) abort "{{{$/;"	f
vimproc#test_readdir	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#test_readdir(dirname) abort "{{{$/;"	f
vimproc#util#cd	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#cd(path) abort  "{{{$/;"	f
vimproc#util#expand	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#expand(path) abort "{{{$/;"	f
vimproc#util#has_iconv	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#has_iconv() abort "{{{$/;"	f
vimproc#util#has_lua	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#has_lua() abort "{{{$/;"	f
vimproc#util#iconv	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#iconv(expr, from, to) abort "{{{$/;"	f
vimproc#util#is_cygwin	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#is_cygwin() abort "{{{$/;"	f
vimproc#util#is_mac	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#is_mac() abort "{{{$/;"	f
vimproc#util#is_windows	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#is_windows() abort "{{{$/;"	f
vimproc#util#set_default	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#set_default(var, val, ...) abort  "{{{$/;"	f
vimproc#util#stderrencoding	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#stderrencoding() abort "{{{$/;"	f
vimproc#util#stdinencoding	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#stdinencoding() abort "{{{$/;"	f
vimproc#util#stdoutencoding	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#stdoutencoding() abort "{{{$/;"	f
vimproc#util#substitute_path_separator	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#substitute_path_separator(path) abort "{{{$/;"	f
vimproc#util#systemencoding	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#systemencoding() abort "{{{$/;"	f
vimproc#util#termencoding	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#termencoding() abort "{{{$/;"	f
vimproc#util#try_download_windows_dll	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#try_download_windows_dll(version) abort  "{{{$/;"	f
vimproc#util#try_update_windows_dll	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#try_update_windows_dll(version) abort  "{{{$/;"	f
vimproc#util#uniq	plugins\vimproc\autoload\vimproc\util.vim	/^function! vimproc#util#uniq(list, ...) abort "{{{$/;"	f
vimproc#version	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#version() abort "{{{$/;"	f
vimproc#write	plugins\vimproc\autoload\vimproc.vim	/^function! vimproc#write(filename, string, ...) abort "{{{$/;"	f
vimrcEx	vim82\vimrc_example.vim	/^augroup vimrcEx$/;"	a
vm 	lua\jit\dis_x86.lua	/^  vm = function(ctx, name, pat)$/;"	f
vp_checkpid	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_checkpid() dict$/;"	f
vp_dlclose	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_dlclose(handle) abort$/;"	f
vp_dlopen	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_dlopen(path) abort$/;"	f
vp_file_close	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_file_close() dict$/;"	f
vp_file_open	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_file_open(path, flags, mode) abort$/;"	f
vp_file_read	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_file_read(number, timeout) dict$/;"	f
vp_file_write	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_file_write(hd, timeout) dict$/;"	f
vp_get_winsize	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_get_winsize() dict$/;"	f
vp_host_exists	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_host_exists(host) abort$/;"	f
vp_kill	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_kill(...) dict$/;"	f
vp_pgroup_close	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pgroup_close() dict$/;"	f
vp_pgroup_kill	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pgroup_kill(...) dict$/;"	f
vp_pgroup_waitpid	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pgroup_waitpid() dict$/;"	f
vp_pipe_close	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pipe_close() dict$/;"	f
vp_pipe_open	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pipe_open(npipe, hstdin, hstdout, hstderr, argv) abort "{{{$/;"	f
vp_pipe_read	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pipe_read(number, timeout) dict$/;"	f
vp_pipe_write	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pipe_write(hd, timeout) dict$/;"	f
vp_pipes_close	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pipes_close() dict$/;"	f
vp_pty_close	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pty_close() dict$/;"	f
vp_pty_open	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pty_open(npipe, width, height, hstdin, hstdout, hstderr, argv) abort$/;"	f
vp_pty_read	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pty_read(number, timeout) dict$/;"	f
vp_pty_write	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_pty_write(hd, timeout) dict$/;"	f
vp_set_winsize	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_set_winsize(width, height) dict$/;"	f
vp_socket_close	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_socket_close() dict$/;"	f
vp_socket_open	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_socket_open(host, port) abort$/;"	f
vp_socket_read	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_socket_read(number, timeout) dict$/;"	f
vp_socket_write	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_socket_write(hd, timeout) dict$/;"	f
vp_waitpid	plugins\vimproc\autoload\vimproc.vim	/^function! s:vp_waitpid(...) dict$/;"	f
vundle#begin	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^func! vundle#begin(...) abort$/;"	f
vundle#bundle_dir	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^let vundle#bundle_dir = expand('$HOME\/.vim\/bundle', 1)$/;"	v
vundle#bundles	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^let vundle#bundles = []$/;"	v
vundle#config#activate_bundles	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! vundle#config#activate_bundles()$/;"	f
vundle#config#bundle	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! vundle#config#bundle(arg, ...)$/;"	f
vundle#config#init	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! vundle#config#init()$/;"	f
vundle#config#init_bundle	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! vundle#config#init_bundle(name, opts)$/;"	f
vundle#config#require	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\config.vim	/^func! vundle#config#require(bundles) abort$/;"	f
vundle#end	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^func! vundle#end(...) abort$/;"	f
vundle#installer#clean	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#clean(bang) abort$/;"	f
vundle#installer#delete	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#delete(bang, dir_name) abort$/;"	f
vundle#installer#docs	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#docs() abort$/;"	f
vundle#installer#helptags	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#helptags(bundles) abort$/;"	f
vundle#installer#install	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#install(bang, name) abort$/;"	f
vundle#installer#install_and_require	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#install_and_require(bang, name) abort$/;"	f
vundle#installer#list	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#list(bang) abort$/;"	f
vundle#installer#new	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#new(bang, ...) abort$/;"	f
vundle#installer#run	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#run(func_name, name, ...) abort$/;"	f
vundle#installer#shellesc	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#shellesc(cmd) abort$/;"	f
vundle#installer#shellesc_cd	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\installer.vim	/^func! vundle#installer#shellesc_cd(cmd) abort$/;"	f
vundle#lazy_load	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^let vundle#lazy_load = 0$/;"	v
vundle#log	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^let vundle#log = []$/;"	v
vundle#rc	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^func! vundle#rc(...) abort$/;"	f
vundle#scripts#all	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! vundle#scripts#all(bang, ...)$/;"	f
vundle#scripts#bundle_names	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! vundle#scripts#bundle_names(names)$/;"	f
vundle#scripts#complete	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! vundle#scripts#complete(a,c,d)$/;"	f
vundle#scripts#reload	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! vundle#scripts#reload() abort$/;"	f
vundle#scripts#view	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle\scripts.vim	/^func! vundle#scripts#view(title, headers, results)$/;"	f
vundle#updated_bundles	plugins\~\.vim\bundle\Vundle.vim\autoload\vundle.vim	/^let vundle#updated_bundles = []$/;"	v
w	vim82\macros\less.vim	/^map w b$/;"	m
w	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap w ,$/;"	m
w	vim82\tutor\tutor.cs	/^       objekt - ud·v· rozsah p¯Ìkazu, nap¯Ìklad  w  (slovo),$/;"	m
w	vim82\tutor\tutor.cs	/^  2. Objekty jsou takÈ shodnÈ, jako nap¯.: w (slovo), $ (konec ¯·dku), atd.$/;"	m
waitpid	plugins\vimproc\autoload\vimproc.vim	/^function! s:waitpid(pid, ...) abort$/;"	f
which	plugins\vimproc\autoload\vimproc\filepath.vim	/^function! s:which(command, ...) abort$/;"	f
win_escape	plugins\vimproc\autoload\vimproc\util.vim	/^function! s:win_escape(str) abort  "{{{$/;"	f
win_getid	vim82\autoload\context.vim	/^  function! s:win_getid()$/;"	f
win_id2win	vim82\autoload\context.vim	/^  function! s:win_id2win(winid)$/;"	f
win_id2win	vim82\autoload\context.vim	/^  function! s:win_id2win(winnr)$/;"	f
winids	vim82\optwin.vim	/^  let winids = win_findbuf(buf)$/;"	v
word	vim82\spell\fixdup.vim	/^  let word = getline(lnum)$/;"	v
wpisanie	vim82\tutor\tutor.pl	/^     wpisanie:		:set ic$/;"	l
wpisz	vim82\tutor\tutor.pl	/^     wpisz  :%s\/stare\/nowe\/g   by zmieniÊ wszystkie wyst±pienia w ca≥ym pliku.$/;"	l
wpisz	vim82\tutor\tutor.pl	/^     wpisz  :%s\/stare\/nowe\/gc  by zmieniÊ wszystkie wyst±pienia w ca≥ym$/;"	l
wpisz	vim82\tutor\tutor.pl	/^     wpisz:			:wq<ENTER>$/;"	l
wpisz	vim82\tutor\tutor.pl	/^     wpisz: :#,#s\/stare\/nowe\/g gdzie #,# s± numerami linii ograniczaj±cych$/;"	l
wpisz	vim82\tutor\tutor.pl	/^  wpisz :q<ENTER>        aby zamkn±Ê okno pomocy.$/;"	l
wrap_a	vim82\ftplugin\ruby.vim	/^function! s:wrap_a(back,forward) abort$/;"	f
wrap_i	vim82\ftplugin\ruby.vim	/^function! s:wrap_i(back,forward) abort$/;"	f
wrapperfunc_lines	vim82\syntax\2html.vim	/^      let wrapperfunc_lines[-1] .= ' " . "data-" . l:style_name . "-content=\\"".a:text."\\"'$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^      let wrapperfunc_lines[-1] .=$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^    let wrapperfunc_lines += [ '  endif' ]$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^    let wrapperfunc_lines += [$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^    let wrapperfunc_lines = [$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^    let wrapperfunc_lines[-1] .= '<\/span>"'$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^    let wrapperfunc_lines[-1] .= '>'$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^  let wrapperfunc_lines += [$/;"	v
wrapperfunc_lines	vim82\syntax\2html.vim	/^  let wrapperfunc_lines = [$/;"	v
write	plugins\vimproc\autoload\vimproc.vim	/^function! s:write(str, ...) dict "{{{$/;"	f
writeCSS	vim82\doc\vim2html.pl	/^sub writeCSS$/;"	s
write_pgroup	plugins\vimproc\autoload\vimproc.vim	/^function! s:write_pgroup(str, ...) dict "{{{$/;"	f
write_pipes	plugins\vimproc\autoload\vimproc.vim	/^function! s:write_pipes(str, ...) dict "{{{$/;"	f
x	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap x q$/;"	m
x_error_check	vim82\tools\xcmdsrv_client.c	/^x_error_check(Display *dpy, XErrorEvent *error_event)$/;"	f	file:
xmlcomplete#CompleteTags	vim82\autoload\xmlcomplete.vim	/^function! xmlcomplete#CompleteTags(findstart, base)$/;"	f
xmlcomplete#CreateConnection	vim82\autoload\xmlcomplete.vim	/^function! xmlcomplete#CreateConnection(canonical, ...) " {{{$/;"	f
xmlcomplete#CreateEntConnection	vim82\autoload\xmlcomplete.vim	/^function! xmlcomplete#CreateEntConnection(...) " {{{$/;"	f
xmlcomplete#GetLastOpenTag	vim82\autoload\xmlcomplete.vim	/^function! xmlcomplete#GetLastOpenTag(unaryTagsStack)$/;"	f
xmlformat#Format	vim82\autoload\xmlformat.vim	/^func! xmlformat#Format() abort$/;"	f
y	vim82\macros\less.vim	/^map y k$/;"	m
y	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap y f$/;"	m
z	vim82\macros\less.vim	/^  map z <Space>$/;"	m
z	vim82\macros\life\life.vim	/^map z ,^,&,*,&<1,*<2$/;"	m
z	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap z ;$/;"	m
zip	vim82\plugin\zipPlugin.vim	/^augroup zip$/;"	a
zip#Browse	vim82\autoload\zip.vim	/^fun! zip#Browse(zipfile)$/;"	f
zip#Extract	vim82\autoload\zip.vim	/^fun! zip#Extract()$/;"	f
zip#Read	vim82\autoload\zip.vim	/^fun! zip#Read(fname,mode)$/;"	f
zip#Write	vim82\autoload\zip.vim	/^fun! zip#Write(fname)$/;"	f
zt	vim82\syntax\2html.vim	/^  norm! zt$/;"	m
{	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap { ?$/;"	m
{ __index 	lua\jit\dis_ppc.lua	/^{ __index = function(t, x)$/;"	f
{ __index 	lua\jit\dump.lua	/^  { __index = function(tab, t)$/;"	f
}	vim82\pack\dist\opt\dvorak\dvorak\enable.vim	/^inoremap } +$/;"	m
ÇÃ	plugins\kaoriya\keymap\japanese_cp932.vim	/^no	ÇÃ$/;"	m
„ÅÆ	vim82\keymap\kana.vim	/^no „ÅÆ$/;"	m
